A programming team is a team of people who develop or maintain computer software.  They may be organised in numerous ways, but the egoless programming team and chief programmer team have been common structures.

Description
A programming team comprises people who develop or maintain computer software.

Programming team structures
Programming teams may be organised in numerous ways, but the egoless programming team and chief programmer team are two common structures typically used. The main determinants when choosing the programming team structure typically include: difficulty, size, duration, modularity, reliability, time, and sociability.

Egoless programming
According to Marilyn Mantei, individuals that are a part of a decentralized programming team report higher job satisfaction. But an egoless programming team contains groups of ten or fewer programmers. Code is exchanged and goals are set amongst the group members. Leadership is rotated within the group according to the needs and abilities required during a specific time. The lack of structure in the egoless team can result in a weakness of efficiency, effectiveness, and error detection for large-scale projects. Egoless programming teams work best for tasks that are very complex.

Chief programmer team
A chief programmer team will usually contain three-person teams consisting of a chief programmer, senior level programmer, and a program librarian. Additional programmers and analysts are added to the team when necessary. The weaknesses of this structure include a lack of communication across team members, task cooperation, and complex task completion. The chief programmer team works best for tasks that are simpler and straightforward since the flow of information in the team is limited. Individuals that work in this team structure typically report lower work morale.

Shared workstation teams
Pair programming
A development technique where two programmers work together at one workstation.

Mob programming
A software development approach where the whole team works on the same thing, at the same time, in the same space, and at the same computer.

Programming Models
Programming models allow software development teams to develop, deploy, and test projects using these different methodologies.
Throughout both of these programming models, team members typically participate in daily 5 - 15 minute stand-ups. Traditionally, each member of the team will stand up and state what they have worked on since the previous stand-up, what they intend to work on until the next stand-up, and whether or not there is anything preventing them from making progress, often known as a "blocker".

Waterfall Model
The waterfall model, noted as the more traditional  approach, is a linear model of production. The sequence of events of this methodology follows as:

Gather and document requirements
Design
Code and unit test
Perform system testing
Perform user acceptance testing (UAT)
Fix any issues
Deliver the finished productEach stage is distinct during the software development process, and each stage generally finishes before the next one can begin.
Programming teams using this model are able to design the project early on in the development process allowing teams to focus on coding and testing during the bulk of the work instead of constantly reiterating design. This also allows teams to design completely and more carefully so that teams can have a complete understanding of all software deliverables.

Agile Model
The Agile development model is a more team-based approach to development than the previous waterfall model. Teams work in rapid delivery/deployment which splits work into phases called "sprints". Sprints are usually defined as two weeks of planned software deliverables given to each team/team member.
After each sprint, work is reprioritized and the information learned from the previous sprint is used for future sprint planning. As the sprint work is complete, it can be reviewed and evaluated by the programming team and sent back for another iteration (i.e. next sprint) or closed if completed.
The general principles of the Agile Manifesto are as follows:

Satisfy the customer and continually develop software.
Changing requirements are embraced for the customer's competitive advantage.
Concentrate on delivering working software frequently. Delivery preference will be placed on the shortest possible time span.
Developers and business people must work together throughout the entire project.
Projects must be based on people who are motivated. Give them the proper environment and the support that they need. They should be trusted to get their jobs done.
Face-to-face communication is the best way to transfer information to and from a team.
Working software is the primary measurement of progress.
Agile processes will promote development that is sustainable. Sponsors, developers, and users should be able to maintain an indefinite, constant pace.
Constant attention to technical excellence and good design will enhance agility.
Simplicity is considered to be the art of maximizing the work that is not done, and it is essential.
Self-organized teams usually create the best designs.
At regular intervals, the team will reflect on how to become more effective, and they will tune and adjust their behavior accordingly.

See also
Cross-functional team
Scrum (software development)
Software development process
Team software process


== References ==