Software maintenance in software engineering is the modification of a software product after delivery to correct faults, to improve performance or other attributes.A common perception of maintenance is that it merely involves fixing defects. However, one study indicated that over 80% of maintenance effort is used for non-corrective actions. This perception is perpetuated by users submitting problem reports that in reality are functionality enhancements to the system. More recent studies put the bug-fixing proportion closer to 21%.

History
Software maintenance and evolution of systems was first addressed by Meir M. Lehman in 1969. Over a period of twenty years, his research led to the formulation of Lehman's Laws (Lehman 1997). Key findings of his research conclude that maintenance is really evolutionary development and that maintenance decisions are aided by understanding what happens to systems (and software) over time. Lehman demonstrated that systems continue to evolve over time. As they evolve, they grow more complex unless some action such as code refactoring is taken to reduce the complexity.
In the late 1970s, a famous and widely cited survey study by Lientz and Swanson, exposed the very high fraction of life-cycle costs that were being expended on maintenance.
The survey showed that around 75% of the maintenance effort was on the first two types, and error correction consumed about 21%. Many subsequent studies suggest a similar problem magnitude. Studies show that contribution of end users is crucial during the new requirement data gathering and analysis. This is the main cause of any problem during software evolution and maintenance. Software maintenance is important because it consumes a large part of the overall lifecycle costs and also the inability to change software quickly and reliably means that business opportunities are lost.

Importance of software maintenance
The key software maintenance issues are managerial and technical. Management issues include alignment with customer priorities, staffing, assigning responsibilities, and estimating costs. Technical issues include: limited understanding, impact analysis, testing, and maintainability measurement.
Software maintenance is a broad activity that includes error correction, enhancements of capabilities, removal of obsolete capabilities, and optimization. Because change is inevitable, mechanisms must be developed for evaluation, controlling and making modifications.
Any work done on software after it is deployed is considered maintenance.
Maintenance preserves software's value over time. Value can be enhanced by expanding the customer base, meeting new and additional requirements, becoming easier to use, more efficient and employing newer technology. Maintenance may span decades, whereas initial development is typically less than 3 years.

Software maintenance planning
An integral part of software is maintenance, which requires an accurate maintenance plan to be constructed during the software development. It should specify how users will request modifications or report problems. The budget should include resource and cost estimates, and a new decision should be addressed for the development of every new system feature and its quality objectives. The software maintenance, which can last for 5+ years (or even decades) after the development process, calls for an effective plan which can address the scope of software maintenance, the tailoring of the post delivery/deployment process, the designation of who will provide maintenance, and an estimate of the life-cycle costs.

Software maintenance processes
This section describes the six software maintenance processes as:

Implementation - software preparation and transition activities, such as the creation of the maintenance plan; the preparation for handling problems identified during development; and the follow-up on product configuration management.
Problem and modification analysis - Requests and problems are confirmed (reproduced), analyzed and investigated. Solutions are proposed and documented. Authorization to apply modifications is obtained.
Modification implementation - software code, data and/or configuration is updated, compiled, and re-deployed.
Modification acceptance - the individual who submitted the request operates/tests the software to confirm that the issue has been resolved.
Migration (platform migration, for example) is exceptional, and is not part of daily maintenance tasks. If the software must be ported to another platform without any change in functionality, this process will be used and a maintenance project team is likely to be assigned to this task.
Retirement of obsolete/replaced software components. This, typically does not occur on a daily basis.There are a number of processes, activities, and practices that are unique to maintainers, for example:

Transition: a controlled and coordinated sequence of activities during which a system is transferred progressively from the developer to the maintainer. Ideally, it should include a Knowledge Transfer (KT) to occur during a typical hand-over.
Service Level Agreements (SLAs) and specialized (domain-specific) maintenance contracts negotiated by maintainers
Modification Request and Problem Report Help Desk: a problem-handling process used by maintainers to prioritize, document, and route requests.

Categories of software maintenance
E.B. Swanson initially identified three categories of maintenance: corrective, adaptive, and perfective. The IEEE 1219 standard was superseded in June 2010 by P14764.
These have since been updated and ISO/IEC 14764 presents:

Corrective maintenance: Reactive modification of a software product performed after delivery to correct discovered problems. Corrective maintenance can be automated with automatic bug fixing.
Adaptive maintenance: Modification of a software product performed after delivery to keep a software product usable in a changed or changing environment.
Perfective maintenance: Modification of a software product after delivery to improve performance or maintainability.
Preventive maintenance: Modification of a software product after delivery to detect and correct latent faults in the software product before they become effective faults.There is also a notion of pre-delivery/pre-release maintenance which is all the good things you do to lower the total cost of ownership of the software.  Things like compliance with coding standards that includes software maintainability goals. The management of coupling and cohesion of the software.  The attainment of software supportability goals (SAE JA1004, JA1005 and JA1006 for example). Some academic institutions are carrying out research to quantify the cost to ongoing software maintenance due to the lack of resources such as design documents and system/software comprehension training and resources (multiply costs by approx. 1.5-2.0 where there is no design data available).

Maintenance factors
Impact of key adjustment factors on maintenance (sorted in order of maximum positive impact)

Not only are error-prone modules troublesome, but they can degrade performance too. For example, very complex spaghetti code is quite difficult to maintain safely.
A very common situation which often degrades performance is lack of suitable maintenance tools, such as defect tracking software, change management software, and test library software. Below describe some of the factors and the range of impact on software maintenance.
Impact of key adjustment factors on maintenance (sorted in order of maximum negative impact)

Maintenance debt
In a paper for the 27th International Conference on Software Quality Management  in 2019, John Estdale introduced the term “maintenance debt” for maintenance needs generated by an implementation’s dependence on external IT factors such as libraries, platforms and tools, that have become obsolescent. The application continues to run, and the IT department forgets this theoretical liability, focussing on more urgent requirements and problems elsewhere. Such debt accumulates over time, silently eating away at the value of the software asset. Eventually something happens that makes system change unavoidable.
The owner may then discover that the system can no longer be modified – it is literally unmaintainable. Less dramatically, it may take too long, or cost too much, for maintenance to solve the business problem, and an alternative solution must be found. The software has suddenly crashed to £0 value.
Estdale defines "Maintenance Debt" as: the gap between the current implementation state of an application and the ideal, using only functionality of external components that is fully maintained and supported. This debt is often hidden or not recognized. An application’s overall maintainability is dependent on the continuing obtainability of components of all sorts from other suppliers, including:

Development tools: source editing, configuration management, compilation and build
Testing tools: test selection, execution/verification/reporting
Platforms to execute the above: hardware, operating system and other services
Production environment and any standby/Disaster Recovery facilities, including the source code language’s Run-Time Support Environment, and the wider ecosystem of job scheduling, file transfer, replicated storage, backup and archive, single sign-on, etc etc.
Separately acquired packages, eg DBMS, graphics, comms, middleware
Bought in source-code, object code libraries, and other invocable services
Any requirements arising from other applications sharing the production environment or interworking with the application in questionand of course

The availability of relevant skills, in-house, or in the marketplace.The complete disappearance of a component could make the application un-rebuildable, or imminently unmaintainable.

See also
Application retirement
Journal of Software Maintenance and Evolution: Research and Practice
Long-term support
Search-based software engineering
Software archaeology
Software maintainer
Software development

References
Further reading
ISO/IEC/IEEE International Standard for Software Engineering - Software Life Cycle Processes - Maintenance. 2006. doi:10.1109/IEEESTD.2006.235774. ISBN 0-7381-4960-8.
Pigoski, Thomas M. (1996). Practical Software Maintenance. New York: John Wiley & Sons. ISBN 978-0-471-17001-3.
Pigoski, Thomas M. Description for Software Evolution and Maintenance (version 0.5). SWEBOK Knowledge Area.
April, Alain; Abran, Alain (2008). Software Maintenance Management. New York: Wiley-IEEE. ISBN 978-0-470-14707-8.
Gopalaswamy Ramesh; Ramesh Bhattiprolu (2006). Software maintenance : effective practices for geographically distributed environments. New Delhi: Tata McGraw-Hill. ISBN 978-0-07-048345-3.
Grubb, Penny; Takang, Armstrong (2003). Software Maintenance. New Jersey: World Scientific Publishing. ISBN 978-981-238-425-6.
Lehman, M.M.; Belady, L.A. (1985). Program evolution : processes of software change. London: Academic Press Inc. ISBN 0-12-442441-4.
Page-Jones, Meilir (1980). The Practical Guide to Structured Systems Design. New York: Yourdon Press. ISBN 0-917072-17-0.

External links
Journal of Software Maintenance