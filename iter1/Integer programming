An integer programming problem is a mathematical optimization or feasibility program in which some or all of the variables are restricted to be integers. In many settings the term refers to integer linear programming (ILP), in which the objective function and the constraints (other than the integer constraints) are linear.
Integer programming is NP-complete. In particular, the special case of 0–1 integer linear programming, in which unknowns are binary, and only the restrictions must be satisfied, is one of Karp's 21 NP-complete problems.If some decision variables are not discrete, the problem is known as a mixed-integer programming problem.

Canonical and standard form for ILPs
In integer linear programming, the canonical form is distinct from the standard form. An integer linear program in canonical form is expressed thus (note that it is the 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
   vector which is to be decided):

  
    
      
        
          
            
              
              
                
                  
                    maximize
                    
                      
                        x
                      
                      ∈
                      
                        
                          Z
                        
                        
                          n
                        
                      
                    
                  
                
              
              
              
                
                  
                    c
                  
                  
                    
                      T
                    
                  
                
                
                  x
                
              
            
            
              
              
                
                  subject to
                
              
              
              
                A
                
                  x
                
                ≤
                
                  b
                
                ,
              
            
            
              
              
              
              
                
                  x
                
                ≥
                
                  0
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}&{\underset {\mathbf {x} \in \mathbb {Z} ^{n}}{\text{maximize}}}&&\mathbf {c} ^{\mathrm {T} }\mathbf {x} \\&{\text{subject to}}&&A\mathbf {x} \leq \mathbf {b} ,\\&&&\mathbf {x} \geq \mathbf {0} \end{aligned}}}
  and an ILP in standard form is expressed as

  
    
      
        
          
            
              
              
                
                  
                    maximize
                    
                      
                        x
                      
                      ∈
                      
                        
                          Z
                        
                        
                          n
                        
                      
                    
                  
                
              
              
              
                
                  
                    c
                  
                  
                    
                      T
                    
                  
                
                
                  x
                
              
            
            
              
              
                
                  subject to
                
              
              
              
                A
                
                  x
                
                +
                
                  s
                
                =
                
                  b
                
                ,
              
            
            
              
              
              
              
                
                  s
                
                ≥
                
                  0
                
                ,
              
            
            
              
              
              
              
                
                  x
                
                ≥
                
                  0
                
                ,
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}&{\underset {\mathbf {x} \in \mathbb {Z} ^{n}}{\text{maximize}}}&&\mathbf {c} ^{\mathrm {T} }\mathbf {x} \\&{\text{subject to}}&&A\mathbf {x} +\mathbf {s} =\mathbf {b} ,\\&&&\mathbf {s} \geq \mathbf {0} ,\\&&&\mathbf {x} \geq \mathbf {0} ,\end{aligned}}}
  where 
  
    
      
        
          c
        
        ∈
        
          
            R
          
          
            n
          
        
        ,
        
          b
        
        ∈
        
          
            R
          
          
            m
          
        
      
    
    {\displaystyle \mathbf {c} \in \mathbb {R} ^{n},\mathbf {b} \in \mathbb {R} ^{m}}
    are vectors and 
  
    
      
        A
        ∈
        
          
            R
          
          
            m
            ×
            n
          
        
      
    
    {\displaystyle A\in \mathbb {R} ^{m\times n}}
   is a matrix. As with linear programs, ILPs not in standard form can be converted to standard form by eliminating inequalities, introducing slack variables (
  
    
      
        
          s
        
      
    
    {\displaystyle \mathbf {s} }
  ) and replacing variables that are not sign-constrained with the difference of two sign-constrained variables.

Example
The plot on the right shows the following problem.

  
    
      
        
          
            
              
                max
              
              
                
                   
                
                y
              
            
            
              
                −
                x
                +
                y
              
              
                
                ≤
                1
              
            
            
              
                3
                x
                +
                2
                y
              
              
                
                ≤
                12
              
            
            
              
                2
                x
                +
                3
                y
              
              
                
                ≤
                12
              
            
            
              
                x
                ,
                y
              
              
                
                ≥
                0
              
            
            
              
                x
                ,
                y
              
              
                
                ∈
                
                  Z
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}\max &{\text{ }}y\\-x+y&\leq 1\\3x+2y&\leq 12\\2x+3y&\leq 12\\x,y&\geq 0\\x,y&\in \mathbb {Z} \end{aligned}}}
  The feasible integer points are shown in red, and the red dashed lines indicate their convex hull, which is the smallest convex polyhedron that contains all of these points. The blue lines together with the coordinate axes define the polyhedron of the LP relaxation, which is given by the inequalities without the integrality constraint. The goal of the optimization is to move the black dashed line as far upward while still touching the polyhedron. The optimal solutions of the integer problem are the points 
  
    
      
        (
        1
        ,
        2
        )
      
    
    {\displaystyle (1,2)}
   and 
  
    
      
        (
        2
        ,
        2
        )
      
    
    {\displaystyle (2,2)}
   that both have an objective value of 2. The unique optimum of the relaxation is 
  
    
      
        (
        1.8
        ,
        2.8
        )
      
    
    {\displaystyle (1.8,2.8)}
   with objective value of 2.8. If the solution of the relaxation is rounded to the nearest integers, it is not feasible for the ILP.

Proof of NP-hardness
The following is a reduction from minimum vertex cover to integer programming that will serve as the proof of NP-hardness.
Let 
  
    
      
        G
        =
        (
        V
        ,
        E
        )
      
    
    {\displaystyle G=(V,E)}
   be an undirected graph. Define a linear program as follows:

  
    
      
        
          
            
              
                min
                
                  ∑
                  
                    v
                    ∈
                    V
                  
                
                
                  y
                  
                    v
                  
                
              
            
            
              
                
                  y
                  
                    v
                  
                
                +
                
                  y
                  
                    u
                  
                
              
              
                
                ≥
                1
              
              
              
                ∀
                u
                v
                ∈
                E
              
            
            
              
                
                  y
                  
                    v
                  
                
              
              
                
                ≥
                0
              
              
              
                ∀
                v
                ∈
                V
              
            
            
              
                
                  y
                  
                    v
                  
                
              
              
                
                ∈
                
                  Z
                
              
              
              
                ∀
                v
                ∈
                V
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}\min \sum _{v\in V}y_{v}\\y_{v}+y_{u}&\geq 1&&\forall uv\in E\\y_{v}&\geq 0&&\forall v\in V\\y_{v}&\in \mathbb {Z} &&\forall v\in V\end{aligned}}}
  Given that the constraints limit 
  
    
      
        
          y
          
            v
          
        
      
    
    {\displaystyle y_{v}}
   to either 0 or 1, any feasible solution to the integer program is a subset of vertices. The first constraint implies that at least one end point of every edge is included in this subset. Therefore, the solution describes a vertex cover. Additionally given some vertex cover C, 
  
    
      
        
          y
          
            v
          
        
      
    
    {\displaystyle y_{v}}
   can be set to 1 for any 
  
    
      
        v
        ∈
        C
      
    
    {\displaystyle v\in C}
   and to 0 for any 
  
    
      
        v
        ∉
        C
      
    
    {\displaystyle v\not \in C}
   thus giving us a feasible solution to the integer program. Thus we can conclude that if we minimize the sum of 
  
    
      
        
          y
          
            v
          
        
      
    
    {\displaystyle y_{v}}
   we have also found the minimum vertex cover.

Variants
Mixed-integer linear programming (MILP) involves problems in which only some of the variables, 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
  , are constrained to be integers, while other variables are allowed to be non-integers.
Zero–one linear programming (or binary integer programming) involves problems in which the variables are restricted to be either 0 or 1. Any bounded integer variable can be expressed as a combination of binary variables. For example, given an integer variable, 
  
    
      
        0
        ≤
        x
        ≤
        U
      
    
    {\displaystyle 0\leq x\leq U}
  , the variable can be expressed using 
  
    
      
        ⌊
        
          log
          
            2
          
        
        ⁡
        U
        ⌋
        +
        1
      
    
    {\displaystyle \lfloor \log _{2}U\rfloor +1}
   binary variables:

Applications
There are two main reasons for using integer variables when modeling problems as a linear program:

The integer variables represent quantities that can only be integer. For example, it is not possible to build 3.7 cars.
The integer variables represent decisions (e.g. whether to include an edge in a graph) and so should only take on the value 0 or 1.These considerations occur frequently in practice and so integer linear programming can be used in many applications areas, some of which are briefly described below.

Production planning
Mixed-integer programming has many applications in industrial productions, including job-shop modelling. One important example happens in agricultural production planning and involves determining production yield for several crops that can share resources (e.g. land, labor, capital, seeds, fertilizer, etc.). A possible objective is to maximize the total production, without exceeding the available resources. In some cases, this can be expressed in terms of a linear program, but the variables must be constrained to be integer.

Scheduling
These problems involve service and vehicle scheduling in transportation networks.  For example, a problem may involve assigning buses or subways to individual routes so that a timetable can be met, and also to equip them with drivers. Here binary decision variables indicate whether a bus or subway is assigned to a route and whether a driver is assigned to a particular train or subway. The zero–one programming technique has been successfully applied to solve a project selection problem in which projects are mutually exclusive and/or technologically interdependent. It is used in a special case of integer programming, in which all the decision variables are integers. Variable can assume only the values zero or one.

Territorial partitioning
Territorial partitioning or districting problems consist of partitioning a geographical region into districts in order to plan some operations while considering different criteria or constraints. Some requirements for this problem are: contiguity, compactness, balance or equity, respect of natural boundaries, and socio-economic homogeneity. Some applications for this type of problem include: political districting, school districting, health services districting and waste management districting.

Telecommunications networks
The goal of these problems is to design a network of lines to install so that a predefined set of communication requirements are met and the total cost of the network is minimal.  This requires optimizing both the topology of the network along with setting the capacities of the various lines.  In many cases, the capacities are constrained to be integer quantities.  Usually there are, depending on the technology used, additional restrictions that can be modeled as linear inequalities with integer or binary variables.

Cellular networks
The task of frequency planning in GSM mobile networks involves distributing available frequencies across the antennas so that users can be served and interference is minimized between the antennas.  This problem can be formulated as an integer linear program in which binary variables indicate whether a frequency is assigned to an antenna.

Other applications
Cash flow matching
Energy system optimization
UAV guidance

Algorithms
The naive way to solve an ILP is to simply remove the constraint that x is integer, solve the corresponding LP (called the LP relaxation of the ILP), and then round the entries of the solution to the LP relaxation.  But, not only may this solution not be optimal, it may not even be feasible; that is, it may violate some constraint.

Using total unimodularity
While in general the solution to LP relaxation will not be guaranteed to be integral, if the ILP has the form 
  
    
      
        max
        
          
            c
          
          
            
              T
            
          
        
        
          x
        
      
    
    {\displaystyle \max \mathbf {c} ^{\mathrm {T} }\mathbf {x} }
   such that 
  
    
      
        A
        
          x
        
        =
        
          b
        
      
    
    {\displaystyle A\mathbf {x} =\mathbf {b} }
   where 
  
    
      
        A
      
    
    {\displaystyle A}
   and 
  
    
      
        
          b
        
      
    
    {\displaystyle \mathbf {b} }
   have all integer entries and 
  
    
      
        A
      
    
    {\displaystyle A}
   is totally unimodular, then every basic feasible solution is integral.  Consequently, the solution returned by the simplex algorithm is guaranteed to be integral.  To show that every basic feasible solution is integral, let 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
   be an arbitrary basic feasible solution . Since 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
   is feasible,
we know that 
  
    
      
        A
        
          x
        
        =
        
          b
        
      
    
    {\displaystyle A\mathbf {x} =\mathbf {b} }
  . Let 
  
    
      
        
          
            x
          
          
            0
          
        
        =
        [
        
          x
          
            
              n
              
                1
              
            
          
        
        ,
        
          x
          
            
              n
              
                2
              
            
          
        
        ,
        ⋯
        ,
        
          x
          
            
              n
              
                j
              
            
          
        
        ]
      
    
    {\displaystyle \mathbf {x} _{0}=[x_{n_{1}},x_{n_{2}},\cdots ,x_{n_{j}}]}
   be the elements corresponding to the basis columns for the basic solution 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
  . By definition of a basis, there is some square submatrix 
  
    
      
        B
      
    
    {\displaystyle B}
   of

  
    
      
        A
      
    
    {\displaystyle A}
   with linearly independent columns such that 
  
    
      
        B
        
          
            x
          
          
            0
          
        
        =
        
          b
        
      
    
    {\displaystyle B\mathbf {x} _{0}=\mathbf {b} }
  .
Since the columns of 
  
    
      
        B
      
    
    {\displaystyle B}
   are linearly independent and 
  
    
      
        B
      
    
    {\displaystyle B}
   is square, 
  
    
      
        B
      
    
    {\displaystyle B}
   is nonsingular,
and therefore by assumption, 
  
    
      
        B
      
    
    {\displaystyle B}
   is unimodular and so 
  
    
      
        det
        (
        B
        )
        =
        ±
        1
      
    
    {\displaystyle \det(B)=\pm 1}
  . Also, since 
  
    
      
        B
      
    
    {\displaystyle B}
   is nonsingular, it is invertible and therefore 
  
    
      
        
          
            x
          
          
            0
          
        
        =
        
          B
          
            −
            1
          
        
        
          b
        
      
    
    {\displaystyle \mathbf {x} _{0}=B^{-1}\mathbf {b} }
  . By definition, 
  
    
      
        
          B
          
            −
            1
          
        
        =
        
          
            
              B
              
                
                  a
                  d
                  j
                
              
            
            
              det
              (
              B
              )
            
          
        
        =
        ±
        
          B
          
            
              a
              d
              j
            
          
        
      
    
    {\displaystyle B^{-1}={\frac {B^{\mathrm {adj} }}{\det(B)}}=\pm B^{\mathrm {adj} }}
  . Here 
  
    
      
        
          B
          
            
              a
              d
              j
            
          
        
      
    
    {\displaystyle B^{\mathrm {adj} }}
   denotes the adjugate of 
  
    
      
        B
      
    
    {\displaystyle B}
   and is integral because 
  
    
      
        B
      
    
    {\displaystyle B}
   is integral.  Therefore,

Thus, if the matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   of an ILP is totally unimodular, rather than use an ILP algorithm, the simplex method can be used to solve the LP relaxation and the solution will be integer.

Exact algorithms
When the matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   is not totally unimodular, there are a variety of algorithms that can be used to solve integer linear programs exactly.  One class of algorithms are cutting plane methods, which work by solving the LP relaxation and then adding linear constraints that drive the solution towards being integer without excluding any integer feasible points.
Another class of algorithms are variants of the branch and bound method.  For example, the branch and cut method that combines both branch and bound and cutting plane methods.  Branch and bound algorithms have a number of advantages over algorithms that only use cutting planes.  One advantage is that the algorithms can be terminated early and as long as at least one integral solution has been found, a feasible, although not necessarily optimal, solution can be returned.  Further, the solutions of the LP relaxations can be used to provide a worst-case estimate of how far from optimality the returned solution is.  Finally, branch and bound methods can be used to return multiple optimal solutions.

Exact algorithms for a small number of variables
Suppose 
  
    
      
        A
      
    
    {\displaystyle A}
   is an m-by-n integer matrix and 
  
    
      
        
          b
        
      
    
    {\displaystyle \mathbf {b} }
   is an m-by-1 integer vector. We focus on the feasibility problem, which is to decide whether there exists an n-by-1 vector 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
   satisfying 
  
    
      
        A
        
          x
        
        ≤
        
          b
        
      
    
    {\displaystyle A\mathbf {x} \leq \mathbf {b} }
  .
Let V be the maximum absolute value of the coefficients in 
  
    
      
        A
      
    
    {\displaystyle A}
    and 
  
    
      
        
          b
        
      
    
    {\displaystyle \mathbf {b} }
  . If n (the number of variables) is a fixed constant, then the feasibility problem can be solved in time polynomial in m and log V. This is trivial for the case n=1. The case n=2 was solved in 1981 by Herbert Scarf. The general case was solved in 1983 by Hendrik Lenstra, combining ideas by László Lovász and Peter van Emde Boas. Doignon's theorem asserts that an integer program is feasible whenever every subset of 
  
    
      
        
          2
          
            n
          
        
      
    
    {\displaystyle 2^{n}}
   constraints is feasible; a method combining this result with algorithms for LP-type problems can be used to solve integer programs in time that is linear in 
  
    
      
        m
      
    
    {\displaystyle m}
   and fixed-parameter tractable (but possibly doubly exponential) in 
  
    
      
        n
      
    
    {\displaystyle n}
  , with no dependence on 
  
    
      
        V
      
    
    {\displaystyle V}
  .In the special case of 0-1 ILP, Lenstra's algorithm is equivalent to complete enumeration: the number of all possible solutions is fixed (2n), and checking the feasibility of each solution can be done in time poly(m, log V). In the general case, where each variable can be an arbitrary integer, complete enumeration is impossible. Here, Lenstra's algorithm uses ideas from Geometry of numbers. It transforms the original problem into an equivalent one with the following property: either the existence of a solution 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
   is obvious, or the value of 
  
    
      
        
          x
          
            n
          
        
      
    
    {\displaystyle x_{n}}
   (the n-th variable) belongs to an interval whose length is bounded by a function of n. In the latter case, the problem is reduced to a bounded number of lower-dimensional problems. The run-time complexity of the algorithm has been improved in several steps:

The original algorithm of Lenstra had run-time 
  
    
      
        
          2
          
            O
            (
            
              n
              
                3
              
            
            )
          
        
        ⋅
        (
        m
        ⋅
        log
        ⁡
        V
        
          )
          
            O
            (
            1
            )
          
        
      
    
    {\displaystyle 2^{O(n^{3})}\cdot (m\cdot \log V)^{O(1)}}
  .
Kannan  presented an improved algorithm with run-time 
  
    
      
        
          n
          
            O
            (
            n
            )
          
        
        ⋅
        (
        m
        ⋅
        log
        ⁡
        V
        
          )
          
            O
            (
            1
            )
          
        
      
    
    {\displaystyle n^{O(n)}\cdot (m\cdot \log V)^{O(1)}}
  .
Frank and Tardos presented an improved algorithm with run-time  
  
    
      
        
          n
          
            2.5
            n
          
        
        ⋅
        
          2
          
            O
            (
            n
            )
          
        
        ⋅
        (
        m
        ⋅
        log
        ⁡
        V
        
          )
          
            O
            (
            1
            )
          
        
      
    
    {\displaystyle n^{2.5n}\cdot 2^{O(n)}\cdot (m\cdot \log V)^{O(1)}}
  .: Prop.8 Dadush presented an improved algorithm with run-time 
  
    
      
        
          n
          
            n
          
        
        ⋅
        
          2
          
            O
            (
            n
            )
          
        
        ⋅
        (
        m
        ⋅
        log
        ⁡
        V
        
          )
          
            O
            (
            1
            )
          
        
      
    
    {\displaystyle n^{n}\cdot 2^{O(n)}\cdot (m\cdot \log V)^{O(1)}}
  .Reis and Rothvoss  presented an improved algorithm with run-time 
  
    
      
        (
        log
        ⁡
        n
        
          )
          
            O
            (
            n
            )
          
        
        ⋅
        (
        m
        ⋅
        log
        ⁡
        V
        
          )
          
            O
            (
            1
            )
          
        
      
    
    {\displaystyle (\log n)^{O(n)}\cdot (m\cdot \log V)^{O(1)}}
  .

Heuristic methods
Since integer linear programming is NP-hard, many problem instances are intractable and so heuristic methods must be used instead.  For example, tabu search can be used to search for solutions to ILPs.  To use tabu search to solve ILPs, moves can be defined as incrementing or decrementing an integer constrained variable of a feasible solution while keeping all other integer-constrained variables constant.  The unrestricted variables are then solved for. Short-term memory can consist of previously tried solutions while medium-term memory can consist of values for the integer constrained variables that have resulted in high objective values (assuming the ILP is a maximization problem). Finally, long-term memory can guide the search towards integer values that have not previously been tried.
Other heuristic methods that can be applied to ILPs include

Hill climbing
Simulated annealing
Reactive search optimization
Ant colony optimization
Hopfield neural networksThere are also a variety of other problem-specific heuristics, such as the k-opt heuristic for the traveling salesman problem. A disadvantage of heuristic methods is that if they fail to find a solution, it cannot be determined whether it is because there is no feasible solution or whether the algorithm simply was unable to find one.  Further, it is usually impossible to quantify how close to optimal a solution returned by these methods are.

Sparse integer programming
It is often the case that the matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   that defines the integer program is sparse. In particular, this occurs when the matrix has a block structure, which is the case in many applications. The sparsity of the matrix can be measured as follows. The graph of 
  
    
      
        A
      
    
    {\displaystyle A}
   has vertices corresponding to columns of 
  
    
      
        A
      
    
    {\displaystyle A}
  , and two columns form an edge if 
  
    
      
        A
      
    
    {\displaystyle A}
   has a row where both columns have nonzero entries. Equivalently, the vertices correspond to variables, and two variables form an edge if they share an inequality. The sparsity measure 
  
    
      
        d
      
    
    {\displaystyle d}
   of 
  
    
      
        A
      
    
    {\displaystyle A}
   is the minimum of the tree-depth of the graph of 
  
    
      
        A
      
    
    {\displaystyle A}
   and the tree-depth of the graph of the transpose of 
  
    
      
        A
      
    
    {\displaystyle A}
  . Let 
  
    
      
        a
      
    
    {\displaystyle a}
   be the numeric measure of 
  
    
      
        A
      
    
    {\displaystyle A}
   defined as the maximum absolute value of any entry of 
  
    
      
        A
      
    
    {\displaystyle A}
  . Let 
  
    
      
        n
      
    
    {\displaystyle n}
   be the number of variables of the integer program. Then it was shown in 2018 that integer programming can be solved in strongly polynomial and fixed-parameter tractable time parameterized by 
  
    
      
        a
      
    
    {\displaystyle a}
   and 
  
    
      
        d
      
    
    {\displaystyle d}
  . That is, for some computable function 
  
    
      
        f
      
    
    {\displaystyle f}
   and some constant 
  
    
      
        k
      
    
    {\displaystyle k}
  , integer programming can be solved in time 
  
    
      
        f
        (
        a
        ,
        d
        )
        
          n
          
            k
          
        
      
    
    {\displaystyle f(a,d)n^{k}}
  . In particular, the time is independent of the right-hand side 
  
    
      
        b
      
    
    {\displaystyle b}
   and objective function 
  
    
      
        c
      
    
    {\displaystyle c}
  . Moreover, in contrast to the classical result of Lenstra, where the number 
  
    
      
        n
      
    
    {\displaystyle n}
   of variables is a parameter, here the number 
  
    
      
        n
      
    
    {\displaystyle n}
   of variables is a variable part of the input.

See also
Constrained least squares

References
Further reading
George L. Nemhauser; Laurence A. Wolsey (1988). Integer and combinatorial optimization. Wiley. ISBN 978-0-471-82819-8.
Alexander Schrijver (1998). Theory of linear and integer programming. John Wiley and Sons. ISBN 978-0-471-98232-6.
Laurence A. Wolsey (1998). Integer programming. Wiley. ISBN 978-0-471-28366-9.
Dimitris Bertsimas; Robert Weismantel (2005). Optimization over integers. Dynamic Ideas. ISBN 978-0-9759146-2-5.
John K. Karlof (2006). Integer programming: theory and practice. CRC Press. ISBN 978-0-8493-1914-3.
H. Paul Williams (2009). Logic and Integer Programming. Springer. ISBN 978-0-387-92279-9.
Michael Jünger; Thomas M. Liebling; Denis Naddef; George Nemhauser; William R. Pulleyblank; Gerhard Reinelt; Giovanni Rinaldi; Laurence A. Wolsey, eds. (2009). 50 Years of Integer Programming 1958-2008: From the Early Years to the State-of-the-Art. Springer. ISBN 978-3-540-68274-5.
Der-San Chen; Robert G. Batson; Yu Dang (2010). Applied Integer Programming: Modeling and Solution. John Wiley and Sons. ISBN 978-0-470-37306-4.
Gerard Sierksma; Yori Zwols (2015). Linear and Integer Optimization: Theory and Practice. CRC Press. ISBN 978-1-498-71016-9.

External links
A Tutorial on Integer Programming
Conference Integer Programming and Combinatorial Optimization, IPCO
The Aussois Combinatorial Optimization Workshop