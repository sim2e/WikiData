In computational complexity theory, the Cook–Levin theorem, also known as Cook's theorem, states that the Boolean satisfiability problem is NP-complete.  That is, it is in NP, and any problem in NP can be reduced in polynomial time by a deterministic Turing machine to the Boolean satisfiability problem.
The theorem is named after Stephen Cook and Leonid Levin.
An important consequence of this theorem is that if there exists a deterministic polynomial-time algorithm for solving Boolean satisfiability, then every NP problem can be solved by a deterministic polynomial-time algorithm.  The question of whether such an algorithm for Boolean satisfiability exists is thus equivalent to the P versus NP problem, which is still widely considered the most important unsolved problem in theoretical computer science as of 2023.

Contributions
The concept of NP-completeness was developed in the late 1960s and early 1970s in parallel by researchers in North America and the USSR.
In 1971, Stephen Cook published his paper "The complexity of theorem proving procedures" in conference proceedings of the newly founded ACM Symposium on Theory of Computing. Richard Karp's subsequent paper, "Reducibility among
combinatorial problems", generated renewed interest in Cook's paper by providing a list of 21 NP-complete problems. Karp also introduced the notion of completeness used in the current definition of NP-completeness (i.e., by polynomial-time many-one reduction). Cook and Karp each received a Turing Award for this work.
The theoretical interest in NP-completeness was also enhanced by the work of Theodore P. Baker, John Gill, and Robert Solovay who showed, in 1975, that solving NP-problems in certain oracle machine models requires exponential time. That is, there exists an oracle A such that, for all subexponential deterministic-time complexity classes T, the relativized complexity class NPA is not a subset of TA. In particular, for this oracle, PA ≠ NPA.In the USSR, a result equivalent to Baker, Gill, and Solovay's was published in 1969 by M. Dekhtiar. Later Leonid Levin's paper, "Universal search problems", was published in 1973, although it was mentioned in talks and submitted for publication a few years earlier.
Levin's approach was slightly different from Cook's and Karp's in that he considered search problems, which require finding solutions rather than simply determining existence. He provided six such NP-complete search problems, or universal problems.
Additionally he found for each of these problems an algorithm that solves it in optimal time (in particular, these algorithms run in polynomial time if and only if P = NP).

Definitions
A decision problem is in NP if it can be decided by a non-deterministic Turing machine in polynomial time.
An instance of the Boolean satisfiability problem is a Boolean expression that combines Boolean variables using Boolean operators.
Such an expression is satisfiable if there is some assignment of truth values to the variables that makes the entire expression true.

Idea
Given any decision problem in NP, construct a non-deterministic machine that solves it in polynomial time. Then for each input to that machine, build a Boolean expression that computes whether when that specific input is passed to the machine, the machine runs correctly, and the machine halts and answers "yes". Then the expression can be satisfied if and only if there is a way for the machine to run correctly and answer "yes", so the satisfiability of the constructed expression is equivalent to asking whether or not the machine will answer "yes".

Proof
This proof is based on the one given by Garey & Johnson 1979, pp. 38–44, Section 2.6.
There are two parts to proving that the Boolean satisfiability problem (SAT) is NP-complete. One is to show that SAT is an NP problem. The other is to show that every NP problem can be reduced to an instance of a SAT problem by a polynomial-time many-one reduction.
SAT is in NP because any assignment of Boolean values to Boolean variables that is claimed to satisfy the given expression can be verified in polynomial time by a deterministic Turing machine. (The statements verifiable in polynomial time by a deterministic Turing machine and solvable in polynomial time by a non-deterministic Turing machine are equivalent, and the proof can be found in many textbooks, for example Sipser's Introduction to the Theory of Computation, section 7.3., as well as in the Wikipedia article on NP).

Now suppose that a given problem in NP can be solved by the nondeterministic Turing machine 
  
    
      
        M
        =
        (
        Q
        ,
        Σ
        ,
        s
        ,
        F
        ,
        δ
        )
      
    
    {\displaystyle M=(Q,\Sigma ,s,F,\delta )}
  , where 
  
    
      
        Q
      
    
    {\displaystyle Q}
   is the set of states, 
  
    
      
        Σ
      
    
    {\displaystyle \Sigma }
   is the alphabet of tape symbols, 
  
    
      
        s
        ∈
        Q
      
    
    {\displaystyle s\in Q}
   is the initial state, 
  
    
      
        F
        ⊆
        Q
      
    
    {\displaystyle F\subseteq Q}
   is the set of accepting states, and 
  
    
      
        δ
        ⊆
        (
        (
        Q
        ∖
        F
        )
        ×
        Σ
        )
        ×
        (
        Q
        ×
        Σ
        ×
        {
        −
        1
        ,
        +
        1
        }
        )
      
    
    {\displaystyle \delta \subseteq ((Q\setminus F)\times \Sigma )\times (Q\times \Sigma \times \{-1,+1\})}
   is the transition relation. Suppose further that 
  
    
      
        M
      
    
    {\displaystyle M}
   accepts or rejects an instance of the problem after at most 
  
    
      
        p
        (
        n
        )
      
    
    {\displaystyle p(n)}
   computation steps, where 
  
    
      
        n
      
    
    {\displaystyle n}
   is the size of the instance and 
  
    
      
        p
      
    
    {\displaystyle p}
   is a polynomial function.
For each input, 
  
    
      
        I
      
    
    {\displaystyle I}
  , specify a Boolean expression 
  
    
      
        B
      
    
    {\displaystyle B}
   that is satisfiable if and only if the machine 
  
    
      
        M
      
    
    {\displaystyle M}
   accepts 
  
    
      
        I
      
    
    {\displaystyle I}
  .
The Boolean expression uses the variables set out in the following table. Here, 
  
    
      
        q
        ∈
        Q
      
    
    {\displaystyle q\in Q}
   is a machine state, 
  
    
      
        −
        p
        (
        n
        )
        ≤
        i
        ≤
        p
        (
        n
        )
      
    
    {\displaystyle -p(n)\leq i\leq p(n)}
   is a tape position, 
  
    
      
        j
        ∈
        Σ
      
    
    {\displaystyle j\in \Sigma }
   is a tape symbol, and 
  
    
      
        0
        ≤
        k
        ≤
        p
        (
        n
        )
      
    
    {\displaystyle 0\leq k\leq p(n)}
   is the number of a computation step.

Define the Boolean expression 
  
    
      
        B
      
    
    {\displaystyle B}
   to be the conjunction of the sub-expressions in the following table, for all 
  
    
      
        −
        p
        (
        n
        )
        ≤
        i
        ≤
        p
        (
        n
        )
      
    
    {\displaystyle -p(n)\leq i\leq p(n)}
   and 
  
    
      
        0
        ≤
        k
        ≤
        p
        (
        n
        )
      
    
    {\displaystyle 0\leq k\leq p(n)}
  :

If there is an accepting computation for 
  
    
      
        M
      
    
    {\displaystyle M}
   on input 
  
    
      
        I
      
    
    {\displaystyle I}
  , then 
  
    
      
        B
      
    
    {\displaystyle B}
   is satisfiable by assigning 
  
    
      
        
          T
          
            i
            ,
            j
            ,
            k
          
        
      
    
    {\displaystyle T_{i,j,k}}
  , 
  
    
      
        
          H
          
            i
            ,
            k
          
        
      
    
    {\displaystyle H_{i,k}}
   and 
  
    
      
        
          Q
          
            i
            ,
            k
          
        
      
    
    {\displaystyle Q_{i,k}}
   their intended interpretations. On the other hand, if 
  
    
      
        B
      
    
    {\displaystyle B}
   is satisfiable, then there is an accepting computation for 
  
    
      
        M
      
    
    {\displaystyle M}
   on input 
  
    
      
        I
      
    
    {\displaystyle I}
   that follows the steps indicated by the assignments to the variables.
There are 
  
    
      
        O
        (
        p
        (
        n
        
          )
          
            2
          
        
        )
      
    
    {\displaystyle O(p(n)^{2})}
   Boolean variables, each encodable in space 
  
    
      
        O
        (
        log
        ⁡
        p
        (
        n
        )
        )
      
    
    {\displaystyle O(\log p(n))}
  . The number of clauses is 
  
    
      
        O
        (
        p
        (
        n
        
          )
          
            3
          
        
        )
      
    
    {\displaystyle O(p(n)^{3})}
   so the size of 
  
    
      
        B
      
    
    {\displaystyle B}
   is 
  
    
      
        O
        (
        log
        ⁡
        (
        p
        (
        n
        )
        )
        p
        (
        n
        
          )
          
            3
          
        
        )
      
    
    {\displaystyle O(\log(p(n))p(n)^{3})}
  . Thus the transformation is certainly a polynomial-time many-one reduction, as required.
Only the first table row (
  
    
      
        
          T
          
            i
            ,
            j
            ,
            0
          
        
      
    
    {\displaystyle T_{i,j,0}}
  ) actually depends on the input string 
  
    
      
        I
      
    
    {\displaystyle I}
  . The remaining lines depend only on the input length 
  
    
      
        n
      
    
    {\displaystyle n}
   and on the machine 
  
    
      
        M
      
    
    {\displaystyle M}
  ; they formalize a generic computation of 
  
    
      
        M
      
    
    {\displaystyle M}
   for up to 
  
    
      
        p
        (
        n
        )
      
    
    {\displaystyle p(n)}
   steps.
The transformation makes extensive use of the polynomial 
  
    
      
        p
        (
        n
        )
      
    
    {\displaystyle p(n)}
  . As a consequence, the above proof is not constructive: even if 
  
    
      
        M
      
    
    {\displaystyle M}
   is known, witnessing the membership of the given problem in NP, the transformation cannot be effectively computed, unless an upper bound 
  
    
      
        p
        (
        n
        )
      
    
    {\displaystyle p(n)}
   of 
  
    
      
        M
      
    
    {\displaystyle M}
  's time complexity is also known.

Complexity
While the above method encodes a non-deterministic Turing machine in complexity 
  
    
      
        O
        (
        log
        ⁡
        (
        p
        (
        n
        )
        )
        p
        (
        n
        
          )
          
            3
          
        
        )
      
    
    {\displaystyle O(\log(p(n))p(n)^{3})}
  , the literature describes more sophisticated approaches in complexity 
  
    
      
        O
        (
        p
        (
        n
        )
        log
        ⁡
        (
        p
        (
        n
        )
        )
        )
      
    
    {\displaystyle O(p(n)\log(p(n)))}
  . The quasilinear result first appeared seven years after Cook's original publication.
The use of SAT to prove the existence of an NP-complete problem can be extended to other computational problems in logic, and to completeness for other complexity classes.
The quantified Boolean formula problem (QBF) involves Boolean formulas extended to include nested universal quantifiers and existential quantifiers for its variables. The QBF problem can be used to encode computation with a Turing machine limited to polynomial space complexity, proving that there exists a problem (the recognition of true quantified Boolean formulas) that is PSPACE-complete. Analogously, dependency quantified boolean formulas encode computation with a Turing machine limited to logarithmic space complexity, proving that there exists a problem that is NL-complete.

Consequences
The proof shows that every problem in NP can be reduced in polynomial time (in fact, logarithmic space suffices) to an instance of the Boolean satisfiability problem. This means that if the Boolean satisfiability problem could be solved in polynomial time by a deterministic Turing machine, then all problems in NP could be solved in polynomial time, and so the complexity class NP would be equal to the complexity class P.
The significance of NP-completeness was made clear by the publication in 1972 of Richard Karp's landmark paper, "Reducibility among combinatorial problems", in which he showed that 21 diverse combinatorial and graph theoretical problems, each infamous for its intractability, are NP-complete.Karp showed each of his problems to be NP-complete by reducing another problem (already shown to be NP-complete) to that problem.  For example, he showed the problem 3SAT (the Boolean satisfiability problem for expressions in conjunctive normal form (CNF) with exactly three variables or negations of variables per clause) to be NP-complete by showing how to reduce (in polynomial time) any instance of SAT to an equivalent instance of 3SAT.Garey and Johnson presented more than 300 NP-complete problems in their book Computers and Intractability: A Guide to the Theory of NP-Completeness, and new problems are still being discovered to be within that complexity class.
Although many practical instances of SAT can be solved by heuristic methods, the question of whether there is a deterministic polynomial-time algorithm for SAT (and consequently all other NP-complete problems) is still a famous unsolved problem, despite decades of intense effort by complexity theorists, mathematical logicians, and others.  For more details, see the article P versus NP problem.


== References ==