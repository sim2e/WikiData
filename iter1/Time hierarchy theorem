In computational complexity theory, the time hierarchy theorems are important statements about time-bounded computation on Turing machines. Informally, these theorems say that given more time, a Turing machine can solve more problems. For example, there are problems that can be solved with n2 time but not n time.
The time hierarchy theorem for deterministic multi-tape Turing machines was first proven by Richard E. Stearns and Juris Hartmanis in 1965. It was improved a year later when F. C. Hennie and Richard E. Stearns improved the efficiency of the Universal Turing machine. Consequent to the theorem, for every deterministic time-bounded complexity class, there is a strictly larger time-bounded complexity class, and so the time-bounded hierarchy of complexity classes does not completely collapse. More precisely, the time hierarchy theorem for deterministic Turing machines states that for all time-constructible functions f(n),

  
    
      
        
          
            D
            T
            I
            M
            E
          
        
        
          (
          
            o
            
              (
              
                f
                (
                n
                )
              
              )
            
          
          )
        
        ⊊
        
          
            D
            T
            I
            M
            E
          
        
        (
        f
        (
        n
        )
        
          log
          ⁡
          f
          (
          n
          )
        
        )
      
    
    {\displaystyle {\mathsf {DTIME}}\left(o\left(f(n)\right)\right)\subsetneq {\mathsf {DTIME}}(f(n){\log f(n)})}
  ,where DTIME(f(n)) denotes the complexity class of decision problems solvable in time O(f(n)). Note that the left-hand class involves little o notation, referring to the set of decision problems solvable in asymptotically less than f(n) time.
The time hierarchy theorem for nondeterministic Turing machines was originally proven by Stephen Cook in 1972. It was improved to its current form via a complex proof by Joel Seiferas, Michael Fischer, and Albert Meyer in 1978. Finally in 1983, Stanislav Žák achieved the same result with the simple proof taught today. The time hierarchy theorem for nondeterministic Turing machines states that if g(n) is a time-constructible function, and f(n+1) = o(g(n)), then

  
    
      
        
          
            N
            T
            I
            M
            E
          
        
        (
        f
        (
        n
        )
        )
        ⊊
        
          
            N
            T
            I
            M
            E
          
        
        (
        g
        (
        n
        )
        )
      
    
    {\displaystyle {\mathsf {NTIME}}(f(n))\subsetneq {\mathsf {NTIME}}(g(n))}
  .The analogous theorems for space are the space hierarchy theorems. A similar theorem is not known for time-bounded probabilistic complexity classes, unless the class also has one bit of advice.

Background
Both theorems use the notion of a time-constructible function. A function 
  
    
      
        f
        :
        
          N
        
        →
        
          N
        
      
    
    {\displaystyle f:\mathbb {N} \rightarrow \mathbb {N} }
   is time-constructible if there exists a deterministic Turing machine such that for every 
  
    
      
        n
        ∈
        
          N
        
      
    
    {\displaystyle n\in \mathbb {N} }
  , if the machine is started with an input of n ones, it will halt after precisely f(n) steps. All polynomials with non-negative integer coefficients are time-constructible, as are exponential functions such as 2n.

Proof overview
We need to prove that some time class TIME(g(n)) is strictly larger than some time class TIME(f(n)).  We do this by constructing a machine which cannot be in TIME(f(n)), by diagonalization.  We then show that the machine is in TIME(g(n)), using a simulator machine.

Deterministic time hierarchy theorem
Statement
Time Hierarchy Theorem. If f(n) is a time-constructible function, then there exists a decision problem which cannot be solved in worst-case deterministic time o(f(n)) but can be solved in worst-case deterministic time O(f(n)log f(n)). Thus

  
    
      
        
          
            D
            T
            I
            M
            E
          
        
        (
        o
        (
        f
        (
        n
        )
        )
        )
        ⊊
        
          
            D
            T
            I
            M
            E
          
        
        
          (
          
            f
            (
            n
            )
            log
            ⁡
            f
            (
            n
            )
          
          )
        
        .
      
    
    {\displaystyle {\mathsf {DTIME}}(o(f(n)))\subsetneq {\mathsf {DTIME}}\left(f(n)\log f(n)\right).}
  
Note 1. f(n) is at least n, since smaller functions are never time-constructible.Example. There are problems solvable in time nlog2n but not time n. This follows by setting 
  
    
      
        f
        (
        n
        )
        =
        n
        log
        ⁡
        n
      
    
    {\displaystyle f(n)=n\log n}
  , since n is in 

  
    
      
        o
        
          (
          
            n
            log
            ⁡
            n
          
          )
        
        .
      
    
    {\displaystyle o\left(n\log n\right).}

Proof
We include here a proof of a weaker result, namely that DTIME(f(n)) is a strict subset of DTIME(f(2n + 1)3), as it is simpler but illustrates the proof idea. See the bottom of this section for information on how to extend the proof to f(n)logf(n).
To prove this, we first define the language of the encodings of machines and their inputs which cause them to halt within f

  
    
      
        
          H
          
            f
          
        
        =
        
          {
          
            (
            [
            M
            ]
            ,
            x
            )
             
            
              |
            
             
            M
             
            
              accepts
            
             
            x
             
            
              in
            
             
            f
            (
            
              |
            
            x
            
              |
            
            )
             
            
              steps
            
          
          }
        
        .
      
    
    {\displaystyle H_{f}=\left\{([M],x)\ |\ M\ {\text{accepts}}\ x\ {\text{in}}\ f(|x|)\ {\text{steps}}\right\}.}
  Notice here that this is a time-class. It is the set of pairs of machines and inputs to those machines (M,x) so that the machine M accepts within f(|x|) steps.
Here, M is a deterministic Turing machine, and x is its input (the initial contents of its tape). [M] denotes an input that encodes the Turing machine M. Let m be the size of the tuple ([M], x).
We know that we can decide membership of Hf by way of a deterministic Turing machine R, that simulates M for f(x) steps by first calculating f(|x|) and then writing out a row of 0s of that length, and then using this row of 0s as a "clock" or "counter" to simulate M for at most that many steps. At each step, the simulating machine needs to look through the definition of M to decide what the next action would be. It is safe to say that this takes at most f(m)3 operations (since it is known that a simulation of a machine of time complexity T(n) for can be achieved in time 
  
    
      
        O
        (
        T
        (
        n
        )
        ⋅
        
          |
        
        M
        
          |
        
        )
      
    
    {\displaystyle O(T(n)\cdot |M|)}
   on a multitape machine, where |M| is the length of the encoding of M), we have that:

  
    
      
        
          H
          
            f
          
        
        ∈
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            (
            m
            
              )
              
                3
              
            
          
          )
        
        .
      
    
    {\displaystyle H_{f}\in {\mathsf {TIME}}\left(f(m)^{3}\right).}
  The rest of the proof will show that

  
    
      
        
          H
          
            f
          
        
        ∉
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            
              (
              
                ⌊
                
                  
                    m
                    2
                  
                
                ⌋
              
              )
            
          
          )
        
      
    
    {\displaystyle H_{f}\notin {\mathsf {TIME}}\left(f\left(\left\lfloor {\frac {m}{2}}\right\rfloor \right)\right)}
  so that if we substitute 2n + 1 for m, we get the desired result. Let us assume that Hf is in this time complexity class, and we will reach a contradiction.
If Hf is in this time complexity class, then there exists a machine K which, given some machine description [M] and input x, decides whether the tuple ([M], x) is in Hf within

  
    
      
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            
              (
              
                ⌊
                
                  
                    m
                    2
                  
                
                ⌋
              
              )
            
          
          )
        
        .
      
    
    {\displaystyle {\mathsf {TIME}}\left(f\left(\left\lfloor {\frac {m}{2}}\right\rfloor \right)\right).}
  We use this K to construct another machine, N, which takes a machine description [M] and runs K on the tuple ([M], [M]), ie. M is simulated on its own code by K, and then N accepts if K rejects, and rejects if K accepts. 
If n is the length of the input to N, then m (the length of the input to K) is twice n plus some delimiter symbol, so m = 2n + 1. N{'}}s running time is thus

  
    
      
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            
              (
              
                ⌊
                
                  
                    m
                    2
                  
                
                ⌋
              
              )
            
          
          )
        
        =
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            
              (
              
                ⌊
                
                  
                    
                      2
                      n
                      +
                      1
                    
                    2
                  
                
                ⌋
              
              )
            
          
          )
        
        =
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            (
            n
            )
          
          )
        
        .
      
    
    {\displaystyle {\mathsf {TIME}}\left(f\left(\left\lfloor {\frac {m}{2}}\right\rfloor \right)\right)={\mathsf {TIME}}\left(f\left(\left\lfloor {\frac {2n+1}{2}}\right\rfloor \right)\right)={\mathsf {TIME}}\left(f(n)\right).}
  Now if we feed [N] as input into N itself (which makes n the length of [N]) and ask the question whether N accepts its own description as input, we get:

If N accepts [N] (which we know it does in at most f(n) operations since K halts on ([N], [N]) in f(n) steps), this means that K rejects ([N], [N]), so ([N], [N]) is not in Hf, and so by the definition of Hf, this implies that N does not accept [N] in f(n) steps. Contradiction.If N rejects [N] (which we know it does in at most f(n) operations), this means that K accepts ([N], [N]), so ([N], [N]) is in Hf, and thus N does accept [N] in f(n) steps. Contradiction.We thus conclude that the machine K does not exist, and so

  
    
      
        
          H
          
            f
          
        
        ∉
        
          
            T
            I
            M
            E
          
        
        
          (
          
            f
            
              (
              
                ⌊
                
                  
                    m
                    2
                  
                
                ⌋
              
              )
            
          
          )
        
        .
      
    
    {\displaystyle H_{f}\notin {\mathsf {TIME}}\left(f\left(\left\lfloor {\frac {m}{2}}\right\rfloor \right)\right).}

Extension
The reader may have realised that the proof gives the weaker result because we have chosen a simple Turing machine simulation for which we know that

  
    
      
        
          H
          
            f
          
        
        ∈
        
          
            T
            I
            M
            E
          
        
        (
        f
        (
        m
        
          )
          
            3
          
        
        )
        .
      
    
    {\displaystyle H_{f}\in {\mathsf {TIME}}(f(m)^{3}).}
  It is known that a more efficient simulation exists which establishes that

  
    
      
        
          H
          
            f
          
        
        ∈
        
          
            T
            I
            M
            E
          
        
        (
        f
        (
        m
        )
        log
        ⁡
        f
        (
        m
        )
        )
      
    
    {\displaystyle H_{f}\in {\mathsf {TIME}}(f(m)\log f(m))}
  .

Non-deterministic time hierarchy theorem
If g(n) is a time-constructible function, and f(n+1) = o(g(n)), then there exists a decision problem which cannot be solved in non-deterministic time f(n) but can be solved in non-deterministic time g(n). In other words, the complexity class NTIME(f(n)) is a strict subset of NTIME(g(n)).

Consequences
The time hierarchy theorems guarantee that the deterministic and non-deterministic versions of the exponential hierarchy are genuine hierarchies: in other words P ⊊ EXPTIME ⊊ 2-EXP ⊊ ... and NP ⊊ NEXPTIME ⊊ 2-NEXP ⊊ ....
For example, 
  
    
      
        
          
            P
          
        
        ⊊
        
          
            E
            X
            P
            T
            I
            M
            E
          
        
      
    
    {\displaystyle {\mathsf {P}}\subsetneq {\mathsf {EXPTIME}}}
   since 
  
    
      
        
          
            P
          
        
        ⊆
        
          
            D
            T
            I
            M
            E
          
        
        (
        
          2
          
            n
          
        
        )
        ⊊
        
          
            D
            T
            I
            M
            E
          
        
        (
        
          2
          
            2
            n
          
        
        )
        ⊆
        
          
            E
            X
            P
            T
            I
            M
            E
          
        
      
    
    {\displaystyle {\mathsf {P}}\subseteq {\mathsf {DTIME}}(2^{n})\subsetneq {\mathsf {DTIME}}(2^{2n})\subseteq {\mathsf {EXPTIME}}}
  . Indeed, 
  
    
      
        
          
            D
            T
            I
            M
            E
          
        
        
          (
          
            2
            
              n
            
          
          )
        
        ⊆
        
          
            D
            T
            I
            M
            E
          
        
        
          (
          
            o
            
              (
              
                
                  
                    2
                    
                      2
                      n
                    
                  
                  
                    2
                    n
                  
                
              
              )
            
          
          )
        
        ⊊
        
          
            D
            T
            I
            M
            E
          
        
        (
        
          2
          
            2
            n
          
        
        )
      
    
    {\displaystyle {\mathsf {DTIME}}\left(2^{n}\right)\subseteq {\mathsf {DTIME}}\left(o\left({\frac {2^{2n}}{2n}}\right)\right)\subsetneq {\mathsf {DTIME}}(2^{2n})}
   from the time hierarchy theorem.
The theorem also guarantees that there are problems in P requiring arbitrarily large exponents to solve; in other words, P does not collapse to DTIME(nk) for any fixed k. For example, there are problems solvable in n5000 time but not n4999 time. This is one argument against Cobham's thesis, the convention that P is a practical class of algorithms. If such a collapse did occur, we could deduce that P ≠ PSPACE, since it is a well-known theorem that DTIME(f(n)) is strictly contained in DSPACE(f(n)).
However, the time hierarchy theorems provide no means to relate deterministic and non-deterministic complexity, or time and space complexity, so they cast no light on the great unsolved questions of computational complexity theory: whether P and NP, NP and PSPACE, PSPACE and EXPTIME, or EXPTIME and NEXPTIME are equal or not.

Sharper hierarchy theorems
The gap of approximately 
  
    
      
        log
        ⁡
        f
        (
        n
        )
      
    
    {\displaystyle \log f(n)}
   between the lower and upper time bound in the hierarchy theorem can be traced to the efficiency of the device used in the proof, namely a universal program that maintains a step-count. This can be done more efficiently on certain computational models. The sharpest results, presented below, have been proved for:

The unit-cost random-access machine
A programming language model whose programs operate on a binary tree that is always accessed via its root. This model, introduced by Neil D. Jones is stronger than a deterministic Turing machine but weaker than a random-access machine.For these models, the theorem has the following form:

If f(n) is a time-constructible function, then there exists a decision problem which cannot be solved in worst-case deterministic time f(n) but can be solved in worst-case time af(n) for some constant a (dependent on f).
Thus, a constant-factor increase in the time bound allows for solving more problems, in contrast with the situation for Turing machines (see Linear speedup theorem). Moreover, Ben-Amram proved that, in the above movels, for f of polynomial growth rate (but more than linear), it is the case that for all 
  
    
      
        ε
        >
        0
      
    
    {\displaystyle \varepsilon >0}
  , there exists a decision problem which cannot be solved in worst-case deterministic time f(n) but can be solved in worst-case time 
  
    
      
        (
        1
        +
        ε
        )
        f
        (
        n
        )
      
    
    {\displaystyle (1+\varepsilon )f(n)}
  .

See also
Space hierarchy theorem

References
Further reading
Michael Sipser (1997). Introduction to the Theory of Computation. PWS Publishing. ISBN 0-534-94728-X. Pages 310–313 of section 9.1: Hierarchy theorems.
Christos Papadimitriou (1993). Computational Complexity (1st ed.). Addison Wesley. ISBN 0-201-53082-1. Section 7.2: The Hierarchy Theorem, pp. 143–146.