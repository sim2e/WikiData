In computer programming, especially functional programming and type theory, an algebraic data type (ADT) is a kind of composite type, i.e., a type formed by combining other types.
Two common classes of algebraic types are product types (i.e., tuples and records) and sum types (i.e., tagged or disjoint unions, coproduct types or variant types).The values of a product type typically contain several values, called fields.  All values of that type have the same combination of field types.  The set of all possible values of a product type is the set-theoretic product, i.e., the Cartesian product, of the sets of all possible values of its field types.
The values of a sum type are typically grouped into several classes, called variants.  A value of a variant type is usually created with a quasi-functional entity called a constructor.  Each variant has its own constructor, which takes a specified number of arguments with specified types.  The set of all possible values of a sum type is the set-theoretic sum, i.e., the disjoint union, of the sets of all possible values of its variants. Enumerated types are a special case of sum types in which the constructors take no arguments, as exactly one value is defined for each constructor.
Values of algebraic types are analyzed with pattern matching, which identifies a value by its constructor or field names and extracts the data it contains.
Algebraic data types were introduced in Hope, a small functional programming language developed in the 1970s at the University of Edinburgh.

Examples
One of the most common examples of  an algebraic data type is the singly linked list. A list type is a sum type with two variants, Nil for an empty list and Cons x xs for the combination of a new element x with a list xs to create a new list. Here is an example of how a singly linked list would be declared in Haskell:

or

Cons is an abbreviation of construct. Many languages have special syntax for lists defined in this way. For example, Haskell and ML use [] for Nil, : or :: for Cons, respectively, and square brackets for entire lists. So Cons 1 (Cons 2 (Cons 3 Nil)) would normally be written as 1:2:3:[] or [1,2,3] in Haskell, or as 1::2::3::[] or [1,2,3] in ML.
For a slightly more complex example, binary trees may be implemented in Haskell as follows:

or

Here, Empty represents an empty tree, Leaf represents a leaf node, and Node organizes the data into branches.
In most languages that support algebraic data types, it is possible to define parametric types. Examples are given later in this article.
Somewhat similar to a function, a data constructor is applied to arguments of an appropriate type, yielding an instance of the data type to which the type constructor belongs. For example, the data constructor Leaf is logically a function Int -> Tree, meaning that giving an integer as an argument to Leaf produces a value of the type Tree. As Node takes two arguments of the type Tree itself, the datatype is recursive.
Operations on algebraic data types can be defined by using pattern matching to retrieve the arguments. For example, consider a function to find the depth of a Tree, given here in Haskell:

Thus, a Tree given to depth can be constructed using any of Empty, Leaf, or Node and must be matched for any of them respectively to deal with all cases. In case of Node, the pattern extracts the subtrees l and r for further processing.
Algebraic data types are highly suited to implementing abstract syntax.  For example, the following algebraic data type describes a simple language representing numerical expressions:

An element of such a data type would have a form such as Mult (Add (Number 4) (Minus (Number 0) (Number 1))) (Number 2).
Writing an evaluation function for this language is a simple exercise; however, more complex transformations also become feasible.  For example, an optimization pass in a compiler might be written as a function taking an abstract expression as input and returning an optimized form.

Explanation
Algebraic data types are used to represent values that can be one of several types of things. Each type of thing is associated with an identifier called a constructor, which can be viewed as a kind of tag for that kind of data. Each constructor can carry with it a different type of data. A constructor could carry no data (e.g., "Empty" in the example above), or one piece of data (e.g., “Leaf” has one Int value), or multiple pieces of data (e.g., “Node” has two Tree values).
To do something with a value of this Tree algebraic data type, it is deconstructed using a process called pattern matching. It involves matching the data with a series of patterns. The example function "depth" above pattern-matches its argument with three patterns. When the function is called, it finds the first pattern that matches its argument, performs any variable bindings that are found in the pattern, and evaluates the expression corresponding to the pattern.
Each pattern above has a form that resembles the structure of some possible value of this datatype. The first pattern simply matches values of the constructor Empty. The second pattern matches values of the constructor Leaf. Patterns are recursive, so then the data that is associated with that constructor is matched with the pattern "n". In this case, a lowercase identifier represents a pattern that matches any value, which then is bound to a variable of that name — in this case, a variable “n” is bound to the integer value stored in the data type — to be used in the expression to evaluate.
The recursion in patterns in this example are trivial, but a possible more complex recursive pattern would be something like Node (Node (Leaf 4) x) (Node y (Node Empty z)). Recursive patterns several layers deep are used for example in balancing red–black trees, which involve cases that require looking at colors several layers deep.
The example above is operationally equivalent to the following pseudocode:

The comparison of this with pattern matching will point out some of the advantages of algebraic data types and pattern matching. The first advantage is type safety. The pseudocode above relies on the diligence of the programmer to not access field2 when the constructor is a Leaf, for example. Also, the type of field1 is different for Leaf and Node (for Leaf it is Int; for Node it is Tree), so the type system would have difficulties assigning a static type to it in a safe way in a traditional record data structure. However, in pattern matching, the type of each extracted value is checked based on the types declared by the relevant constructor, and how many values can be extracted is known based on the constructor, so it does not face these problems.
Second, in pattern matching, the compiler statically checks that all cases are handled. If one of the cases of the depth function above were missing, the compiler would issue a warning, indicating that a case is not handled. This task may seem easy for the simple patterns above, but with many complex recursive patterns, the task becomes difficult for the average human (or compiler, if it must check arbitrary nested if-else constructs) to handle. Similarly, there may be patterns which never match (i.e., are already covered by prior patterns), and the compiler can also check and issue warnings for these, as they may indicate an error in reasoning.
Do not confuse these patterns with regular expression patterns used in string pattern matching. The purpose is similar: to check whether a piece of data matches certain constraints, and if so, extract relevant parts of it for processing. However, the mechanism is very different. This kind of pattern matching on algebraic data types matches on the structural properties of an object rather than on the character sequence of strings.

Theory
A general algebraic data type is a possibly recursive sum type of product types. Each constructor tags a product type to separate it from others, or if there is only one constructor, the data type is a product type. Further, the parameter types of a constructor are the factors of the product type. A parameterless constructor corresponds to the empty product. If a datatype is recursive, the entire sum of products is wrapped in a recursive type, and each constructor also rolls the datatype into the recursive type.
For example, the Haskell datatype:

is represented in type theory as

  
    
      
        λ
        α
        .
        μ
        β
        .1
        +
        α
        ×
        β
      
    
    {\displaystyle \lambda \alpha .\mu \beta .1+\alpha \times \beta }
  
with constructors 
  
    
      
        
          
            n
            i
            l
          
          
            α
          
        
        =
        
          r
          o
          l
          l
        
         
        (
        
          i
          n
          l
        
         
        ⟨
        ⟩
        )
      
    
    {\displaystyle \mathrm {nil} _{\alpha }=\mathrm {roll} \ (\mathrm {inl} \ \langle \rangle )}
   and 
  
    
      
        
          
            c
            o
            n
            s
          
          
            α
          
        
         
        x
         
        l
        =
        
          r
          o
          l
          l
        
         
        (
        
          i
          n
          r
        
         
        ⟨
        x
        ,
        l
        ⟩
        )
      
    
    {\displaystyle \mathrm {cons} _{\alpha }\ x\ l=\mathrm {roll} \ (\mathrm {inr} \ \langle x,l\rangle )}
  .
The Haskell List datatype can also be represented in type theory in a slightly different form, thus:

  
    
      
        μ
        ϕ
        .
        λ
        α
        .1
        +
        α
        ×
        ϕ
         
        α
      
    
    {\displaystyle \mu \phi .\lambda \alpha .1+\alpha \times \phi \ \alpha }
  .
(Note how the 
  
    
      
        μ
      
    
    {\displaystyle \mu }
   and 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
   constructs are reversed relative to the original.) The original formation specified a type function whose body was a recursive type. The revised version specifies a recursive function on types. (The type variable 
  
    
      
        ϕ
      
    
    {\displaystyle \phi }
   is used to suggest a function rather than a base type like 
  
    
      
        β
      
    
    {\displaystyle \beta }
  , since 
  
    
      
        ϕ
      
    
    {\displaystyle \phi }
   is like a Greek f.) The function must also now be applied 
  
    
      
        ϕ
      
    
    {\displaystyle \phi }
   to its argument type 
  
    
      
        α
      
    
    {\displaystyle \alpha }
   in the body of the type.
For the purposes of the List example, these two formulations are not significantly different; but the second form allows expressing so-called nested data types, i.e., those where the recursive type differs parametrically from the original. (For more information on nested data types, see the works of Richard Bird, Lambert Meertens, and Ross Paterson.)
In set theory the equivalent of a sum type is a disjoint union, a set whose elements are pairs consisting of a tag (equivalent to a constructor) and an object of a type corresponding to the tag (equivalent to the constructor arguments).

Programming languages with algebraic data types
Many programming languages incorporate algebraic data types as a first class notion, including:

See also
Disjoint union
Generalized algebraic data type
Initial algebra
Quotient type
Tagged union
Type theory
Visitor pattern


== References ==