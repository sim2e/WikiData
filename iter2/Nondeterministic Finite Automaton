In automata theory, a finite-state machine is called a deterministic finite automaton (DFA), if

each of its transitions is uniquely determined by its source state and input symbol, and
reading an input symbol is required for each state transition.A nondeterministic finite automaton (NFA), or nondeterministic finite-state machine, does not need to obey these restrictions. In particular, every DFA is also an NFA. Sometimes the term NFA is used in a narrower sense, referring to an NFA that is not a DFA, but not in this article.
Using the subset construction algorithm, each NFA can be translated to an equivalent DFA; i.e., a DFA recognizing the same formal language.
Like DFAs, NFAs only recognize regular languages.
NFAs were introduced in 1959 by Michael O. Rabin and Dana Scott,  who also showed their equivalence to DFAs. NFAs are used in the implementation of regular expressions: Thompson's construction is an algorithm for compiling a regular expression to an NFA that can efficiently perform pattern matching on strings. Conversely, Kleene's algorithm can be used to convert an NFA into a regular expression (whose size is generally exponential in the input automaton).
NFAs have been generalized in multiple ways, e.g., nondeterministic finite automata with ε-moves, finite-state transducers, pushdown automata, alternating automata, ω-automata, and probabilistic automata.
Besides the DFAs, other known special cases of NFAs
are unambiguous finite automata (UFA)
and self-verifying finite automata (SVFA).

Informal introduction
There are two ways to describe the behavior of an NFA, and both of them are equivalent. The first way makes use of the nondeterminism in the name of an NFA. For each input symbol, the NFA transitions to a new state until all input symbols have been consumed. In each step, the automaton nondeterministically "chooses" one of the applicable transitions. If there exists at least one "lucky run", i.e. some sequence of choices leading to an accepting state after completely consuming the input, it is accepted. Otherwise, i.e. if no choice sequence at all can consume all the input and lead to an accepting state, the input is rejected.: 19 : 319 In the second way, the NFA consumes a string of input symbols, one by one. In each step, whenever two or more transitions are applicable, it "clones" itself into appropriately many copies, each one following a different transition. If no transition is applicable, the current copy is in a dead end, and it "dies". If, after consuming the complete input, any of the copies is in an accept state, the input is accepted, else, it is rejected.: 19–20 : 48 : 56

Formal definition
For a more elementary introduction of the formal definition, see automata theory.

Automaton
An NFA is represented formally by a 5-tuple,

  
    
      
        (
        Q
        ,
        Σ
        ,
        δ
        ,
        
          q
          
            0
          
        
        ,
        F
        )
      
    
    {\displaystyle (Q,\Sigma ,\delta ,q_{0},F)}
  , consisting of

a finite set of states 
  
    
      
        Q
      
    
    {\displaystyle Q}
  .
a finite set of input symbols 
  
    
      
        Σ
      
    
    {\displaystyle \Sigma }
  .
a transition function 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   : 
  
    
      
        Q
        ×
        Σ
        →
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle Q\times \Sigma \rightarrow {\mathcal {P}}(Q)}
  .
an initial (or start) state 
  
    
      
        
          q
          
            0
          
        
        ∈
        Q
      
    
    {\displaystyle q_{0}\in Q}
  .
a set of states 
  
    
      
        F
      
    
    {\displaystyle F}
   distinguished as accepting (or final) states 
  
    
      
        F
        ⊆
        Q
      
    
    {\displaystyle F\subseteq Q}
  .Here, 
  
    
      
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle {\mathcal {P}}(Q)}
   denotes the power set of 
  
    
      
        Q
      
    
    {\displaystyle Q}
  .

Recognized language
Given an NFA 
  
    
      
        M
        =
        (
        Q
        ,
        Σ
        ,
        δ
        ,
        
          q
          
            0
          
        
        ,
        F
        )
      
    
    {\displaystyle M=(Q,\Sigma ,\delta ,q_{0},F)}
  , its recognized language is denoted by 
  
    
      
        L
        (
        M
        )
      
    
    {\displaystyle L(M)}
  , and is defined as the set of all strings over the alphabet 
  
    
      
        Σ
      
    
    {\displaystyle \Sigma }
   that are accepted by 
  
    
      
        M
      
    
    {\displaystyle M}
  .
Loosely corresponding to the above informal explanations, there are several equivalent formal definitions of a string 
  
    
      
        w
        =
        
          a
          
            1
          
        
        
          a
          
            2
          
        
        .
        .
        .
        
          a
          
            n
          
        
      
    
    {\displaystyle w=a_{1}a_{2}...a_{n}}
   being accepted by 
  
    
      
        M
      
    
    {\displaystyle M}
  :

  
    
      
        w
      
    
    {\displaystyle w}
   is accepted if a sequence of states, 
  
    
      
        
          r
          
            0
          
        
        ,
        
          r
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          r
          
            n
          
        
      
    
    {\displaystyle r_{0},r_{1},...,r_{n}}
  , exists in 
  
    
      
        Q
      
    
    {\displaystyle Q}
   such that:

  
    
      
        
          r
          
            0
          
        
        =
        
          q
          
            0
          
        
      
    
    {\displaystyle r_{0}=q_{0}}
  

  
    
      
        
          r
          
            i
            +
            1
          
        
        ∈
        δ
        (
        
          r
          
            i
          
        
        ,
        
          a
          
            i
            +
            1
          
        
        )
      
    
    {\displaystyle r_{i+1}\in \delta (r_{i},a_{i+1})}
  , for 
  
    
      
        i
        =
        0
        ,
        …
        ,
        n
        −
        1
      
    
    {\displaystyle i=0,\ldots ,n-1}
  

  
    
      
        
          r
          
            n
          
        
        ∈
        F
      
    
    {\displaystyle r_{n}\in F}
  .In words, the first condition says that the machine starts in the start state 
  
    
      
        
          q
          
            0
          
        
      
    
    {\displaystyle q_{0}}
  . The second condition says that given each character of string 
  
    
      
        w
      
    
    {\displaystyle w}
  , the machine will transition from state to state according to the transition function 
  
    
      
        δ
      
    
    {\displaystyle \delta }
  . The last condition says that the machine accepts 
  
    
      
        w
      
    
    {\displaystyle w}
   if the last input of 
  
    
      
        w
      
    
    {\displaystyle w}
   causes the machine to halt in one of the accepting states. In order for 
  
    
      
        w
      
    
    {\displaystyle w}
   to be accepted by 
  
    
      
        M
      
    
    {\displaystyle M}
  , it is not required that every state sequence ends in an accepting state, it is sufficient if one does. Otherwise, i.e. if it is impossible at all to get from 
  
    
      
        
          q
          
            0
          
        
      
    
    {\displaystyle q_{0}}
   to a state from 
  
    
      
        F
      
    
    {\displaystyle F}
   by following 
  
    
      
        w
      
    
    {\displaystyle w}
  , it is said that the automaton rejects the string. The set of strings 
  
    
      
        M
      
    
    {\displaystyle M}
   accepts is the language recognized by 
  
    
      
        M
      
    
    {\displaystyle M}
   and this language is denoted by 
  
    
      
        L
        (
        M
        )
      
    
    {\displaystyle L(M)}
  .: 320 : 54 Alternatively, 
  
    
      
        w
      
    
    {\displaystyle w}
   is accepted if 
  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        ∩
        F
        ≠
        ∅
      
    
    {\displaystyle \delta ^{*}(q_{0},w)\cap F\not =\emptyset }
  , where 
  
    
      
        
          δ
          
            ∗
          
        
        :
        Q
        ×
        
          Σ
          
            ∗
          
        
        →
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle \delta ^{*}:Q\times \Sigma ^{*}\rightarrow {\mathcal {P}}(Q)}
   is defined recursively by:

  
    
      
        
          δ
          
            ∗
          
        
        (
        r
        ,
        ϵ
        )
        =
        {
        r
        }
      
    
    {\displaystyle \delta ^{*}(r,\epsilon )=\{r\}}
   where 
  
    
      
        ϵ
      
    
    {\displaystyle \epsilon }
   is the empty string, and

  
    
      
        
          δ
          
            ∗
          
        
        (
        r
        ,
        x
        a
        )
        =
        
          ⋃
          
            
              r
              ′
            
            ∈
            
              δ
              
                ∗
              
            
            (
            r
            ,
            x
            )
          
        
        δ
        (
        
          r
          ′
        
        ,
        a
        )
      
    
    {\displaystyle \delta ^{*}(r,xa)=\bigcup _{r'\in \delta ^{*}(r,x)}\delta (r',a)}
   for all 
  
    
      
        x
        ∈
        
          Σ
          
            ∗
          
        
        ,
        a
        ∈
        Σ
      
    
    {\displaystyle x\in \Sigma ^{*},a\in \Sigma }
  .In words, 
  
    
      
        
          δ
          
            ∗
          
        
        (
        r
        ,
        x
        )
      
    
    {\displaystyle \delta ^{*}(r,x)}
   is the set of all states reachable from state 
  
    
      
        r
      
    
    {\displaystyle r}
   by consuming the string 
  
    
      
        x
      
    
    {\displaystyle x}
  . The string 
  
    
      
        w
      
    
    {\displaystyle w}
   is accepted if some accepting state in 
  
    
      
        F
      
    
    {\displaystyle F}
   can be reached from the start state 
  
    
      
        
          q
          
            0
          
        
      
    
    {\displaystyle q_{0}}
   by consuming 
  
    
      
        w
      
    
    {\displaystyle w}
  .: 21 : 59

Initial state
The above automaton definition uses a single initial state, which is not necessary. Sometimes, NFAs are defined with a set of initial states. There is an easy construction that translates an NFA with multiple initial states to an NFA with a single initial state, which provides a convenient notation.

Example
The following automaton 
  
    
      
        M
      
    
    {\displaystyle M}
  , with a binary alphabet, determines if the input ends with a 1.
Let 
  
    
      
        M
        =
        (
        {
        p
        ,
        q
        }
        ,
        {
        0
        ,
        1
        }
        ,
        δ
        ,
        p
        ,
        {
        q
        }
        )
      
    
    {\displaystyle M=(\{p,q\},\{0,1\},\delta ,p,\{q\})}
   where
the transition function 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   can be defined by this state transition table (cf. upper left picture):

Since the set 
  
    
      
        δ
        (
        p
        ,
        1
        )
      
    
    {\displaystyle \delta (p,1)}
   contains more than one state, 
  
    
      
        M
      
    
    {\displaystyle M}
   is nondeterministic.
The language of 
  
    
      
        M
      
    
    {\displaystyle M}
   can be described by the regular language given by the regular expression (0|1)*1.
All possible state sequences for the input string "1011" are shown in the lower picture.
The string is accepted by 
  
    
      
        M
      
    
    {\displaystyle M}
   since one state sequence satisfies the above definition; it doesn't matter that other sequences fail to do so.
The picture can be interpreted in a couple of ways:

In terms of the above "lucky-run" explanation, each path in the picture denotes a sequence of choices of 
  
    
      
        M
      
    
    {\displaystyle M}
  .
In terms of the "cloning" explanation, each vertical column shows all clones of 
  
    
      
        M
      
    
    {\displaystyle M}
   at a given point in time, multiple arrows emanating from a node indicate cloning, a node without emanating arrows indicating the "death" of a clone.The feasibility to read the same picture in two ways also indicates the equivalence of both above explanations.

Considering the first of the above formal definitions, "1011" is accepted since when reading it 
  
    
      
        M
      
    
    {\displaystyle M}
   may traverse the state sequence 
  
    
      
        ⟨
        
          r
          
            0
          
        
        ,
        
          r
          
            1
          
        
        ,
        
          r
          
            2
          
        
        ,
        
          r
          
            3
          
        
        ,
        
          r
          
            4
          
        
        ⟩
        =
        ⟨
        p
        ,
        p
        ,
        p
        ,
        p
        ,
        q
        ⟩
      
    
    {\displaystyle \langle r_{0},r_{1},r_{2},r_{3},r_{4}\rangle =\langle p,p,p,p,q\rangle }
  , which satisfies conditions 1 to 3.
Concerning the second formal definition, bottom-up computation shows that 
  
    
      
        
          δ
          
            ∗
          
        
        (
        p
        ,
        ϵ
        )
        =
        {
        p
        }
      
    
    {\displaystyle \delta ^{*}(p,\epsilon )=\{p\}}
  , hence 
  
    
      
        
          δ
          
            ∗
          
        
        (
        p
        ,
        1
        )
        =
        δ
        (
        p
        ,
        1
        )
        =
        {
        p
        ,
        q
        }
      
    
    {\displaystyle \delta ^{*}(p,1)=\delta (p,1)=\{p,q\}}
  , hence 
  
    
      
        
          δ
          
            ∗
          
        
        (
        p
        ,
        10
        )
        =
        δ
        (
        p
        ,
        0
        )
        ∪
        δ
        (
        q
        ,
        0
        )
        =
        {
        p
        }
        ∪
        {
        }
      
    
    {\displaystyle \delta ^{*}(p,10)=\delta (p,0)\cup \delta (q,0)=\{p\}\cup \{\}}
  , hence 
  
    
      
        
          δ
          
            ∗
          
        
        (
        p
        ,
        101
        )
        =
        δ
        (
        p
        ,
        1
        )
        =
        {
        p
        ,
        q
        }
      
    
    {\displaystyle \delta ^{*}(p,101)=\delta (p,1)=\{p,q\}}
  , and hence 
  
    
      
        
          δ
          
            ∗
          
        
        (
        p
        ,
        1011
        )
        =
        δ
        (
        p
        ,
        1
        )
        ∪
        δ
        (
        q
        ,
        1
        )
        =
        {
        p
        ,
        q
        }
        ∪
        {
        }
      
    
    {\displaystyle \delta ^{*}(p,1011)=\delta (p,1)\cup \delta (q,1)=\{p,q\}\cup \{\}}
  ; since that set is not disjoint from 
  
    
      
        {
        q
        }
      
    
    {\displaystyle \{q\}}
  , the string "1011" is accepted.In contrast, the string "10" is rejected by 
  
    
      
        M
      
    
    {\displaystyle M}
   (all possible state sequences for that input are shown in the upper right picture), since there is no way to reach the only accepting state, 
  
    
      
        q
      
    
    {\displaystyle q}
  , by reading the final 0 symbol. While 
  
    
      
        q
      
    
    {\displaystyle q}
   can be reached after consuming the initial "1", this does not mean that the input "10" is accepted; rather, it means that an input string "1" would be accepted.

Equivalence to DFA
A deterministic finite automaton (DFA) can be seen as a special kind of NFA, in which for each state and symbol, the transition function has exactly one state. Thus, it is clear that every formal language that can be recognized by a DFA can be recognized by an NFA.
Conversely, for each NFA, there is a DFA such that it recognizes the same formal language. The DFA can be constructed using the powerset construction.
This result shows that NFAs, despite their additional flexibility, are unable to recognize  languages that cannot be recognized by some DFA. It is also important in practice for converting easier-to-construct NFAs into more efficiently executable DFAs. However, if the NFA has n states, the resulting DFA may have up to 2n states, which sometimes makes the construction impractical for large NFAs.

NFA with ε-moves
Nondeterministic finite automaton with ε-moves (NFA-ε) is a further generalization to NFA. In this kind of automaton, the transition function is additionally defined on the empty string ε. A transition without consuming an input symbol is called an ε-transition and is represented in state diagrams by an arrow labeled "ε". ε-transitions provide a convenient way of modeling systems whose current states are not precisely known: i.e., if we are modeling a system and it is not clear whether the current state (after processing some input string) should be q or q', then we can add an ε-transition between these two states, thus putting the automaton in both states simultaneously.

Formal definition
An NFA-ε is represented formally by a 5-tuple, 
  
    
      
        (
        Q
        ,
        Σ
        ,
        δ
        ,
        
          q
          
            0
          
        
        ,
        F
        )
      
    
    {\displaystyle (Q,\Sigma ,\delta ,q_{0},F)}
  , consisting of

a finite set of states 
  
    
      
        Q
      
    
    {\displaystyle Q}
  
a finite set of input symbols called the alphabet 
  
    
      
        Σ
      
    
    {\displaystyle \Sigma }
  
a transition function 
  
    
      
        δ
        :
        Q
        ×
        (
        Σ
        ∪
        {
        ϵ
        }
        )
        →
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle \delta :Q\times (\Sigma \cup \{\epsilon \})\rightarrow {\mathcal {P}}(Q)}
  
an initial (or start) state 
  
    
      
        
          q
          
            0
          
        
        ∈
        Q
      
    
    {\displaystyle q_{0}\in Q}
  
a set of states 
  
    
      
        F
      
    
    {\displaystyle F}
   distinguished as accepting (or final) states 
  
    
      
        F
        ⊆
        Q
      
    
    {\displaystyle F\subseteq Q}
  .Here, 
  
    
      
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle {\mathcal {P}}(Q)}
   denotes the power set of 
  
    
      
        Q
      
    
    {\displaystyle Q}
   and 
  
    
      
        ϵ
      
    
    {\displaystyle \epsilon }
   denotes empty string.

ε-closure of a state or set of states
For a state 
  
    
      
        q
        ∈
        Q
      
    
    {\displaystyle q\in Q}
  , let 
  
    
      
        E
        (
        q
        )
      
    
    {\displaystyle E(q)}
   denote the set of states that are reachable from 
  
    
      
        q
      
    
    {\displaystyle q}
   by following ε-transitions in the transition function 
  
    
      
        δ
      
    
    {\displaystyle \delta }
  , i.e.,

  
    
      
        p
        ∈
        E
        (
        q
        )
      
    
    {\displaystyle p\in E(q)}
   if there is a sequence of states 
  
    
      
        
          q
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          q
          
            k
          
        
      
    
    {\displaystyle q_{1},...,q_{k}}
   such that

  
    
      
        
          q
          
            1
          
        
        =
        q
      
    
    {\displaystyle q_{1}=q}
  ,

  
    
      
        
          q
          
            i
            +
            1
          
        
        ∈
        δ
        (
        
          q
          
            i
          
        
        ,
        ε
        )
      
    
    {\displaystyle q_{i+1}\in \delta (q_{i},\varepsilon )}
   for each 
  
    
      
        1
        ≤
        i
        <
        k
      
    
    {\displaystyle 1\leq i<k}
  , and

  
    
      
        
          q
          
            k
          
        
        =
        p
      
    
    {\displaystyle q_{k}=p}
  .
  
    
      
        E
        (
        q
        )
      
    
    {\displaystyle E(q)}
   is known as the epsilon closure, (also ε-closure) of 
  
    
      
        q
      
    
    {\displaystyle q}
  .
The ε-closure of a set 
  
    
      
        P
      
    
    {\displaystyle P}
   of states of an NFA is defined as the set of states reachable from any state in 
  
    
      
        P
      
    
    {\displaystyle P}
   following ε-transitions. Formally, for 
  
    
      
        P
        ⊆
        Q
      
    
    {\displaystyle P\subseteq Q}
  , define 
  
    
      
        E
        (
        P
        )
        =
        
          ⋃
          
            q
            ∈
            P
          
        
        E
        (
        q
        )
      
    
    {\displaystyle E(P)=\bigcup \limits _{q\in P}E(q)}
  .

Extended transition function
Similar to NFA without ε-moves, the transition function 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   of an NFA-ε can be extended to strings.
Informally, 
  
    
      
        
          δ
          
            ∗
          
        
        (
        q
        ,
        w
        )
      
    
    {\displaystyle \delta ^{*}(q,w)}
   denotes the set of all states the automaton may have reached when starting in state 
  
    
      
        q
        ∈
        Q
      
    
    {\displaystyle q\in Q}
   and reading the string 
  
    
      
        w
        ∈
        
          Σ
          
            ∗
          
        
        .
      
    
    {\displaystyle w\in \Sigma ^{*}.}
  
The function 
  
    
      
        
          δ
          
            ∗
          
        
        :
        Q
        ×
        
          Σ
          
            ∗
          
        
        →
        
          
            P
          
        
        (
        Q
        )
      
    
    {\displaystyle \delta ^{*}:Q\times \Sigma ^{*}\rightarrow {\mathcal {P}}(Q)}
   can be defined recursively as follows.

  
    
      
        
          δ
          
            ∗
          
        
        (
        q
        ,
        ε
        )
        =
        E
        (
        q
        )
      
    
    {\displaystyle \delta ^{*}(q,\varepsilon )=E(q)}
  , for each state 
  
    
      
        q
        ∈
        Q
        ,
      
    
    {\displaystyle q\in Q,}
   and where 
  
    
      
        E
      
    
    {\displaystyle E}
   denotes the epsilon closure;Informally: Reading the empty string may drive the automaton from state 
  
    
      
        q
      
    
    {\displaystyle q}
   to any state of the epsilon closure of 
  
    
      
        q
        .
      
    
    {\displaystyle q.}
  
  
    
      
        
          δ
          
            ∗
          
        
        (
        q
        ,
        w
        a
        )
        =
        
          ⋃
          
            r
            ∈
            
              δ
              
                ∗
              
            
            (
            q
            ,
            w
            )
          
        
        E
        (
        δ
        (
        r
        ,
        a
        )
        )
        ,
      
    
    {\textstyle \delta ^{*}(q,wa)=\bigcup _{r\in \delta ^{*}(q,w)}E(\delta (r,a)),}
   for each state 
  
    
      
        q
        ∈
        Q
        ,
      
    
    {\displaystyle q\in Q,}
   each string 
  
    
      
        w
        ∈
        
          Σ
          
            ∗
          
        
      
    
    {\displaystyle w\in \Sigma ^{*}}
   and each symbol 
  
    
      
        a
        ∈
        Σ
        .
      
    
    {\displaystyle a\in \Sigma .}
  Informally: Reading the string 
  
    
      
        w
      
    
    {\displaystyle w}
   may drive the automaton from state 
  
    
      
        q
      
    
    {\displaystyle q}
   to any state 
  
    
      
        r
      
    
    {\displaystyle r}
   in the recursively computed set 
  
    
      
        
          δ
          
            ∗
          
        
        (
        q
        ,
        w
        )
      
    
    {\displaystyle \delta ^{*}(q,w)}
  ; after that, reading the symbol 
  
    
      
        a
      
    
    {\displaystyle a}
   may drive it from 
  
    
      
        r
      
    
    {\displaystyle r}
   to any state in the epsilon closure of 
  
    
      
        δ
        (
        r
        ,
        a
        )
        .
      
    
    {\displaystyle \delta (r,a).}
  The automaton is said to accept a string 
  
    
      
        w
      
    
    {\displaystyle w}
   if 

  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        ∩
        F
        ≠
        ∅
        ,
      
    
    {\displaystyle \delta ^{*}(q_{0},w)\cap F\neq \emptyset ,}
  that is, if reading 
  
    
      
        w
      
    
    {\displaystyle w}
   may drive the automaton from its start state 
  
    
      
        
          q
          
            0
          
        
      
    
    {\displaystyle q_{0}}
   to some accepting state in 
  
    
      
        F
        .
      
    
    {\displaystyle F.}
  : 25

Example
Let 
  
    
      
        M
      
    
    {\displaystyle M}
   be a NFA-ε, with a binary alphabet, that determines if the input contains an even number of 0s or an even number of 1s. Note that 0 occurrences is an even number of occurrences as well.
In formal notation, let  where
the transition relation 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   can be defined by this state transition table:

  
    
      
        M
      
    
    {\displaystyle M}
   can be viewed as the union of two DFAs: one with states 
  
    
      
        {
        
          S
          
            1
          
        
        ,
        
          S
          
            2
          
        
        }
      
    
    {\displaystyle \{S_{1},S_{2}\}}
   and the other with states 
  
    
      
        {
        
          S
          
            3
          
        
        ,
        
          S
          
            4
          
        
        }
      
    
    {\displaystyle \{S_{3},S_{4}\}}
  . 
The language of 
  
    
      
        M
      
    
    {\displaystyle M}
   can be described by the regular language given by this regular expression 
  
    
      
        (
        
          1
          
            ∗
          
        
        
          01
          
            ∗
          
        
        0
        
          )
          
            ∗
          
        
        ∪
        (
        
          0
          
            ∗
          
        
        
          10
          
            ∗
          
        
        1
        
          )
          
            ∗
          
        
      
    
    {\displaystyle (1^{*}01^{*}0)^{*}\cup (0^{*}10^{*}1)^{*}}
  .
We define 
  
    
      
        M
      
    
    {\displaystyle M}
   using ε-moves but 
  
    
      
        M
      
    
    {\displaystyle M}
   can be defined without using ε-moves.

Equivalence to NFA
To show NFA-ε is equivalent to NFA, first note that NFA is a special case of NFA-ε, so it remains to show for every NFA-ε, there exists an equivalent NFA.
Given an NFA with epsilon moves 
  
    
      
        M
        =
        (
        Q
        ,
        Σ
        ,
        δ
        ,
        
          q
          
            0
          
        
        ,
        F
        )
        ,
      
    
    {\displaystyle M=(Q,\Sigma ,\delta ,q_{0},F),}
  
define an NFA 
  
    
      
        
          M
          ′
        
        =
        (
        Q
        ,
        Σ
        ,
        
          δ
          ′
        
        ,
        
          q
          
            0
          
        
        ,
        
          F
          ′
        
        )
        ,
      
    
    {\displaystyle M'=(Q,\Sigma ,\delta ',q_{0},F'),}
   where

  
    
      
        
          F
          ′
        
        =
        
          
            {
            
              
                
                  F
                  ∪
                  {
                  
                    q
                    
                      0
                    
                  
                  }
                
                
                  
                     if 
                  
                  E
                  (
                  
                    q
                    
                      0
                    
                  
                  )
                  ∩
                  F
                  ≠
                  {
                  }
                
              
              
                
                  F
                
                
                  
                     otherwise 
                  
                
              
            
            
          
        
      
    
    {\displaystyle F'={\begin{cases}F\cup \{q_{0}\}&{\text{ if }}E(q_{0})\cap F\neq \{\}\\F&{\text{ otherwise }}\\\end{cases}}}
  and

  
    
      
        
          δ
          ′
        
        (
        q
        ,
        a
        )
        =
        
          δ
          
            ∗
          
        
        (
        q
        ,
        a
        )
      
    
    {\displaystyle \delta '(q,a)=\delta ^{*}(q,a)}
   for each state 
  
    
      
        q
        ∈
        Q
      
    
    {\displaystyle q\in Q}
   and each symbol 
  
    
      
        a
        ∈
        Σ
        ,
      
    
    {\displaystyle a\in \Sigma ,}
   using the extended transition function 
  
    
      
        
          δ
          
            ∗
          
        
      
    
    {\displaystyle \delta ^{*}}
   defined above.One has to distinguish the transition functions of 
  
    
      
        M
      
    
    {\displaystyle M}
   and 
  
    
      
        
          M
          ′
        
        ,
      
    
    {\displaystyle M',}
   viz. 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   and 
  
    
      
        
          δ
          ′
        
        ,
      
    
    {\displaystyle \delta ',}
   and their extensions to strings, 
  
    
      
        δ
      
    
    {\displaystyle \delta }
   and 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        ,
      
    
    {\displaystyle \delta '^{*},}
   respectively.
By construction, 
  
    
      
        
          M
          ′
        
      
    
    {\displaystyle M'}
   has no ε-transitions.
One can prove that 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        =
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta '^{*}(q_{0},w)=\delta ^{*}(q_{0},w)}
   for each string 
  
    
      
        w
        ≠
        ε
      
    
    {\displaystyle w\neq \varepsilon }
  , by induction on the length of 
  
    
      
        w
        .
      
    
    {\displaystyle w.}
  
Based on this, one can show that 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        ∩
        
          F
          ′
        
        ≠
        {
        }
      
    
    {\displaystyle \delta '^{*}(q_{0},w)\cap F'\neq \{\}}
   if, and only if, 
  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        ∩
        F
        ≠
        {
        }
        ,
      
    
    {\displaystyle \delta ^{*}(q_{0},w)\cap F\neq \{\},}
   for each string 
  
    
      
        w
        ∈
        
          Σ
          
            ∗
          
        
        :
      
    
    {\displaystyle w\in \Sigma ^{*}:}
  

If 
  
    
      
        w
        =
        ε
        ,
      
    
    {\displaystyle w=\varepsilon ,}
   this follows from the definition of 
  
    
      
        
          F
          ′
        
        .
      
    
    {\displaystyle F'.}
  
Otherwise, let 
  
    
      
        w
        =
        v
        a
      
    
    {\displaystyle w=va}
   with 
  
    
      
        v
        ∈
        
          Σ
          
            ∗
          
        
      
    
    {\displaystyle v\in \Sigma ^{*}}
   and 
  
    
      
        a
        ∈
        Σ
        .
      
    
    {\displaystyle a\in \Sigma .}
  From 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        =
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta '^{*}(q_{0},w)=\delta ^{*}(q_{0},w)}
   and 
  
    
      
        F
        ⊆
        
          F
          ′
        
        ,
      
    
    {\displaystyle F\subseteq F',}
   we have  we still have to show the "
  
    
      
        ⇒
      
    
    {\displaystyle \Rightarrow }
  " direction.
If 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta '^{*}(q_{0},w)}
   contains a state in 
  
    
      
        
          F
          ′
        
        ∖
        {
        
          q
          
            0
          
        
        }
        ,
      
    
    {\displaystyle F'\setminus \{q_{0}\},}
   then 
  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta ^{*}(q_{0},w)}
   contains the same state, which lies in 
  
    
      
        F
      
    
    {\displaystyle F}
  .
If 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta '^{*}(q_{0},w)}
   contains 
  
    
      
        
          q
          
            0
          
        
        ,
      
    
    {\displaystyle q_{0},}
   and 
  
    
      
        
          q
          
            0
          
        
        ∈
        F
        ,
      
    
    {\displaystyle q_{0}\in F,}
   then  
  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta ^{*}(q_{0},w)}
   also contains a state in 
  
    
      
        F
        ,
      
    
    {\displaystyle F,}
   viz. 
  
    
      
        
          q
          
            0
          
        
        .
      
    
    {\displaystyle q_{0}.}
  
If 
  
    
      
        
          δ
          
            ′
            
              ∗
            
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
      
    
    {\displaystyle \delta '^{*}(q_{0},w)}
   contains 
  
    
      
        
          q
          
            0
          
        
        ,
      
    
    {\displaystyle q_{0},}
   and 
  
    
      
        
          q
          
            0
          
        
        ∉
        F
        ,
      
    
    {\displaystyle q_{0}\not \in F,}
   then the state in 
  
    
      
        E
        (
        
          q
          
            0
          
        
        )
        ∩
        F
      
    
    {\displaystyle E(q_{0})\cap F}
   must be in 
  
    
      
        
          δ
          
            ∗
          
        
        (
        
          q
          
            0
          
        
        ,
        w
        )
        =
        
          ⋃
          
            r
            ∈
            
              δ
              
                ∗
              
            
            (
            q
            ,
            v
            )
          
        
        E
        (
        δ
        (
        r
        ,
        a
        )
        )
        .
      
    
    {\textstyle \delta ^{*}(q_{0},w)=\bigcup _{r\in \delta ^{*}(q,v)}E(\delta (r,a)).}
  : 26–27 Since NFA is equivalent to DFA, NFA-ε is also equivalent to DFA.

Closure properties
The set of languages recognized by NFAs is closed under the following operations. These closure operations are used in Thompson's construction algorithm, which constructs an NFA from any regular expression. They can also be used to prove that NFAs recognize exactly the regular languages.

Union (cf. picture); that is, if the language L1 is accepted by some NFA A1 and L2 by some A2, then an NFA Au can be constructed that accepts the language L1∪L2.
Intersection; similarly, from A1 and A2 an NFA Ai can be constructed that accepts L1∩L2.
Concatenation
Negation; similarly, from A1 an NFA An can be constructed that accepts Σ*\L1.
Kleene closureSince NFAs are equivalent to nondeterministic finite automaton with ε-moves (NFA-ε), the above closures are proved using closure properties of NFA-ε.

Properties
The machine starts in the specified initial state and reads in a string of symbols from its alphabet. The automaton uses the state transition function Δ to determine the next state using the current state, and the symbol just read or the empty string. However, "the next state of an NFA depends not only on the current input event, but also on an arbitrary number of subsequent input events. Until these subsequent events occur it is not possible to determine which state the machine is in". If, when the automaton has finished reading, it is in an accepting state, the NFA is said to accept the string, otherwise it is said to reject the string.
The set of all strings accepted by an NFA is the language the NFA accepts. This language is a regular language.
For every NFA a deterministic finite automaton (DFA) can be found that accepts the same language. Therefore, it is possible to convert an existing NFA into a DFA for the purpose of implementing a (perhaps) simpler machine. This can be performed using the powerset construction, which may lead to an exponential rise in the number of necessary states. For a formal proof of the powerset construction, please see the Powerset construction article.

Implementation
There are many ways to implement a NFA:

Convert to the equivalent DFA. In some cases this may cause exponential blowup in the number of states.
Keep a set data structure of all states which the NFA might currently be in. On the consumption of an input symbol, unite the results of the transition function applied to all current states to get the set of next states; if ε-moves are allowed, include all states reachable by such a move (ε-closure). Each step requires at most s2 computations, where s is the number of states of the NFA. On the consumption of the last input symbol, if one of the current states is a final state, the machine accepts the string. A string of length n can be processed in time O(ns2),: 153  and space O(s).
Create multiple copies. For each n way decision, the NFA creates up to n−1 copies of the machine. Each will enter a separate state. If, upon consuming the last input symbol, at least one copy of the NFA is in the accepting state, the NFA will accept.  (This, too, requires linear storage with respect to the number of NFA states, as there can be one machine for every NFA state.)
Explicitly propagate tokens through the transition structure of the NFA and match whenever a token reaches the final state. This is sometimes useful when the NFA should encode additional context about the events that triggered the transition. (For an implementation that uses this technique to keep track of object references have a look at Tracematches.)
It is PSPACE-complete to test, given an NFA, whether it is universal, i.e., if there is a string that it does not accept. The same is true of the inclusion problem, i.e., given two NFAs, is the language of one a subset of the language of the other.

Application of NFA
NFAs and DFAs are equivalent in that if a language is recognized by an NFA, it is also recognized by a DFA and vice versa.  The establishment of such equivalence is important and useful.  It is useful because constructing an NFA to recognize a given language is sometimes much easier than constructing a DFA for that language.  It is important because NFAs can be used to reduce the complexity of the mathematical work required to establish many important properties in the theory of computation.  For example, it is much easier to prove closure properties of regular languages using NFAs than DFAs.

See also
Deterministic finite automaton
Two-way nondeterministic finite automaton
Pushdown automaton
Nondeterministic Turing machine

Notes
References
M. O. Rabin and D. Scott, "Finite Automata and their Decision Problems", IBM Journal of Research and Development, 3:2 (1959) pp. 115–125.
Michael Sipser, Introduction to the Theory of Computation. PWS, Boston. 1997. ISBN 0-534-94728-X. (see section 1.2: Nondeterminism, pp. 47–63.)
John E. Hopcroft and Jeffrey D. Ullman, Introduction to Automata Theory, Languages, and Computation, Addison-Wesley Publishing, Reading Massachusetts, 1979. ISBN 0-201-02988-X. (See chapter 2.)