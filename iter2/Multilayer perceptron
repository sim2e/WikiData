A multilayer perceptron (MLP) is a misnomer for a modern feedforward artificial neural network, consisting of fully connected neurons with a nonlinear kind of activation function, organized in at least three layers, notable for being able to distinguish data that is not linearly separable. It is a misnomer because the original perceptron used a Heaviside step function, instead of a nonlinear kind of activation function (used by modern networks).
Modern feedforward networks are trained using the backpropagation method and are colloquially referred to as the "vanilla" neural networks.

Timeline
In 1958, a layered network of perceptrons, consisting of an input layer, a hidden layer with randomized weights that did not learn, and an output layer with learning connections, was introduced already by Frank Rosenblatt in his book Perceptron. This extreme learning machine was not yet a deep learning network.In 1965, the first  deep-learning feedforward network, not yet using stochastic gradient descent, was published by Alexey Grigorevich Ivakhnenko and Valentin Lapa, at the time called the Group Method of Data Handling.In 1967, a deep-learning network, which used stochastic gradient descent for the first time, able to classify non-linearily separable pattern classes, was published by Shun'ichi Amari. Amari's student Saito conducted the computer experiments, using a five-layered feedforward network with two learning layers.In 1970, modern backpropagation method, an efficient application of a chain-rule-based supervised learning, was for the first time published by the Finnish researcher Seppo Linnainmaa. The term (i.e. "back-propagating errors") itself has been used by Rosenblatt himself, but he did not know how to implement it, although a continuous precursor of backpropagation was already used in the context of control theory in 1960 by Henry J. Kelley. It is known also as a reverse mode of automatic differentiation.In 1982, backpropagation was applied in the way that has become standard, for the first time by Paul Werbos.In 1985, an experimental analysis of the technique was conducted by David E. Rumelhart et al.. Many improvements to the approach have been made in subsequent decades,.In 1990s, an (much simpler) alternative to using neural networks, although still related support vector machine approach was developed by Vladimir Vapnik and his colleagues. In addition to performing linear classification, they were able to efficiently perform a non-linear classification using what is called the kernel trick, using high-dimensional feature spaces.In 2003, interest in backpropagation networks returned due to the successes of deep learning being applied to language modelling by Yoshua Bengio with co-authors.In 2017, modern transformer architectures has been introduced.  In 2021, a very simple NN architecture combining two deep MLPs with skip connections and layer normalizations was designed and called MLP-Mixer; its realizations featuring 19 to 431 millions of parameters were shown to be comparable to vision transformers of similar size on ImageNet and similar image classification tasks.

Mathematical foundations
Activation function
If a multilayer perceptron has a linear activation function in all neurons, that is, a linear function that maps the weighted inputs to the output of each neuron, then linear algebra shows that any number of layers can be reduced to a two-layer input-output model. In MLPs some neurons use a nonlinear activation function that was developed to model the frequency of action potentials, or firing, of biological neurons.
The two historically common activation functions are both sigmoids, and are described by

  
    
      
        y
        (
        
          v
          
            i
          
        
        )
        =
        tanh
        ⁡
        (
        
          v
          
            i
          
        
        )
         
         
        
          
            and
          
        
         
         
        y
        (
        
          v
          
            i
          
        
        )
        =
        (
        1
        +
        
          e
          
            −
            
              v
              
                i
              
            
          
        
        
          )
          
            −
            1
          
        
      
    
    {\displaystyle y(v_{i})=\tanh(v_{i})~~{\textrm {and}}~~y(v_{i})=(1+e^{-v_{i}})^{-1}}
  .The first is a hyperbolic tangent that ranges from -1 to 1, while the other is the logistic function, which is similar in shape but ranges from 0 to 1. Here 
  
    
      
        
          y
          
            i
          
        
      
    
    {\displaystyle y_{i}}
   is the output of the 
  
    
      
        i
      
    
    {\displaystyle i}
  th node (neuron) and 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
   is the weighted sum of the input connections. Alternative activation functions have been proposed, including the rectifier and softplus functions. More specialized activation functions include radial basis functions (used in radial basis networks, another class of supervised neural network models).
In recent developments of deep learning the rectified linear unit (ReLU) is more frequently used as one of the possible ways to overcome the numerical problems related to the sigmoids.

Layers
The MLP consists of three or more layers (an input and an output layer with one or more hidden layers) of nonlinearly-activating nodes. Since MLPs are fully connected, each node in one layer connects with a certain weight 
  
    
      
        
          w
          
            i
            j
          
        
      
    
    {\displaystyle w_{ij}}
   to every node in the following layer.

Learning
Learning occurs in the perceptron by changing connection weights after each piece of data is processed, based on the amount of error in the output compared to the expected result. This is an example of supervised learning, and is carried out through backpropagation, a generalization of the least mean squares algorithm in the linear perceptron.
We can represent the degree of error in an output node 
  
    
      
        j
      
    
    {\displaystyle j}
   in the 
  
    
      
        n
      
    
    {\displaystyle n}
  th data point (training example) by 
  
    
      
        
          e
          
            j
          
        
        (
        n
        )
        =
        
          d
          
            j
          
        
        (
        n
        )
        −
        
          y
          
            j
          
        
        (
        n
        )
      
    
    {\displaystyle e_{j}(n)=d_{j}(n)-y_{j}(n)}
  , where 
  
    
      
        
          d
          
            j
          
        
        (
        n
        )
      
    
    {\displaystyle d_{j}(n)}
   is the desired target value for 
  
    
      
        n
      
    
    {\displaystyle n}
  th data point at node 
  
    
      
        j
      
    
    {\displaystyle j}
  , and 
  
    
      
        
          y
          
            j
          
        
        (
        n
        )
      
    
    {\displaystyle y_{j}(n)}
   is the value produced by the perceptron at node 
  
    
      
        j
      
    
    {\displaystyle j}
   when the 
  
    
      
        n
      
    
    {\displaystyle n}
  th data point is given as an input.
The node weights can then be adjusted based on corrections that minimize the error in the entire output for the 
  
    
      
        n
      
    
    {\displaystyle n}
  th data point, given by

  
    
      
        
          
            E
          
        
        (
        n
        )
        =
        
          
            1
            2
          
        
        
          ∑
          
            
              output node 
            
            j
          
        
        
          e
          
            j
          
          
            2
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {E}}(n)={\frac {1}{2}}\sum _{{\text{output node }}j}e_{j}^{2}(n)}
  .Using gradient descent, the change in each weight 
  
    
      
        
          w
          
            i
            j
          
        
      
    
    {\displaystyle w_{ij}}
   is

  
    
      
        Δ
        
          w
          
            j
            i
          
        
        (
        n
        )
        =
        −
        η
        
          
            
              ∂
              
                
                  E
                
              
              (
              n
              )
            
            
              ∂
              
                v
                
                  j
                
              
              (
              n
              )
            
          
        
        
          y
          
            i
          
        
        (
        n
        )
      
    
    {\displaystyle \Delta w_{ji}(n)=-\eta {\frac {\partial {\mathcal {E}}(n)}{\partial v_{j}(n)}}y_{i}(n)}
  where 
  
    
      
        
          y
          
            i
          
        
        (
        n
        )
      
    
    {\displaystyle y_{i}(n)}
   is the output of the previous neuron 
  
    
      
        i
      
    
    {\displaystyle i}
  , and 
  
    
      
        η
      
    
    {\displaystyle \eta }
   is the learning rate, which is selected to ensure that the weights quickly converge to a response, without oscillations. In the previous expression, 
  
    
      
        
          
            
              ∂
              
                
                  E
                
              
              (
              n
              )
            
            
              ∂
              
                v
                
                  j
                
              
              (
              n
              )
            
          
        
      
    
    {\displaystyle {\frac {\partial {\mathcal {E}}(n)}{\partial v_{j}(n)}}}
   denotes the partial derivate of the error 
  
    
      
        
          
            E
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {E}}(n)}
   according to the weighted sum 
  
    
      
        
          v
          
            j
          
        
        (
        n
        )
      
    
    {\displaystyle v_{j}(n)}
   of the input connections of neuron 
  
    
      
        i
      
    
    {\displaystyle i}
  .
The derivative to be calculated depends on the induced local field 
  
    
      
        
          v
          
            j
          
        
      
    
    {\displaystyle v_{j}}
  , which itself varies. It is easy to prove that for an output node this derivative can be simplified to

  
    
      
        −
        
          
            
              ∂
              
                
                  E
                
              
              (
              n
              )
            
            
              ∂
              
                v
                
                  j
                
              
              (
              n
              )
            
          
        
        =
        
          e
          
            j
          
        
        (
        n
        )
        
          ϕ
          
            ′
          
        
        (
        
          v
          
            j
          
        
        (
        n
        )
        )
      
    
    {\displaystyle -{\frac {\partial {\mathcal {E}}(n)}{\partial v_{j}(n)}}=e_{j}(n)\phi ^{\prime }(v_{j}(n))}
  where 
  
    
      
        
          ϕ
          
            ′
          
        
      
    
    {\displaystyle \phi ^{\prime }}
   is the derivative of the activation function described above, which itself does not vary. The analysis is more difficult for the change in weights to a hidden node, but it can be shown that the relevant derivative is

  
    
      
        −
        
          
            
              ∂
              
                
                  E
                
              
              (
              n
              )
            
            
              ∂
              
                v
                
                  j
                
              
              (
              n
              )
            
          
        
        =
        
          ϕ
          
            ′
          
        
        (
        
          v
          
            j
          
        
        (
        n
        )
        )
        
          ∑
          
            k
          
        
        −
        
          
            
              ∂
              
                
                  E
                
              
              (
              n
              )
            
            
              ∂
              
                v
                
                  k
                
              
              (
              n
              )
            
          
        
        
          w
          
            k
            j
          
        
        (
        n
        )
      
    
    {\displaystyle -{\frac {\partial {\mathcal {E}}(n)}{\partial v_{j}(n)}}=\phi ^{\prime }(v_{j}(n))\sum _{k}-{\frac {\partial {\mathcal {E}}(n)}{\partial v_{k}(n)}}w_{kj}(n)}
  .This depends on the change in weights of the 
  
    
      
        k
      
    
    {\displaystyle k}
  th nodes, which represent the output layer. So to change the hidden layer weights, the output layer weights change according to the derivative of the activation function, and so this algorithm represents a backpropagation of the activation function.

References
External links
Weka: Open source data mining software with multilayer perceptron implementation.
Neuroph Studio documentation, implements this algorithm and a few others.