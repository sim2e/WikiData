Shellsort, also known as Shell sort or Shell's method, is an in-place comparison sort. It can be seen as either a generalization of sorting by exchange (bubble sort) or sorting by insertion (insertion sort). The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. By starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959. The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.

Description
Shellsort is an optimization of insertion sort that allows the exchange of items that are far apart. The idea is to arrange the list of elements so that, starting anywhere, taking every hth element produces a sorted list. Such a list is said to be h-sorted. It can also be thought of as h interleaved lists, each individually sorted. Beginning with large values of h allows elements to move long distances in the original list, reducing large amounts of disorder quickly, and leaving less work for smaller h-sort steps to do. If the list is then k-sorted for some smaller integer k, then the list remains h-sorted. A final sort with h = 1 ensures the list is fully sorted at the end, but a judiciously chosen decreasing sequence of h values leaves very little work for this final pass to do.
In simplistic terms, this means if we have an array of 1024 numbers, our first gap (h) could be 512. We then run through the list comparing each element in the first half to the element in the second half. Our second gap (k) is 256, which breaks the array into four sections (starting at 0, 256, 512, 768), and we make sure the first items in each section are sorted relative to each other, then the second item in each section, and so on. In practice the gap sequence could be anything, but the last gap is always 1 to finish the sort (effectively finishing with an ordinary insertion sort).
An example run of Shellsort with gaps 5, 3 and 1 is shown below.

The first pass, 5-sorting, performs insertion sort on five  separate subarrays (a1, a6, a11), (a2, a7, a12), (a3, a8), (a4, a9), (a5, a10). For instance, it changes the subarray (a1, a6, a11) from (62, 17, 25) to (17, 25, 62). The next pass, 3-sorting, performs insertion sort on the three subarrays (a1, a4, a7, a10), (a2, a5, a8, a11), (a3, a6, a9, a12). The last pass, 1-sorting, is an ordinary insertion sort of the entire array (a1,..., a12).
As the example illustrates, the subarrays that Shellsort operates on are initially short; later they are longer but almost ordered. In both cases insertion sort works efficiently.
Unlike insertion sort, Shellsort is not a stable sort since gapped insertions transport equal elements past one another and thus lose their original order. It is an adaptive sorting algorithm in that it executes faster when the input is partially sorted.

Pseudocode
Using Marcin Ciura's gap sequence, with an inner insertion sort.

Gap sequences
The question of deciding which gap sequence to use is difficult. Every gap sequence that contains 1 yields a correct sort (as this makes the final pass an ordinary insertion sort); however, the properties of thus obtained versions of Shellsort may be very different. Too few gaps slows down the passes, and too many gaps produces an overhead.
The table below compares most proposed gap sequences published so far. Some of them have decreasing elements that depend on the size of the sorted array (N). Others are increasing infinite sequences, whose elements less than N should be used in reverse order.

When the binary representation of N contains many consecutive zeroes, Shellsort using Shell's original gap sequence makes Θ(N2) comparisons in the worst case. For instance, this case occurs for N equal to a power of two when elements greater and smaller than the median occupy odd and even positions respectively, since they are compared only in the last pass.
Although it has higher complexity than the O(N log N) that is optimal for comparison sorts, Pratt's version lends itself to sorting networks and has the same asymptotic gate complexity as Batcher's bitonic sorter.
Gonnet and Baeza-Yates observed that Shellsort makes the fewest comparisons on average when the ratios of successive gaps are roughly equal to 2.2. This is why their sequence with ratio 2.2 and Tokuda's sequence with ratio 2.25 prove efficient. However, it is not known why this is so. Sedgewick recommends using gaps which have low greatest common divisors or are pairwise coprime. Gaps which are odd numbers seem to work well in practice: 25% reductions have been observed by avoiding even-numbered gaps. Gaps which avoid multiples of 3 and 5 seem to produce small benefits of < 10%.With respect to the average number of comparisons, Ciura's sequence has the best known performance; gaps greater than 701 were not determined but the sequence can be further extended according to the recursive formula 
  
    
      
        
          h
          
            k
          
        
        =
        ⌊
        2.25
        
          h
          
            k
            −
            1
          
        
        ⌋
      
    
    {\displaystyle h_{k}=\lfloor 2.25h_{k-1}\rfloor }
  .
Tokuda's sequence, defined by the simple formula 
  
    
      
        
          h
          
            k
          
        
        =
        ⌈
        
          h
          
            k
          
          ′
        
        ⌉
      
    
    {\displaystyle h_{k}=\lceil h'_{k}\rceil }
  , where 
  
    
      
        
          h
          
            k
          
          ′
        
        =
        2.25
        
          h
          
            k
            −
            1
          
          ′
        
        +
        1
      
    
    {\displaystyle h'_{k}=2.25h'_{k-1}+1}
  , 
  
    
      
        
          h
          
            1
          
          ′
        
        =
        1
      
    
    {\displaystyle h'_{1}=1}
  , can be recommended for practical applications.
If the maximum input size is small, as may occur if Shellsort is used on small subarrays by another recursive sorting algorithm such as quicksort or merge sort, then it is possible to tabulate an optimal sequence for each input size.

Computational complexity
The following property holds: after h2-sorting of any h1-sorted array, the array remains h1-sorted. Every h1-sorted and h2-sorted array is also (a1h1+a2h2)-sorted, for any nonnegative integers a1 and a2. The worst-case complexity of Shellsort is therefore connected with the Frobenius problem: for given integers h1,..., hn with gcd = 1, the Frobenius number g(h1,..., hn) is the greatest integer that cannot be represented as a1h1+ ... +anhn with nonnegative integer a1,..., an. Using known formulae for Frobenius numbers, we can determine the worst-case complexity of Shellsort for several classes of gap sequences. Proven results are shown in the above table.
Mark Allen Weiss proved that Shellsort runs in O(N log N) time when the input array is in reverse order.With respect to the average number of operations, none of the proven results concerns a practical gap sequence. For gaps that are powers of two, Espelid computed this average as 
  
    
      
        0.5349
        N
        
          
            N
          
        
        −
        0.4387
        N
        −
        0.097
        
          
            N
          
        
        +
        O
        (
        1
        )
      
    
    {\displaystyle 0.5349N{\sqrt {N}}-0.4387N-0.097{\sqrt {N}}+O(1)}
  . Knuth determined the average complexity of sorting an N-element array with two gaps (h, 1) to be 
  
    
      
        
          
            
              2
              
                N
                
                  2
                
              
            
            h
          
        
        +
        
          
            π
            
              N
              
                3
              
            
            h
          
        
      
    
    {\displaystyle {\frac {2N^{2}}{h}}+{\sqrt {\pi N^{3}h}}}
  . It follows that a two-pass Shellsort with h = Θ(N1/3) makes on average O(N5/3) comparisons/inversions/running time. Yao found the average complexity of a three-pass Shellsort. His result was refined by Janson and Knuth: the average number of comparisons/inversions/running time made during a Shellsort with three gaps (ch, cg, 1), where h and g are coprime, is 
  
    
      
        
          
            
              N
              
                2
              
            
            
              4
              c
              h
            
          
        
        +
        O
        (
        N
        )
      
    
    {\displaystyle {\frac {N^{2}}{4ch}}+O(N)}
   in the first pass, 
  
    
      
        
          
            1
            
              8
              g
            
          
        
        
          
            
              π
              
                c
                h
              
            
          
        
        (
        h
        −
        1
        )
        
          N
          
            3
            
              /
            
            2
          
        
        +
        O
        (
        h
        N
        )
      
    
    {\displaystyle {\frac {1}{8g}}{\sqrt {\frac {\pi }{ch}}}(h-1)N^{3/2}+O(hN)}
   in the second pass and 
  
    
      
        ψ
        (
        h
        ,
        g
        )
        N
        +
        
          
            1
            8
          
        
        
          
            
              π
              c
            
          
        
        (
        c
        −
        1
        )
        
          N
          
            3
            
              /
            
            2
          
        
        +
        O
        
          (
          
            (
            c
            −
            1
            )
            g
            
              h
              
                1
                
                  /
                
                2
              
            
            N
          
          )
        
        +
        O
        
          (
          
            
              c
              
                2
              
            
            
              g
              
                3
              
            
            
              h
              
                2
              
            
          
          )
        
      
    
    {\displaystyle \psi (h,g)N+{\frac {1}{8}}{\sqrt {\frac {\pi }{c}}}(c-1)N^{3/2}+O\left((c-1)gh^{1/2}N\right)+O\left(c^{2}g^{3}h^{2}\right)}
   in the third pass. ψ(h, g) in the last formula is a complicated function asymptotically equal to 
  
    
      
        
          
            
              
                π
                h
              
              128
            
          
        
        g
        +
        O
        
          (
          
            
              g
              
                −
                1
                
                  /
                
                2
              
            
            
              h
              
                1
                
                  /
                
                2
              
            
          
          )
        
        +
        O
        
          (
          
            g
            
              h
              
                −
                1
                
                  /
                
                2
              
            
          
          )
        
      
    
    {\displaystyle {\sqrt {\frac {\pi h}{128}}}g+O\left(g^{-1/2}h^{1/2}\right)+O\left(gh^{-1/2}\right)}
  . In particular, when h = Θ(N7/15) and g = Θ(N1/5), the average time of sorting is O(N23/15).
Based on experiments, it is conjectured that Shellsort with Hibbard's gap sequence runs in O(N5/4) average time, and that Gonnet and Baeza-Yates's sequence requires on average 0.41N ln N (ln ln N + 1/6) element moves. Approximations of the average number of operations formerly put forward for other sequences fail when sorted arrays contain millions of elements.
The graph below shows the average number of element comparisons use by various gap sequences, divided by the theoretical lower bound, i.e. log2N!.  Ciuria's sequence 1, 4, 10, 23, 57, 132, 301, 701 (labelled Ci01) has been extended according to the formula 
  
    
      
        
          h
          
            k
          
        
        =
        ⌊
        2.25
        
          h
          
            k
            −
            1
          
        
        ⌋
      
    
    {\displaystyle h_{k}=\lfloor 2.25h_{k-1}\rfloor }
  .

Applying the theory of Kolmogorov complexity, Jiang, Li, and Vitányi 
 proved the following lower bound for the order of the average number of operations/running time in a p-pass Shellsort: Ω(pN1+1/p) when p ≤ log2N and Ω(pN) when p > log2N.
Therefore, Shellsort has prospects of running in an average time that asymptotically grows like N logN only when using gap sequences whose number of gaps grows in proportion to the logarithm of the array size. It is, however, unknown whether Shellsort can reach this asymptotic order of average-case complexity, which is optimal for comparison sorts. The lower bound was improved by Vitányi for every number of passes 
  
    
      
        p
      
    
    {\displaystyle p}
   to  

  
    
      
        Ω
        (
        N
        
          ∑
          
            k
            =
            1
          
          
            p
          
        
        
          h
          
            k
            −
            1
          
        
        
          /
        
        
          h
          
            k
          
        
        )
      
    
    {\displaystyle \Omega (N\sum _{k=1}^{p}h_{k-1}/h_{k})}
  
where 
  
    
      
        
          h
          
            0
          
        
        =
        N
      
    
    {\displaystyle h_{0}=N}
  . This result implies for example the Jiang-Li-Vitányi lower bound for all 
  
    
      
        p
      
    
    {\displaystyle p}
  -pass increment sequences and improves that lower bound for particular increment sequences. In fact all bounds (lower and upper) currently known for the average case are precisely matched by this lower bound. For example, this gives the new result that the Janson-Knuth upper bound is matched by the resulting lower bound for the used increment sequence, showing that three pass Shellsort for this increment sequence uses 
  
    
      
        Θ
        (
        
          N
          
            23
            
              /
            
            15
          
        
        )
      
    
    {\displaystyle \Theta (N^{23/15})}
   comparisons/inversions/running time.
The formula allows us to search for increment sequences that yield lower bounds which are unknown; for example an increment sequence for four passes which has a lower bound greater than

  
    
      
        Ω
        (
        p
        
          n
          
            1
            +
            1
            
              /
            
            p
          
        
        )
        =
        Ω
        (
        
          n
          
            5
            
              /
            
            4
          
        
        )
      
    
    {\displaystyle \Omega (pn^{1+1/p})=\Omega (n^{5/4})}
   for the increment sequence

  
    
      
        
          h
          
            1
          
        
        =
        
          n
          
            11
            
              /
            
            16
          
        
        ,
      
    
    {\displaystyle h_{1}=n^{11/16},}
   
  
    
      
        
          h
          
            2
          
        
        =
        
          n
          
            7
            
              /
            
            16
          
        
        ,
      
    
    {\displaystyle h_{2}=n^{7/16},}
   
  
    
      
        
          h
          
            3
          
        
        =
        
          n
          
            3
            
              /
            
            16
          
        
        ,
      
    
    {\displaystyle h_{3}=n^{3/16},}
   
  
    
      
        
          h
          
            4
          
        
        =
        1
      
    
    {\displaystyle h_{4}=1}
  . The lower bound becomes

  
    
      
        T
        =
        Ω
        (
        n
        ⋅
        (
        
          n
          
            1
            −
            11
            
              /
            
            16
          
        
        +
        
          n
          
            11
            
              /
            
            16
            −
            7
            
              /
            
            16
          
        
        +
        
          n
          
            7
            
              /
            
            16
            −
            3
            
              /
            
            16
          
        
        +
        
          n
          
            3
            
              /
            
            16
          
        
        )
        =
        Ω
        (
        
          n
          
            1
            +
            5
            
              /
            
            16
          
        
        )
        =
        Ω
        (
        
          n
          
            21
            
              /
            
            16
          
        
        )
        .
      
    
    {\displaystyle T=\Omega (n\cdot (n^{1-11/16}+n^{11/16-7/16}+n^{7/16-3/16}+n^{3/16})=\Omega (n^{1+5/16})=\Omega (n^{21/16}).}
  
The worst-case complexity of any version of Shellsort is of higher order: Plaxton, Poonen, and Suel showed that it grows at least as rapidly as 
  
    
      
        Ω
        
          (
          
            N
            
              
                (
                
                  
                    
                      log
                      ⁡
                      N
                    
                    
                      log
                      ⁡
                      log
                      ⁡
                      N
                    
                  
                
                )
              
              
                2
              
            
          
          )
        
      
    
    {\displaystyle \Omega \left(N\left({\log N \over \log \log N}\right)^{2}\right)}
  .
Robert Cypher proved a stronger lower bound: 
  
    
      
        Ω
        
          (
          
            N
            
              
                
                  (
                  log
                  ⁡
                  N
                  
                    )
                    
                      2
                    
                  
                
                
                  log
                  ⁡
                  log
                  ⁡
                  N
                
              
            
          
          )
        
      
    
    {\displaystyle \Omega \left(N{{(\log N)^{2}} \over {\log \log N}}\right)}
   when 
  
    
      
        
          h
          
            s
            +
            1
          
        
        >
        
          h
          
            s
          
        
      
    
    {\displaystyle h_{s+1}>h_{s}}
   for all 
  
    
      
        s
      
    
    {\displaystyle s}
  .

Applications
Shellsort performs more operations and has higher cache miss ratio than quicksort. However, since it can be implemented using little code and does not use the call stack, some implementations of the qsort function in the C standard library targeted at embedded systems use it instead of quicksort. Shellsort is, for example, used in the uClibc library. For similar reasons, in the past, Shellsort was used in the Linux kernel.Shellsort can also serve as a sub-algorithm of introspective sort, to sort short subarrays and to prevent a slowdown when the recursion depth exceeds a given limit. This principle is employed, for instance, in the bzip2 compressor.

See also
Comb sort

References
Bibliography
Knuth, Donald E. (1997). "Shell's method". The Art of Computer Programming. Volume 3: Sorting and Searching (2nd ed.). Reading, Massachusetts: Addison-Wesley. pp. 83–95. ISBN 978-0-201-89685-5.
Analysis of Shellsort and Related Algorithms, Robert Sedgewick, Fourth European Symposium on Algorithms, Barcelona, September 1996.

External links

Animated Sorting Algorithms: Shell Sort at the Wayback Machine (archived 10 March 2015) – graphical demonstration
Shellsort with gaps 5, 3, 1 as a Hungarian folk dance