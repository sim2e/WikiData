The philosophy of computer science is concerned with the philosophical questions that arise within the study of computer science. There is still no common understanding of the content, aim, focus, or topic of the philosophy of computer science, despite some attempts to develop a philosophy of computer science like the philosophy of physics or the philosophy of mathematics. Due to the abstract nature of computer programs and the technological ambitions of computer science, many of the conceptual questions of the philosophy of computer science are also comparable to the philosophy of science, philosophy of mathematics, and the philosophy of technology.

Overview
Many of the central philosophical questions of computer science are centered on the logical, ethical, methodological, ontological and epistemological issues that concern it. Some of these questions may include:

What is computation?
Does the Church–Turing thesis capture the mathematical notion of an effective method in logic and mathematics?
What are the philosophical consequences of the P vs NP problem?
What is information?

Church–Turing thesis
The Church–Turing thesis and its variations are central to the theory of computation. Since, as an informal notion, the concept of effective calculability does not have a formal definition, the thesis, although it has near-universal acceptance, cannot be formally proven. The implications of this thesis is also of philosophical concern. Philosophers have interpreted the Church–Turing thesis as having implications for the philosophy of mind.

P versus NP problem
The P versus NP problem is an unsolved problem in computer science and mathematics. It asks whether every problem whose solution can be verified in polynomial time (and so defined to belong to the class NP) can also be solved in polynomial time (and so defined to belong to the class P). Most computer scientists believe that P ≠ NP. Apart from the reason that after decades of studying these problems no one has been able to find a polynomial-time algorithm for any of more than 3000 important known NP-complete problems, philosophical reasons that concern its implications may have motivated this belief.
For instance, according to Scott Aaronson, the American computer scientist then at MIT:

If P = NP, then the world would be a profoundly different place than we usually assume it to be. There would be no special value in "creative leaps", no fundamental gap between solving a problem and recognizing the solution once it's found. Everyone who could appreciate a symphony would be Mozart; everyone who could follow a step-by-step argument would be Gauss.

See also
Computer-assisted proof: Philosophical objections
Philosophy of artificial intelligence
Philosophy of information
Philosophy of mathematics
Philosophy of science
Philosophy of technology

References
Further reading
Matti Tedre (2014). The Science of Computing: Shaping a Discipline. Chapman Hall.
Scott Aaronson. "Why Philosophers Should Care About Computational Complexity". In Computability: Gödel, Turing, Church, and beyond.
Timothy Colburn. Philosophy and Computer Science. Explorations in Philosophy. M.E. Sharpe, 1999. ISBN 1-56324-991-X.
A.K. Dewdney. New Turing Omnibus: 66 Excursions in Computer Science
Luciano Floridi (editor). The Blackwell Guide to the Philosophy of Computing and Information, 2004.
Luciano Floridi (editor). Philosophy of Computing and Information: 5 Questions. Automatic Press, 2008.
Luciano Floridi. Philosophy and Computing: An Introduction, Routledge, 1999.
Christian Jongeneel. The informatical worldview, an inquiry into the methodology of computer science.
Jan van Leeuwen. "Towards a philosophy of the information and computing sciences", NIAS Newsletter 42, 2009.
Moschovakis, Y. (2001). What is an algorithm? In Enquist, B. and Schmid, W., editors, Mathematics unlimited — 2001 and beyond, pages 919–936. Springer.
Alexander Ollongren, Jaap van den Herik. Filosofie van de informatica. London and New York: Routledge, 1999. ISBN 0-415-19749-X
Tedre, Matti (2014), The Science of Computing: Shaping a Discipline, ISBN 9781482217698 Taylor and Francis.
Ray Turner and Nicola Angius. "The Philosophy of Computer Science". Stanford Encyclopedia of Philosophy.
Matti Tedre (2011). Computing as a Science: A Survey of Competing Viewpoints. Minds & Machines 21, 3, 361–387.
Ray Turner. Computational Artefacts-Towards a Philosophy of Computer Science. Springer. [1]

External links
The International Association for Computing and Philosophy
Philosophy of Computing and Information at PhilPapers
Philosophy of Computation at Berkeley
Rapaport, William J. (2020-07-27). "Philosophy of Computer Science (draft version)" (PDF). Archived from the original (PDF) on 2021-10-26.