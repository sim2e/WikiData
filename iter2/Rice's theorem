In computability theory, Rice's theorem states that all non-trivial semantic properties of programs are undecidable. A semantic property is one about the program's behavior (for instance, does the program terminate for all inputs), unlike a syntactic property (for instance, does the program contain an if-then-else statement). A property is non-trivial if it is neither true for every program, nor false for every program.
Rice's theorem can also be put in terms of functions: for any non-trivial property of partial functions, no general and effective method can decide whether an algorithm computes a partial function with that property. Here, a property of partial functions is called trivial if it holds for all partial computable functions or for none, and an effective decision method is called general if it decides correctly for every algorithm. The theorem is named after Henry Gordon Rice, who proved it in his doctoral dissertation of 1951 at Syracuse University.

Introduction
Let p be a property of a formal language L that is nontrivial, meaning

there exists a recursively enumerable language having the property p,
there exists a recursively enumerable language not having the property p,(that is, p is neither uniformly true nor uniformly false for all recursively enumerable languages).
Then it is undecidable to determine for a given Turing machine M, whether the language recognized by it has the property p.
In practice, this means that there is no machine that can always decide whether the language of a given Turing machine has a particular nontrivial property. Special cases include e.g. the undecidability of whether the language recognized by a Turing machine could be recognized by a nontrivial simpler machine, such as a finite automaton (meaning, it is undecidable whether the language of a Turing machine is regular).
It is important to note that Rice's theorem does not concern the properties of machines or programs; it concerns properties of functions and languages.  For example, whether a machine runs for more than 100 steps on a particular input is a decidable property, even though it is non-trivial.  Two different machines recognizing exactly the same language might require a different number of steps to recognize the same input string.  Similarly, whether a machine has more than five states is a decidable property of the machine, as the number of states can simply be counted. For properties of this kind, which concerns a Turing machine but not the language recognized by it, Rice's theorem does not apply.
Using Rogers' characterization of acceptable programming systems, Rice's theorem may essentially be generalized from Turing machines to most computer programming languages: there exists no automatic method that decides with generality non-trivial questions on the behavior of computer programs.
As an example, consider the following variant of the halting problem. Let P be the following property of partial functions F of one argument: P(F) means that F is defined for the argument '1'.  It is obviously non-trivial, since there are partial functions that are defined at 1, and others that are undefined at 1.  The 1-halting problem is the problem of deciding of any algorithm whether it defines a function with this property, i.e., whether the algorithm halts on input 1. By Rice's theorem, the 1-halting problem is undecidable. Similarly the question of whether a Turing machine T terminates on an initially empty tape (rather than with an initial word w given as second argument in addition to a description of T, as in the full halting problem) is still undecidable.

Formal statement
Let 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
   denote the natural numbers, and let 
  
    
      
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle \mathbf {P} ^{(1)}}
   denote the class of unary (partial) computable functions. Let 
  
    
      
        ϕ
        :
        
          N
        
        →
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle \phi \colon \mathbb {N} \to \mathbf {P} ^{(1)}}
   be an admissible numbering of the computable functions. Denote by 
  
    
      
        
          ϕ
          
            e
          
        
        :=
        ϕ
        (
        e
        )
      
    
    {\displaystyle \phi _{e}:=\phi (e)}
   the eth (partial) computable function.
We identify each property that a computable function may have with the subset of 
  
    
      
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle \mathbf {P} ^{(1)}}
   consisting of the functions with that property. Thus, given a set 
  
    
      
        F
        ⊆
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle F\subseteq \mathbf {P} ^{(1)}}
  , a computable function 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   has property 
  
    
      
        F
      
    
    {\displaystyle F}
   if and only if 
  
    
      
        
          ϕ
          
            e
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{e}\in F}
  .  For each property 
  
    
      
        F
        ⊆
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle F\subseteq \mathbf {P} ^{(1)}}
   there is an associated membership decision problem 
  
    
      
        
          D
          
            F
          
        
      
    
    {\displaystyle D_{F}}
   of determining, given e, whether 
  
    
      
        
          ϕ
          
            e
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{e}\in F}
  .
Rice's theorem states that the decision problem 
  
    
      
        
          D
          
            F
          
        
      
    
    {\displaystyle D_{F}}
   is decidable (also called recursive or computable) if and only if 
  
    
      
        F
        =
        ∅
      
    
    {\displaystyle F=\varnothing }
   or 
  
    
      
        F
        =
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle F=\mathbf {P} ^{(1)}}
  .

Examples
According to Rice's theorem, if there is at least one partial computable function in a particular class C of partial computable functions and another partial computable function not in C then the problem of deciding whether a particular program computes a function in C is undecidable. For example, Rice's theorem shows that each of the following sets of partial computable functions is undecidable (that is, the set is not recursive, or not computable):

The class of partial computable functions that return 0 for every input, and its complement.
The class of partial computable functions that return 0 for at least one input, and its complement.
The class of partial computable functions that are constant, and its complement.
The class of partial computable functions that are identical to a given partial computable function, and its complement.
The class of partial computable functions that diverge (i.e., undefined) for some input, and its complement.
The class of indices for computable functions that are total.
The class of indices for recursively enumerable sets that are cofinite.
The class of indices for recursively enumerable sets that are recursive.

Proof by Kleene's recursion theorem
A corollary to Kleene's recursion theorem states that for every Gödel numbering 
  
    
      
        ϕ
        :
        
          N
        
        →
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle \phi \colon \mathbb {N} \to \mathbf {P} ^{(1)}}
   of the computable functions and every computable function 
  
    
      
        Q
        (
        x
        ,
        y
        )
      
    
    {\displaystyle Q(x,y)}
  , there is an index 
  
    
      
        e
      
    
    {\displaystyle e}
   such that 
  
    
      
        
          ϕ
          
            e
          
        
        (
        y
        )
      
    
    {\displaystyle \phi _{e}(y)}
   returns 
  
    
      
        Q
        (
        e
        ,
        y
        )
      
    
    {\displaystyle Q(e,y)}
  . (In the following, we say that 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
   "returns" 
  
    
      
        g
        (
        x
        )
      
    
    {\displaystyle g(x)}
   if either 
  
    
      
        f
        (
        x
        )
        =
        g
        (
        x
        )
      
    
    {\displaystyle f(x)=g(x)}
  , or both 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
   and 
  
    
      
        g
        (
        x
        )
      
    
    {\displaystyle g(x)}
   are undefined.) Intuitively, 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   is a quine, a function that returns its own source code (Gödel number), except that rather than returning it directly, 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   passes its Gödel number to 
  
    
      
        Q
      
    
    {\displaystyle Q}
   and returns the result.
Assume for contradiction that 
  
    
      
        F
      
    
    {\displaystyle F}
   is a set of computable functions such that 
  
    
      
        ∅
        ≠
        F
        ≠
        
          
            P
          
          
            (
            1
            )
          
        
      
    
    {\displaystyle \emptyset \neq F\neq \mathbf {P} ^{(1)}}
  . Then there are computable functions 
  
    
      
        f
        ∈
        F
      
    
    {\displaystyle f\in F}
   and 
  
    
      
        g
        ∉
        F
      
    
    {\displaystyle g\notin F}
  . Suppose that the set of indices 
  
    
      
        x
      
    
    {\displaystyle x}
   such that 
  
    
      
        
          ϕ
          
            x
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{x}\in F}
   is decidable; then, there exists a function 
  
    
      
        Q
        (
        x
        ,
        y
        )
      
    
    {\displaystyle Q(x,y)}
   that returns 
  
    
      
        g
        (
        y
        )
      
    
    {\displaystyle g(y)}
   if 
  
    
      
        
          ϕ
          
            x
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{x}\in F}
  , and 
  
    
      
        f
        (
        y
        )
      
    
    {\displaystyle f(y)}
   otherwise. By the corollary to the recursion theorem, there is an index 
  
    
      
        e
      
    
    {\displaystyle e}
   such that 
  
    
      
        
          ϕ
          
            e
          
        
        (
        y
        )
      
    
    {\displaystyle \phi _{e}(y)}
   returns 
  
    
      
        Q
        (
        e
        ,
        y
        )
      
    
    {\displaystyle Q(e,y)}
  . But then, if 
  
    
      
        
          ϕ
          
            e
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{e}\in F}
  , then 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   is the same function as 
  
    
      
        g
      
    
    {\displaystyle g}
  , and therefore 
  
    
      
        
          ϕ
          
            e
          
        
        ∉
        F
      
    
    {\displaystyle \phi _{e}\notin F}
  ; and if 
  
    
      
        
          ϕ
          
            e
          
        
        ∉
        F
      
    
    {\displaystyle \phi _{e}\notin F}
  , then 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   is 
  
    
      
        f
      
    
    {\displaystyle f}
  , and therefore 
  
    
      
        
          ϕ
          
            e
          
        
        ∈
        F
      
    
    {\displaystyle \phi _{e}\in F}
  . In both cases, we have a contradiction.

Proof by reduction from the halting problem
Proof sketch
Suppose, for concreteness, that we have an algorithm for examining a program p and determining infallibly whether p is an implementation of the squaring function, which takes an integer d and returns d2.  The proof works just as well if we have an algorithm for deciding any other nontrivial property of program behavior (i.e. a semantic and non-trivial property), and is given in general below.
The claim is that we can convert our algorithm for identifying squaring programs into one that identifies functions that halt.  We will describe an algorithm that takes inputs a and i and determines whether program a halts when given input i.
The algorithm for deciding this is conceptually simple: it constructs (the description of) a new program t taking an argument n, which (1) first executes program a on input i (both a and i being hard-coded into the definition of t), and (2) then returns the square of n. If a(i) runs forever, then t never gets to step (2), regardless of n. Then clearly,  t is a function for computing squares if and only if step (1) terminates.  Since we've assumed that we can infallibly identify programs for computing squares, we can determine whether t, which depends on a and i, is such a program; thus we have obtained a program that decides whether program a halts on input i.  Note that our halting-decision algorithm never executes t, but only passes its description to the squaring-identification program, which by assumption always terminates; since the construction of the description of t can also be done in a way that always terminates, the halting-decision cannot fail to halt either.

 halts (a,i) {
   define t(n) {
     a(i)
     return n×n
   }
   return is_a_squaring_function(t)
 }

This method doesn't depend specifically on being able to recognize functions that compute squares; as long as some program can do what we're trying to recognize, we can add a call to a to obtain our t. We could have had a method for recognizing programs for computing square roots, or programs for computing the monthly payroll, or programs that halt when given the input "Abraxas"; in each case, we would be able to solve the halting problem similarly.

Formal proof
For the formal proof, algorithms are presumed to define partial functions over strings and are themselves represented by strings. The partial function computed by the algorithm represented by a string a is denoted Fa. This proof proceeds by reductio ad absurdum: we assume that there is a non-trivial property that is decided by an algorithm, and then show that it follows that we can decide the halting problem, which is not possible, and therefore a contradiction.
Let us now assume that P(a) is an algorithm that decides some non-trivial property of Fa. Without loss of generality we may assume that P(no-halt) = "no", with no-halt being the representation of an algorithm that never halts. If this is not true, then this holds for the algorithm P that computes the negation of the property P. Now, since P decides a non-trivial property, it follows that there is a string b that represents an algorithm Fb and P(b) = "yes".  We can then define an algorithm H(a, i) as follows:

1. construct a string t that represents an algorithm T(j) such that
T first simulates the computation of Fa(i),
then T simulates the computation of Fb(j) and returns its result.
2. return P(t).We can now show that H decides the halting problem:

Assume that the algorithm represented by a halts on input i. In this case Ft = Fb and, because P(b) = "yes" and the output of P(x) depends only on Fx, it follows that P(t) = "yes" and, therefore H(a, i) = "yes".
Assume that the algorithm represented by a does not halt on input i. In this case Ft = Fno-halt, i.e., the partial function that is never defined. Since P(no-halt) = "no" and the output of P(x) depends only on Fx, it follows that P(t) = "no" and, therefore H(a, i) = "no".Since the halting problem is known to be undecidable, this is a contradiction and the assumption that there is an algorithm P(a) that decides a non-trivial property for the function represented by a must be false.

Rice's theorem and index sets
Rice's theorem can be succinctly stated in terms of index sets:

Let 
  
    
      
        
          
            C
          
        
      
    
    {\displaystyle {\mathcal {C}}}
   be a class of partial recursive functions with index set 
  
    
      
        C
      
    
    {\displaystyle C}
  .  Then 
  
    
      
        C
      
    
    {\displaystyle C}
   is recursive if and only if 
  
    
      
        C
        =
        ∅
      
    
    {\displaystyle C=\varnothing }
   or 
  
    
      
        C
        =
        
          N
        
      
    
    {\displaystyle C=\mathbb {N} }
  .

Here 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
   is the set of natural numbers, including zero.

An analogue of Rice's theorem for recursive sets
One can regard Rice's theorem as asserting the impossibility of effectively deciding for any recursively enumerable set whether it has a certain nontrivial property. In this section, we give an analogue of Rice's theorem for recursive sets, instead of recursively enumerable sets. Roughly speaking, the analogue says that if one can effectively determine for every recursive set whether it has a certain property, then only finitely many integers determine whether a recursive set has the property. This result is analogous to the original theorem of Rice, because both results assert that a property is "decidable" only if one can determine whether a set has that property by examining for at most finitely many 
  
    
      
        i
      
    
    {\displaystyle i}
   (for no 
  
    
      
        i
      
    
    {\displaystyle i}
  , for the original theorem), if 
  
    
      
        i
      
    
    {\displaystyle i}
   belongs to the set.
Let 
  
    
      
        W
      
    
    {\displaystyle W}
   be a class (called a simple game and thought of as a property) of recursive sets. If 
  
    
      
        S
      
    
    {\displaystyle S}
   is a recursive set, then for some 
  
    
      
        e
      
    
    {\displaystyle e}
  , computable function 
  
    
      
        
          ϕ
          
            e
          
        
      
    
    {\displaystyle \phi _{e}}
   is the characteristic function of 
  
    
      
        S
      
    
    {\displaystyle S}
  .  We call 
  
    
      
        e
      
    
    {\displaystyle e}
   a characteristic index for 
  
    
      
        S
      
    
    {\displaystyle S}
  . (There are infinitely many such 
  
    
      
        e
      
    
    {\displaystyle e}
  .) Let's say the class 
  
    
      
        W
      
    
    {\displaystyle W}
   is computable if there is an algorithm (computable function) that decides
for any nonnegative integer 
  
    
      
        e
      
    
    {\displaystyle e}
   (not necessarily a characteristic index),

if 
  
    
      
        e
      
    
    {\displaystyle e}
   is a characteristic index for a recursive set belonging to  
  
    
      
        W
      
    
    {\displaystyle W}
  , then the algorithm gives "yes";
if 
  
    
      
        e
      
    
    {\displaystyle e}
   is a characteristic index for a recursive set not belonging to 
  
    
      
        W
      
    
    {\displaystyle W}
  , then the algorithm gives "no".A set 
  
    
      
        S
        ⊆
        
          N
        
      
    
    {\displaystyle S\subseteq \mathbb {N} }
   extends a string 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   of 0's and 1's if for every 
  
    
      
        k
        <
        
          |
        
        τ
        
          |
        
      
    
    {\displaystyle k<|\tau |}
   (the length of 
  
    
      
        τ
      
    
    {\displaystyle \tau }
  ), the 
  
    
      
        k
      
    
    {\displaystyle k}
  th element of 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   is 1 if 
  
    
      
        k
        ∈
        S
      
    
    {\displaystyle k\in S}
  ; and is 0 otherwise. For example, 
  
    
      
        S
        =
        {
        1
        ,
        3
        ,
        4
        ,
        7
        ,
        …
        }
      
    
    {\displaystyle S=\{1,3,4,7,\ldots \}}
   extends the string 
  
    
      
        01011001
      
    
    {\displaystyle 01011001}
  . A string 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   is winning determining if every recursive set extending 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   belongs to 
  
    
      
        W
      
    
    {\displaystyle W}
  . A string 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   is losing determining if no recursive set extending 
  
    
      
        τ
      
    
    {\displaystyle \tau }
   belongs to 
  
    
      
        W
      
    
    {\displaystyle W}
  .
We can now state the following analogue of Rice's theorem:A class 
  
    
      
        W
      
    
    {\displaystyle W}
   of recursive sets is computable if and only if there are a recursively enumerable set 
  
    
      
        
          T
          
            0
          
        
      
    
    {\displaystyle T_{0}}
   of losing determining strings and a recursively enumerable set 
  
    
      
        
          T
          
            1
          
        
      
    
    {\displaystyle T_{1}}
   of winning determining strings such that every recursive set extends a string in 
  
    
      
        
          T
          
            0
          
        
        ∪
        
          T
          
            1
          
        
      
    
    {\displaystyle T_{0}\cup T_{1}}
  .
This result has been applied to foundational problems in computational social choice (more broadly, algorithmic game theory). For instance, Kumabe and Mihara apply this result to an investigation of the Nakamura numbers for simple games in cooperative game theory and social choice theory.

See also
Gödel's incompleteness theorems
Halting problem
Recursion theory
Rice–Shapiro theorem
Scott–Curry theorem, an analogue to Rice's theorem in lambda calculus
Turing's proof
Wittgenstein on Rules and Private Language

Notes
References
Hopcroft, John E.; Ullman, Jeffrey D. (1979), Introduction to Automata Theory, Languages, and Computation, Addison-Wesley, pp. 185–192
Rice, H. G. (1953), "Classes of recursively enumerable sets and their decision problems", Transactions of the American Mathematical Society, 74 (2): 358–366, doi:10.1090/s0002-9947-1953-0053041-6, JSTOR 1990888
Rogers, Hartley Jr. (1987), Theory of Recursive Functions and Effective Computability (2nd ed.), McGraw-Hill, §14.8