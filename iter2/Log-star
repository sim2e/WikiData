In computer science, the iterated logarithm of 
  
    
      
        n
      
    
    {\displaystyle n}
  , written log* 
  
    
      
        n
      
    
    {\displaystyle n}
   (usually read "log star"), is the number of times the logarithm function must be  iteratively applied before the result is less than or equal to 
  
    
      
        1
      
    
    {\displaystyle 1}
  . The simplest formal definition is the result of this recurrence relation:

  
    
      
        
          log
          
            ∗
          
        
        ⁡
        n
        :=
        
          
            {
            
              
                
                  0
                
                
                  
                    
                      if 
                    
                  
                  n
                  ≤
                  1
                  ;
                
              
              
                
                  1
                  +
                  
                    log
                    
                      ∗
                    
                  
                  ⁡
                  (
                  log
                  ⁡
                  n
                  )
                
                
                  
                    
                      if 
                    
                  
                  n
                  >
                  1
                
              
            
            
          
        
      
    
    {\displaystyle \log ^{*}n:={\begin{cases}0&{\mbox{if }}n\leq 1;\\1+\log ^{*}(\log n)&{\mbox{if }}n>1\end{cases}}}
  On the positive real numbers, the continuous super-logarithm (inverse tetration) is essentially equivalent:

  
    
      
        
          log
          
            ∗
          
        
        ⁡
        n
        =
        ⌈
        
          
            s
            l
            o
            g
          
          
            e
          
        
        (
        n
        )
        ⌉
      
    
    {\displaystyle \log ^{*}n=\lceil \mathrm {slog} _{e}(n)\rceil }
  
i.e. the base b iterated logarithm is 
  
    
      
        
          log
          
            ∗
          
        
        ⁡
        n
        =
        y
      
    
    {\displaystyle \log ^{*}n=y}
   if n lies within the interval 
  
    
      
        
          
          
            y
            −
            1
          
        
        b
        <
        n
        ≤
        
           
          
            y
          
        
        b
      
    
    {\displaystyle ^{y-1}b<n\leq \ ^{y}b}
  , where 
  
    
      
        
          
            
            
              y
            
          
          b
        
        =
        
          
            
              
                b
                
                  
                    b
                    
                      
                        ⋅
                        
                          
                            ⋅
                            
                              b
                            
                          
                        
                      
                    
                  
                
              
              ⏟
            
          
          
            y
          
        
      
    
    {\displaystyle {^{y}b}=\underbrace {b^{b^{\cdot ^{\cdot ^{b}}}}} _{y}}
  denotes tetration. However, on the negative real numbers, log-star is 
  
    
      
        0
      
    
    {\displaystyle 0}
  , whereas 
  
    
      
        ⌈
        
          
            slog
          
          
            e
          
        
        (
        −
        x
        )
        ⌉
        =
        −
        1
      
    
    {\displaystyle \lceil {\text{slog}}_{e}(-x)\rceil =-1}
   for positive 
  
    
      
        x
      
    
    {\displaystyle x}
  , so the two functions differ for negative arguments.The iterated logarithm accepts any positive real number and yields an integer. Graphically, it can be understood as the number of "zig-zags" needed in Figure 1 to reach the interval 
  
    
      
        [
        0
        ,
        1
        ]
      
    
    {\displaystyle [0,1]}
   on the x-axis.
In computer science, lg* is often used to indicate the binary iterated logarithm, which iterates the binary logarithm (with base 
  
    
      
        2
      
    
    {\displaystyle 2}
  ) instead of the natural logarithm (with base e).
Mathematically, the iterated logarithm is well-defined for any base greater than 
  
    
      
        
          e
          
            1
            
              /
            
            e
          
        
        ≈
        1.444667
      
    
    {\displaystyle e^{1/e}\approx 1.444667}
  , not only for base 
  
    
      
        2
      
    
    {\displaystyle 2}
   and base e.

Analysis of algorithms
The iterated logarithm is useful in analysis of algorithms and computational complexity, appearing in the time and space complexity bounds of some algorithms such as:

Finding the Delaunay triangulation of a set of points knowing the Euclidean minimum spanning tree: randomized O(n log* n) time.
Fürer's algorithm for integer multiplication: O(n log n 2O(lg* n)).
Finding an approximate maximum (element at least as large as the median): lg* n − 4 to lg* n + 2 parallel operations.
Richard Cole and Uzi Vishkin's distributed algorithm for 3-coloring an n-cycle: O(log* n) synchronous communication rounds.The iterated logarithm grows at an extremely slow rate, much slower than the logarithm itself. For all values of n relevant to counting the running times of algorithms implemented in practice (i.e., n ≤ 265536, which is far more than the estimated number of atoms in the known universe), the iterated logarithm with base 2 has a value no more than 5.

Higher bases give smaller iterated logarithms. Indeed, the only function commonly used in complexity theory that grows more slowly is the inverse Ackermann function.

Other applications
The iterated logarithm is closely related to the generalized logarithm function used in symmetric level-index arithmetic. The additive persistence of a number, the number of times someone must replace the number by the sum of its digits before reaching its digital root, is 
  
    
      
        O
        (
        
          log
          
            ∗
          
        
        ⁡
        n
        )
      
    
    {\displaystyle O(\log ^{*}n)}
  .
In computational complexity theory, Santhanam shows that the computational resources DTIME — computation time for a deterministic Turing machine — and NTIME — computation time for a non-deterministic Turing machine — are distinct up to 
  
    
      
        n
        
          
            
              log
              
                ∗
              
            
            ⁡
            n
          
        
        .
      
    
    {\displaystyle n{\sqrt {\log ^{*}n}}.}
  


== References ==