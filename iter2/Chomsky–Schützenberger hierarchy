The Chomsky hierarchy (infrequently referred to as the Chomsky–Schützenberger hierarchy) in the fields of formal language theory, computer science, and linguistics, is a containment hierarchy of classes of formal grammars. A formal grammar describes how to form strings from a language's vocabulary (or alphabet) that are valid according to the language's syntax. Linguist Noam Chomsky theorized that four different classes of formal grammars existed that could generate increasingly complex languages. Each class can also completely generate the language of all inferior classes.

History
The general idea of a hierarchy of grammars was first described by linguist Noam Chomsky in "Three models for the description of language". Marcel-Paul Schützenberger also played a role in the development of the theory of formal languages; the paper "The algebraic theory of context free languages" describes the modern hierarchy including context-free grammars.Independently and alongside linguists, mathematicians were developing computation models (automata). Parsing a sentence in a language is similar to computation, and the grammars described by Chomsky proved to both resemble and be equivalent in computational power to various machine models.

The hierarchy
The following table summarizes each of Chomsky's four types of grammars, the class of language it generates, the type of automaton that recognizes it, and the form its rules must have.

Note that the set of grammars corresponding to recursive languages is not a member of this hierarchy; these would be properly between Type-0 and Type-1.
Every regular language is context-free, every context-free language is context-sensitive, every context-sensitive language is recursive and every recursive language is recursively enumerable. These are all proper inclusions, meaning that there exist recursively enumerable languages that are not context-sensitive, context-sensitive languages that are not context-free and context-free languages that are not regular.

Regular (Type-3) grammars
Type-3 grammars generate the regular languages. Such a grammar restricts its rules to a single nonterminal on the left-hand side and a right-hand side consisting of a single terminal, possibly followed by a single nonterminal (right regular). Alternatively, the right-hand side of the grammar can consist of a single terminal, possibly preceded by a single nonterminal (left regular). These generate the same languages. However, if left-regular rules and right-regular rules are combined, the language need no longer be regular. The rule 
  
    
      
        S
        →
        ε
      
    
    {\displaystyle S\rightarrow \varepsilon }
   is also allowed here if 
  
    
      
        S
      
    
    {\displaystyle S}
   does not appear on the right side of any rule. These languages are exactly all languages that can be decided by a finite state automaton. Additionally, this family of formal languages can be obtained by regular expressions. Regular languages are commonly used to define search patterns and the lexical structure of programming languages.

Context-free (Type-2) grammars
Type-2 grammars generate the context-free languages. These are defined by rules of the form 
  
    
      
        A
        →
        α
      
    
    {\displaystyle A\rightarrow \alpha }
   with 
  
    
      
        A
      
    
    {\displaystyle A}
   being a nonterminal and 
  
    
      
        α
      
    
    {\displaystyle \alpha }
   being a string of terminals and/or nonterminals. These languages are exactly all languages that can be recognized by a non-deterministic pushdown automaton. Context-free languages—or rather its subset of deterministic context-free language—are the theoretical basis for the phrase structure of most programming languages, though their syntax also includes context-sensitive name resolution due to declarations and scope. Often a subset of grammars is used to make parsing easier, such as by an LL parser.
For example, the grammar 
  
    
      
        G
        =
        (
        {
        S
        }
        ,
        {
        a
        ,
        b
        }
        ,
        P
        ,
        S
        )
      
    
    {\displaystyle G=(\{S\},\{a,b\},P,S)}
   with the following productions is context-free but not regular (by the pumping lemma).

S → aSb,
S → ab

Context-sensitive (Type-1) grammars
Type-1 grammars generate context-sensitive languages. These grammars have rules of the form 
  
    
      
        α
        A
        β
        →
        α
        γ
        β
      
    
    {\displaystyle \alpha A\beta \rightarrow \alpha \gamma \beta }
   with 
  
    
      
        A
      
    
    {\displaystyle A}
   a nonterminal and 
  
    
      
        α
      
    
    {\displaystyle \alpha }
  , 
  
    
      
        β
      
    
    {\displaystyle \beta }
   and 
  
    
      
        γ
      
    
    {\displaystyle \gamma }
   strings of terminals and/or nonterminals. The strings 
  
    
      
        α
      
    
    {\displaystyle \alpha }
   and 
  
    
      
        β
      
    
    {\displaystyle \beta }
   may be empty, but 
  
    
      
        γ
      
    
    {\displaystyle \gamma }
   must be nonempty.  The rule 
  
    
      
        S
        →
        ϵ
      
    
    {\displaystyle S\rightarrow \epsilon }
   is allowed if 
  
    
      
        S
      
    
    {\displaystyle S}
   does not appear on the right side of any rule.  The languages described by these grammars are exactly all languages that can be recognized by a linear bounded automaton (a nondeterministic Turing machine whose tape is bounded by a constant times the length of the input.)

Recursively enumerable (Type-0) grammars
Type-0 grammars include all formal grammars. They generate exactly all languages that can be recognized by a Turing machine. These languages are also known as the recursively enumerable or Turing-recognizable languages. Note that this is different from the recursive languages, which can be decided by an always-halting Turing machine.

See also
Chomsky normal form

Citations


== References ==