In computer science, compile time (or compile-time) describes the time window during which a language's statements are converted into binary instructions for the processor to execute.
The term is used as an adjective to describe concepts related to the context of program compilation, as opposed to concepts related to the context of program execution (runtime).
For example, compile-time requirements are programming language requirements that must be met by source code before compilation and compile-time properties are properties of the program that can be reasoned about during compilation.
The actual length of time it takes to compile a program is usually referred to as compilation time.

Compile time/Early binding vs Run time
The determination of execution model have been set during the compile time stage.
Run time- the method of execution and allocation - have been set during the run time and are based on the run time dynamicity.

Overview
Most compilers have at least the following compiler phases (which therefore occur at compile-time): syntax analysis, semantic analysis, and code generation.
During optimization phases, constant expressions in the source code can also be evaluated at compile-time using compile-time execution, which reduces the constant expressions to a single value.
This is not necessary for correctness, but improves program performance during runtime.
Programming language definitions usually specify compile time requirements that source code must meet to be successfully compiled.
For example, languages may stipulate that the amount of storage required by types and variables can be deduced.
Properties of a program that can be reasoned about at compile time include range-checks  (e.g.,  proving that an array index will not exceed the array bounds), deadlock freedom in concurrent languages, or timings  (e.g., proving that a sequence of code takes no more than an allocated amount of time).
Compile-time occurs before link time (when the output of one or more compiled files are joined) and runtime (when a program is executed).
Although in the case of dynamic compilation, the final transformations into machine language happen at runtime.
There is a trade-off between compile-time and link-time in that many compile time operations can be deferred to link-time without incurring run-time cost.

See also
Link time
Run time (program lifecycle phase)
Compiling
Type system
Dynamic compilation
Just in time compilation


== References ==