In mathematical logic, second-order arithmetic is a collection of axiomatic systems that formalize the natural numbers and their subsets. It is an alternative to axiomatic set theory as a foundation for much, but not all, of mathematics.
A precursor to second-order arithmetic that involves third-order parameters was introduced by David Hilbert and Paul Bernays in their book Grundlagen der Mathematik. The standard axiomatization of second-order arithmetic is denoted by Z2.
Second-order arithmetic includes, but is significantly stronger than, its first-order counterpart Peano arithmetic. Unlike Peano arithmetic, second-order arithmetic allows quantification over sets of natural numbers as well as numbers themselves. Because real numbers can be represented as (infinite) sets of natural numbers in well-known ways, and because second-order arithmetic allows quantification over such sets, it is possible to formalize the real numbers in second-order arithmetic. For this reason, second-order arithmetic is sometimes called "analysis".Second-order arithmetic can also be seen as a weak version of set theory in which every element is either a natural number or a set of natural numbers. Although it is much weaker than Zermelo–Fraenkel set theory, second-order arithmetic can prove essentially all of the results of classical mathematics expressible in its language.
A subsystem of second-order arithmetic is a theory in the language of second-order arithmetic each axiom of which is a theorem of full second-order arithmetic (Z2). Such subsystems are essential to reverse mathematics, a research program investigating how much of classical mathematics can be derived in certain weak subsystems of varying strength. Much of core mathematics can be formalized in these weak subsystems, some of which are defined below. Reverse mathematics also clarifies the extent and manner in which classical mathematics is nonconstructive.

Definition
Syntax
The language of second-order arithmetic is two-sorted. The first sort of terms and in particular variables, usually denoted by lower case letters, consists of individuals, whose intended interpretation is as natural numbers. The other sort of variables, variously called "set variables", "class variables", or even "predicates" are usually denoted by upper-case letters. They refer to classes/predicates/properties of individuals, and so can be thought of as sets of natural numbers. Both individuals and set variables can be quantified universally or existentially. A formula with no bound set variables (that is, no quantifiers over set variables) is called arithmetical. An arithmetical formula may have free set variables and bound individual variables.
Individual terms are formed from the constant 0, the unary function S (the successor function), and the binary operations + and 
  
    
      
        ⋅
      
    
    {\displaystyle \cdot }
   (addition and multiplication). The successor function adds 1 to its input. The relations = (equality) and < (comparison of natural numbers) relate two individuals, whereas the relation ∈ (membership) relates an individual and a set (or class). Thus in notation the language of second-order arithmetic is given by the signature 
  
    
      
        
          
            L
          
        
        =
        {
        0
        ,
        S
        ,
        +
        ,
        ⋅
        ,
        =
        ,
        <
        ,
        ∈
        }
      
    
    {\displaystyle {\mathcal {L}}=\{0,S,+,\cdot ,=,<,\in \}}
  .
For example, 
  
    
      
        ∀
        n
        (
        n
        ∈
        X
        →
        S
        n
        ∈
        X
        )
      
    
    {\displaystyle \forall n(n\in X\rightarrow Sn\in X)}
  , is a well-formed formula of second-order arithmetic that is arithmetical, has one free set variable X and one bound individual variable n (but no bound set variables, as is required of an arithmetical formula)—whereas 
  
    
      
        ∃
        X
        ∀
        n
        (
        n
        ∈
        X
        ↔
        n
        <
        S
        S
        S
        S
        S
        S
        0
        ⋅
        S
        S
        S
        S
        S
        S
        S
        0
        )
      
    
    {\displaystyle \exists X\forall n(n\in X\leftrightarrow n<SSSSSS0\cdot SSSSSSS0)}
   is a well-formed formula that is not arithmetical, having one bound set variable X and one bound individual variable n.

Semantics
Several different interpretations of the quantifiers are possible. If second-order arithmetic is studied using the full semantics of second-order logic then the set quantifiers range over all subsets of the range of the individual variables. If second-order arithmetic is formalized using the semantics of first-order logic (Henkin semantics) then any model includes a domain for the set variables to range over, and this domain may be a proper subset of the full powerset of the domain of individual variables

Axioms
Basic
The following axioms are known as the basic axioms, or sometimes the Robinson axioms. The resulting first-order theory, known as Robinson arithmetic, is essentially Peano arithmetic without induction. The domain of discourse for the quantified variables is the natural numbers, collectively denoted by N, and including the distinguished member 
  
    
      
        0
      
    
    {\displaystyle 0}
  , called "zero."
The primitive functions are the unary successor function, denoted by prefix 
  
    
      
        S
      
    
    {\displaystyle S}
  , and two binary operations, addition and multiplication, denoted by the infix operator "+" and "
  
    
      
        ⋅
      
    
    {\displaystyle \cdot }
  ", respectively. There is also a primitive binary relation called order, denoted by the infix operator "<".
Axioms governing the successor function and zero:

1. 
  
    
      
        ∀
        m
        [
        S
        m
        =
        0
        →
        ⊥
        ]
        .
      
    
    {\displaystyle \forall m[Sm=0\rightarrow \bot ].}
   ("the successor of a natural number is never zero")
2. 
  
    
      
        ∀
        m
        ∀
        n
        [
        S
        m
        =
        S
        n
        →
        m
        =
        n
        ]
        .
      
    
    {\displaystyle \forall m\forall n[Sm=Sn\rightarrow m=n].}
   ("the successor function is injective")
3. 
  
    
      
        ∀
        n
        [
        0
        =
        n
        ∨
        ∃
        m
        [
        S
        m
        =
        n
        ]
        ]
        .
      
    
    {\displaystyle \forall n[0=n\lor \exists m[Sm=n]].}
   ("every natural number is zero or a successor")Addition defined recursively:

4. 
  
    
      
        ∀
        m
        [
        m
        +
        0
        =
        m
        ]
        .
      
    
    {\displaystyle \forall m[m+0=m].}
  
5. 
  
    
      
        ∀
        m
        ∀
        n
        [
        m
        +
        S
        n
        =
        S
        (
        m
        +
        n
        )
        ]
        .
      
    
    {\displaystyle \forall m\forall n[m+Sn=S(m+n)].}
  Multiplication defined recursively:

6. 
  
    
      
        ∀
        m
        [
        m
        ⋅
        0
        =
        0
        ]
        .
      
    
    {\displaystyle \forall m[m\cdot 0=0].}
  
7. 
  
    
      
        ∀
        m
        ∀
        n
        [
        m
        ⋅
        S
        n
        =
        (
        m
        ⋅
        n
        )
        +
        m
        ]
        .
      
    
    {\displaystyle \forall m\forall n[m\cdot Sn=(m\cdot n)+m].}
  Axioms governing the order relation "<":

8. 
  
    
      
        ∀
        m
        [
        m
        <
        0
        →
        ⊥
        ]
        .
      
    
    {\displaystyle \forall m[m<0\rightarrow \bot ].}
   ("no natural number is smaller than zero")
9. 
  
    
      
        ∀
        n
        ∀
        m
        [
        m
        <
        S
        n
        ↔
        (
        m
        <
        n
        ∨
        m
        =
        n
        )
        ]
        .
      
    
    {\displaystyle \forall n\forall m[m<Sn\leftrightarrow (m<n\lor m=n)].}
  
10. 
  
    
      
        ∀
        n
        [
        0
        =
        n
        ∨
        0
        <
        n
        ]
        .
      
    
    {\displaystyle \forall n[0=n\lor 0<n].}
   ("every natural number is zero or bigger than zero")
11. 
  
    
      
        ∀
        m
        ∀
        n
        [
        (
        S
        m
        <
        n
        ∨
        S
        m
        =
        n
        )
        ↔
        m
        <
        n
        ]
        .
      
    
    {\displaystyle \forall m\forall n[(Sm<n\lor Sm=n)\leftrightarrow m<n].}
  These axioms are all first-order statements. That is, all variables range over the natural numbers and not sets thereof, a fact even stronger than their being arithmetical. Moreover, there is but one existential quantifier, in Axiom 3. Axioms 1 and 2, together with an axiom schema of induction make up the usual Peano–Dedekind definition of N. Adding to these axioms any sort of axiom schema of induction makes redundant the axioms 3, 10, and 11.

Induction and comprehension schema
If φ(n) is a formula of second-order arithmetic with a free individual variable n and possibly other free individual or set variables (written m1,...,mk and X1,...,Xl), the induction axiom for φ is the axiom:

  
    
      
        ∀
        
          m
          
            1
          
        
        …
        
          m
          
            k
          
        
        ∀
        
          X
          
            1
          
        
        …
        
          X
          
            l
          
        
        (
        (
        φ
        (
        0
        )
        ∧
        ∀
        n
        (
        φ
        (
        n
        )
        →
        φ
        (
        S
        n
        )
        )
        )
        →
        ∀
        n
        φ
        (
        n
        )
        )
      
    
    {\displaystyle \forall m_{1}\dots m_{k}\forall X_{1}\dots X_{l}((\varphi (0)\land \forall n(\varphi (n)\rightarrow \varphi (Sn)))\rightarrow \forall n\varphi (n))}
  The (full) second-order induction scheme consists of all instances of this axiom, over all second-order formulas.
One particularly important instance of the induction scheme is when φ is the formula "
  
    
      
        n
        ∈
        X
      
    
    {\displaystyle n\in X}
  " expressing the fact that n is a member of X (X being a free set variable): in this case, the induction axiom for φ is

  
    
      
        ∀
        X
        (
        (
        0
        ∈
        X
        ∧
        ∀
        n
        (
        n
        ∈
        X
        →
        S
        n
        ∈
        X
        )
        )
        →
        ∀
        n
        (
        n
        ∈
        X
        )
        )
      
    
    {\displaystyle \forall X((0\in X\land \forall n(n\in X\rightarrow Sn\in X))\rightarrow \forall n(n\in X))}
  This sentence is called the second-order induction axiom.
If φ(n) is a formula with a free variable n and possibly other free variables, but not the variable Z, the comprehension axiom for φ is the formula

  
    
      
        ∃
        Z
        ∀
        n
        (
        n
        ∈
        Z
        ↔
        φ
        (
        n
        )
        )
      
    
    {\displaystyle \exists Z\forall n(n\in Z\leftrightarrow \varphi (n))}
  This axiom makes it possible to form the set 
  
    
      
        Z
        =
        {
        n
        
          |
        
        φ
        (
        n
        )
        }
      
    
    {\displaystyle Z=\{n|\varphi (n)\}}
   of natural numbers satisfying φ(n). There is a technical restriction that the formula φ may not contain the variable Z, for otherwise the formula 
  
    
      
        n
        ∉
        Z
      
    
    {\displaystyle n\not \in Z}
   would lead to the comprehension axiom

  
    
      
        ∃
        Z
        ∀
        n
        (
        n
        ∈
        Z
        ↔
        n
        ∉
        Z
        )
      
    
    {\displaystyle \exists Z\forall n(n\in Z\leftrightarrow n\not \in Z)}
  ,which is inconsistent. This convention is assumed in the remainder of this article.

The full system
The formal theory of second-order arithmetic (in the language of second-order arithmetic) consists of the basic axioms, the comprehension axiom for every formula φ (arithmetic or otherwise), and the second-order induction axiom. This theory is sometimes called full second-order arithmetic to distinguish it from its subsystems, defined below. Because full second-order semantics imply that every possible set exists, the comprehension axioms may be taken to be part of the deductive system when full second-order semantics is employed.

Models
This section describes second-order arithmetic with first-order semantics. Thus a model 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   of the language of second-order arithmetic consists of a set M (which forms the range of individual variables) together with a constant 0 (an element of M), a function S from M to M, two binary operations + and · on M, a binary relation < on M, and a collection D of subsets of M, which is the range of the set variables. Omitting D produces a model of the language of first-order arithmetic.
When D is the full powerset of M, the model 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   is called a full model. The use of full second-order semantics is equivalent to limiting the models of second-order arithmetic to the full models. In fact, the axioms of second-order arithmetic have only one full model. This follows from the fact that the Peano axioms with the second-order induction axiom have only one model under second-order semantics.

Definable functions
The first-order functions that are provably total in second-order arithmetic are precisely the same as those representable in system F. Almost equivalently, system F is the theory of functionals corresponding to second-order arithmetic in a manner parallel to how Gödel's system T corresponds to first-order arithmetic in the Dialectica interpretation.

More types of models
When a model of the language of second-order arithmetic has certain properties, it can also be called these other names:

When M is the usual set of natural numbers with its usual operations, 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   is called an ω-model. In this case, the model may be identified with D, its collection of sets of naturals, because this set is enough to completely determine an ω-model. The unique full 
  
    
      
        ω
      
    
    {\displaystyle \omega }
  -model, which is the usual set of natural numbers with its usual structure and all its subsets, is called the intended or standard model of second-order arithmetic.
A model 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   of the language of second-order arithmetic is called a β-model if 
  
    
      
        
          
            M
          
        
        
          ≺
          
            1
          
          
            1
          
        
        
          
            P
          
        
        (
        ω
        )
      
    
    {\displaystyle {\mathcal {M}}\prec _{1}^{1}{\mathcal {P}}(\omega )}
  , i.e. the Σ11-statements with parameters from 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   that are satisfied by 
  
    
      
        
          
            M
          
        
      
    
    {\displaystyle {\mathcal {M}}}
   are the same as those satisfied by the full model. Some notions that are absolute with respect to β-models include "
  
    
      
        A
        ⊆
        ω
        ×
        ω
      
    
    {\displaystyle A\subseteq \omega \times \omega }
   encodes a well-order" and "
  
    
      
        A
        ⊆
        ω
        ×
        ω
      
    
    {\displaystyle A\subseteq \omega \times \omega }
   is a tree".
The above result has been extended to the concept of a βn-model for 
  
    
      
        n
        ∈
        
          N
        
      
    
    {\displaystyle n\in \mathbb {N} }
  , which has the same definition as the above except 
  
    
      
        
          ≺
          
            1
          
          
            1
          
        
      
    
    {\displaystyle \prec _{1}^{1}}
   is replaced by 
  
    
      
        
          ≺
          
            n
          
          
            1
          
        
      
    
    {\displaystyle \prec _{n}^{1}}
  , i.e. 
  
    
      
        
          Σ
          
            1
          
          
            1
          
        
      
    
    {\displaystyle \Sigma _{1}^{1}}
   is replaced by 
  
    
      
        
          Σ
          
            n
          
          
            1
          
        
      
    
    {\displaystyle \Sigma _{n}^{1}}
  . Using this definition β0-models are the same as ω-models.

Subsystems
There are many named subsystems of second-order arithmetic.
A subscript 0 in the name of a subsystem indicates that it includes only
a restricted portion of the full second-order induction scheme. Such a restriction lowers the proof-theoretic strength of the system significantly. For example, the system ACA0 described below is equiconsistent with Peano arithmetic. The corresponding theory ACA, consisting of ACA0 plus the full second-order induction scheme, is stronger than Peano arithmetic.

Arithmetical comprehension
Many of the well-studied subsystems are related to closure properties of models. For example, it can be shown that every ω-model of full second-order arithmetic is closed under Turing jump, but not every ω-model closed under Turing jump is a model of full second-order arithmetic. The subsystem ACA0 includes just enough axioms to capture the notion of closure under Turing jump.
ACA0 is defined as the theory consisting of the basic axioms, the arithmetical comprehension axiom scheme (in other words the comprehension axiom for every arithmetical formula φ) and the ordinary second-order induction axiom. It would be equivalent to also include the entire arithmetical induction axiom scheme, in other words to include the induction axiom for every arithmetical formula φ.
It can be shown that a collection S of subsets of ω determines an ω-model of ACA0 if and only if S is closed under Turing jump, Turing reducibility, and Turing join.The subscript 0 in ACA0 indicates that not every instance of the induction axiom scheme is included this subsystem. This makes no difference for ω-models, which automatically satisfy every instance of the induction axiom. It is of importance, however, in the study of non-ω-models. The system consisting of ACA0 plus induction for all formulas is sometimes called ACA with no subscript.
The system ACA0 is a conservative extension of first-order arithmetic (or first-order Peano axioms), defined as the basic axioms, plus the first-order induction axiom scheme (for all formulas φ involving no class variables at all, bound or otherwise), in the language of first-order arithmetic (which does not permit class variables at all). In particular it has the same proof-theoretic ordinal ε0 as first-order arithmetic, owing to the limited induction schema.

The arithmetical hierarchy for formulas
A formula is called bounded arithmetical, or Δ00, when all its quantifiers are of the form ∀n<t or ∃n<t (where n is the individual variable being quantified and t is an individual term), where

  
    
      
        ∀
        n
        <
        t
        (
        ⋯
        )
      
    
    {\displaystyle \forall n<t(\cdots )}
  stands for

  
    
      
        ∀
        n
        (
        n
        <
        t
        →
        ⋯
        )
      
    
    {\displaystyle \forall n(n<t\rightarrow \cdots )}
  and

  
    
      
        ∃
        n
        <
        t
        (
        ⋯
        )
      
    
    {\displaystyle \exists n<t(\cdots )}
  stands for

  
    
      
        ∃
        n
        (
        n
        <
        t
        ∧
        ⋯
        )
      
    
    {\displaystyle \exists n(n<t\land \cdots )}
  .A formula is called Σ01 (or sometimes Σ1), respectively Π01 (or sometimes Π1) when it is of the form ∃mφ, respectively ∀mφ where φ is a bounded arithmetical formula and m is an individual variable (that is free in φ). More generally, a formula is called Σ0n, respectively Π0n when it is obtained by adding existential, respectively universal, individual quantifiers to a Π0n−1, respectively Σ0n−1 formula (and Σ00 and Π00 are both equal to Δ00). By construction, all these formulas are arithmetical (no class variables are ever bound) and, in fact, by putting the formula in Skolem prenex form one can see that every arithmetical formula is logically equivalent to a Σ0n or Π0n formula for all large enough n.

Recursive comprehension
The subsystem RCA0 is a weaker system than ACA0 and is often used as the base system in reverse mathematics. It consists of: the basic axioms, the Σ01 induction scheme, and the Δ01 comprehension scheme. The former term is clear: the Σ01 induction scheme is the induction axiom for every Σ01 formula φ. The term "Δ01 comprehension" is more complex, because there is no such thing as a Δ01 formula. The Δ01 comprehension scheme instead asserts the comprehension axiom for every Σ01 formula that is logically equivalent to a Π01 formula. This scheme includes, for every Σ01 formula φ and every Π01 formula ψ, the axiom:

  
    
      
        ∀
        m
        ∀
        X
        (
        (
        ∀
        n
        (
        φ
        (
        n
        )
        ↔
        ψ
        (
        n
        )
        )
        )
        →
        ∃
        Z
        ∀
        n
        (
        n
        ∈
        Z
        ↔
        φ
        (
        n
        )
        )
        )
      
    
    {\displaystyle \forall m\forall X((\forall n(\varphi (n)\leftrightarrow \psi (n)))\rightarrow \exists Z\forall n(n\in Z\leftrightarrow \varphi (n)))}
  The set of first-order consequences of RCA0 is the same as those of the subsystem IΣ1 of Peano arithmetic in which induction is restricted to Σ01 formulas. In turn, IΣ1 is conservative over primitive recursive arithmetic (PRA) for 
  
    
      
        
          Π
          
            2
          
          
            0
          
        
      
    
    {\displaystyle \Pi _{2}^{0}}
   sentences. Moreover, the proof-theoretic ordinal of 
  
    
      
        
          
            R
            C
            A
          
          
            0
          
        
      
    
    {\displaystyle \mathrm {RCA} _{0}}
   is ωω, the same as that of PRA.
It can be seen that a collection S of subsets of ω determines an ω-model of RCA0 if and only if S is closed under Turing reducibility and Turing join. In particular, the collection of all computable subsets of ω gives an ω-model of RCA0. This is the motivation behind the name of this system—if a set can be proved to exist using RCA0, then the set is recursive (i.e. computable).

Weaker systems
Sometimes an even weaker system than RCA0 is desired. One such system is defined as follows: one must first augment the language of arithmetic with an exponential function symbol (in stronger systems the exponential can be defined in terms of addition and multiplication by the usual trick, but when the system becomes too weak this is no longer possible) and the basic axioms by the obvious axioms defining exponentiation inductively from multiplication; then the system consists of the (enriched) basic axioms, plus Δ01 comprehension, plus Δ00 induction.

Stronger systems
Over ACA0, each formula of second-order arithmetic is equivalent to a Σ1n or Π1n formula for all large enough n. The system Π11-comprehension is the system consisting of the basic axioms, plus the ordinary second-order induction axiom and the comprehension axiom for every (boldface) Π11 formula φ. This is equivalent to Σ11-comprehension (on the other hand, Δ11-comprehension, defined analogously to Δ01-comprehension, is weaker).

Projective determinacy
Projective determinacy is the assertion that every two-player perfect information game with moves being natural numbers, game length ω and projective payoff set is determined, that is, one of the players has a winning strategy. (The first player wins the game if the play belongs to the payoff set; otherwise, the second player wins.) A set is projective if and only if (as a predicate) it is expressible by a formula in the language of second-order arithmetic, allowing real numbers as parameters, so projective determinacy is expressible as a schema in the language of Z2.
Many natural propositions expressible in the language of second-order arithmetic are independent of Z2 and even ZFC but are provable from projective determinacy. Examples include coanalytic perfect subset property, measurability and the property of Baire for 
  
    
      
        
          Σ
          
            2
          
          
            1
          
        
      
    
    {\displaystyle \Sigma _{2}^{1}}
   sets, 
  
    
      
        
          Π
          
            3
          
          
            1
          
        
      
    
    {\displaystyle \Pi _{3}^{1}}
   uniformization, etc. Over a weak base theory (such as RCA0), projective determinacy implies comprehension and provides an essentially complete theory of second-order arithmetic — natural statements in the language of Z2 that are independent of Z2 with projective determinacy are hard to find.ZFC + {there are n Woodin cardinals: n is a natural number} is conservative over Z2 with projective determinacy, that is a statement in the language of second-order arithmetic is provable in Z2 with projective determinacy if and only if its translation into the language of set theory is provable in ZFC + {there are n Woodin cardinals: n∈N}.

Coding mathematics
Second-order arithmetic directly formalizes natural numbers and sets of natural numbers. However, it is able to formalize other mathematical objects indirectly via coding techniques, a fact that was first noticed by Weyl. The integers, rational numbers, and real numbers can all be formalized in the subsystem RCA0, along with complete separable metric spaces and continuous functions between them.The research program of reverse mathematics uses these formalizations of mathematics in second-order arithmetic to study the set-existence axioms required to prove mathematical theorems. For example, the intermediate value theorem for functions from the reals to the reals is provable in RCA0, while the Bolzano–Weierstrass theorem is equivalent to ACA0 over RCA0.The aforementioned coding works well for continuous and total functions, assuming a higher-order base theory plus weak Kőnig's lemma.  As perhaps expected, in the case of topology or measure theory, coding is not without problems.  However, even coding Riemann integrable functions leads to problems: the minimal (comprehension) axioms needed to prove Arzelà's convergence theorem for the Riemann integral are very different depending on whether one uses second-order codes or third-order functions.

See also
Paris–Harrington theorem
Presburger arithmetic
True arithmetic

References
Further reading
Burgess, J. P. (2005), Fixing Frege, Princeton University Press.
Buss, S. R. (1998), Handbook of proof theory, Elsevier. ISBN 0-444-89840-9
Takeuti, G. (1975) Proof theory ISBN 0-444-10492-5