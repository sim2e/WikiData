Free and open-source software (FOSS) is a term used to refer to groups of software consisting of both free software and open-source software where anyone is freely licensed to use, copy, study, and change the software in any way, and the source code is openly shared so that people are encouraged to voluntarily improve the design of the software. This is in contrast to proprietary software, where the software is under restrictive copyright licensing and the source code is usually hidden from the users.
FOSS maintains the software user's civil liberty rights (see the Four Essential Freedoms, below). Other benefits of using FOSS can include decreased software costs, increased security and stability (especially in regard to malware), protecting privacy, education, and giving users more control over their own hardware. Free and open-source operating systems such as Linux and descendants of BSD are widely utilized today, powering millions of servers, desktops, smartphones (e.g., Android), and other devices. Free-software licenses and open-source licenses are used by many software packages. The free software movement and the open-source software movement are online social movements behind widespread production and adoption of FOSS, with the former preferring to use the terms FLOSS or free/libre.

Overview
"Free and open-source software" (FOSS) is an umbrella term for software that is simultaneously considered both free software and open-source software. In a concise definition of the terms "free software" and "open source software", Feller et al. (2005) apply them to any software products "distributed under terms that allow users" to use, modify, and redistribute the software "in any manner they say fit, without requiring that they pay the author(s) of the software a royalty or fee for engaging in the listed activities."Although there is almost a complete overlap between free-software licenses and open-source-software licenses, there is a strong philosophical disagreement between the advocates of these two positions. The terminology of FOSS was created to be a neutral on these philosophical disagreements between the FSF and OSI and have a single unified term that could refer to both concepts.

Free software
Richard Stallman's Free Software Definition, adopted by the Free Software Foundation (FSF), defines free software as a matter of liberty not price, and it upholds the Four Essential Freedoms. The earliest-known publication of the definition of his free-software idea was in the February 1986 edition of the FSF's now-discontinued GNU's Bulletin publication. The canonical source for the document is in the philosophy section of the GNU Project website. As of August 2017, it is published in 40 languages.

Four essential freedoms of Free Software
To meet the definition of "free software", the FSF requires the software's licensing respect the civil liberties / human rights of what the FSF calls the software user's "Four Essential Freedoms".
The freedom to run the program as you wish, for any purpose (freedom 0).
The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.
The freedom to redistribute copies so you can help others (freedom 2).
The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.

Open source
The Open Source Definition is used by the Open Source Initiative (OSI) to determine whether a software license qualifies for the organization's insignia for open-source software. The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens. Perens did not base his writing on the Four Essential Freedoms of free software from the Free Software Foundation, which were only later available on the web. Perens subsequently stated that he felt Eric Raymond's promotion of open-source unfairly overshadowed the Free Software Foundation's efforts and reaffirmed his support for free software. In the following 2000s, he spoke about open source again.

History
From the 1950s and on through the 1980s, it was common for computer users to have the source code for all programs they used, and the permission and ability to modify it for their own use. Software, including source code, was commonly shared by individuals who used computers, often as public-domain software (FOSS is not the same as public domain software, as public domain software does not contain copyrights). Most companies had a business model based on hardware sales, and provided or bundled software with hardware, free of charge.By the late 1960s, the prevailing business model around software was changing. A growing and evolving software industry was competing with the hardware manufacturer's bundled software products; rather than funding software development from hardware revenue, these new companies were selling software directly. Leased machines required software support while providing no revenue for software, and some customers who were able to better meet their own needs did not want the costs of software bundled with hardware product costs. In United States vs. IBM, filed January 17, 1969, the government charged that bundled software was anticompetitive. While some software was still being provided without monetary cost and license restriction, there was a growing amount of software that was only at a monetary cost with restricted licensing. In the 1970s and early 1980s, some parts of the software industry began using technical measures (such as distributing only binary copies of computer programs) to prevent computer users from being able to use reverse engineering techniques to study and customize software they had paid for. In 1980, the copyright law was extended to computer programs in the United States—previously, computer programs could be considered ideas, procedures, methods, systems, and processes, which are not copyrightable.Early on, closed-source software was uncommon until the mid-1970s to the 1980s, when IBM implemented in 1983 an "object code only" policy, no longer distributing source code.In 1983, Richard Stallman, longtime member of the hacker community at the MIT Artificial Intelligence Laboratory, announced the GNU project, saying that he had become frustrated with the effects of the change in culture of the computer industry and its users. Software development for the GNU operating system began in January 1984, and the Free Software Foundation (FSF) was founded in October 1985. An article outlining the project and its goals was published in March 1985 titled the GNU Manifesto. The manifesto included significant explanation of the GNU philosophy, Free Software Definition and "copyleft" ideas. The FSF takes the position that the fundamental issue Free software addresses is an ethical one—to ensure software users can exercise what it calls "The Four Essential Freedoms".The Linux kernel, created by Linus Torvalds, was released as freely modifiable source code in 1991. Initially, Linux was not released under either a Free software or an Open-source software license. However, with version 0.12 in February 1992, he relicensed the project under the GNU General Public License.FreeBSD and NetBSD (both derived from 386BSD) were released as Free software when the USL v. BSDi lawsuit was settled out of court in 1993. OpenBSD forked from NetBSD in 1995. Also in 1995, The Apache HTTP Server, commonly referred to as Apache, was released under the Apache License 1.0.
In 1997, Eric Raymond published The Cathedral and the Bazaar, a reflective analysis of the hacker community and Free software principles. The paper received significant attention in early 1998, and was one factor in motivating Netscape Communications Corporation to release their popular Netscape Communicator Internet suite as Free software. This code is today better known as Mozilla Firefox and Thunderbird.
Netscape's act prompted Raymond and others to look into how to bring the FSF's Free software ideas and perceived benefits to the commercial software industry. They concluded that FSF's social activism was not appealing to companies like Netscape, and looked for a way to rebrand the Free software movement to emphasize the business potential of sharing and collaborating on software source code. The new name they chose was "Open-source", and quickly Bruce Perens, publisher Tim O'Reilly, Linus Torvalds, and others signed on to the rebranding. The Open Source Initiative was founded in February 1998 to encourage the use of the new term and evangelize open-source principles.While the Open Source Initiative sought to encourage the use of the new term and evangelize the principles it adhered to, commercial software vendors found themselves increasingly threatened by the concept of freely distributed software and universal access to an application's source code. A Microsoft executive publicly stated in 2001 that "Open-source is an intellectual property destroyer. I can't imagine something that could be worse than this for the software business and the intellectual-property business." Companies have indeed faced copyright infringement issues when embracing FOSS. For many years FOSS played a niche role outside of the mainstream of private software development. However the success of FOSS Operating Systems such as Linux, BSD and the companies based on FOSS such as Red Hat, has changed the software industry's attitude and there has been a dramatic shift in the corporate philosophy concerning its development.

Usage
Benefits over proprietary software
Personal control, customizability and freedom
Users of FOSS benefit from the Four Essential Freedoms to make unrestricted use of, and to study, copy, modify, and redistribute such software with or without modification. If they would like to change the functionality of software they can bring about changes to the code and, if they wish, distribute such modified versions of the software or often − depending on the software's decision making model and its other users − even push or request such changes to be made via updates to the original software.

Privacy and security
Manufacturers of proprietary, closed-source software are sometimes pressured to building in backdoors or other covert, undesired features into their software.  Instead of having to trust software vendors, users of FOSS can inspect and verify the source code themselves and can put trust on a community of volunteers and users. As proprietary code is typically hidden from public view, only the vendors themselves and hackers may be aware of any vulnerabilities in them while FOSS involves as many people as possible for exposing bugs quickly.

Low costs or no costs
FOSS is often free of charge although donations are often encouraged. This also allows users to better test and compare software.

Quality, collaboration and efficiency
FOSS allows for better collaboration among various parties and individuals with the goal of developing the most efficient software for its users or use-cases while proprietary software is typically meant to generate profits. Furthermore, in many cases more organizations and individuals contribute to such projects than to proprietary software. It has been shown that technical superiority is typically the primary reason why companies choose open source software.

Drawbacks compared to proprietary software
Security and user-support
According to Linus's law the more people who can see and test a set of code, the more likely any flaws will be caught and fixed quickly. However, this does not guarantee a high level of participation. Having a grouping of full-time professionals behind a commercial product can in some cases be superior to FOSS.Furthermore, publicized source code might make it easier for hackers to find vulnerabilities in it and write exploits. This however assumes that such malicious hackers are more effective than white hat hackers which responsibly disclose or help fix the vulnerabilities, that no code leaks or exfiltrations occur and that reverse engineering of proprietary code is a hindrance of significance for malicious hackers.

Hardware and software compatibility
Sometimes, FOSS is not compatible with proprietary hardware or specific software. This is often due to manufacturers obstructing FOSS such as by not disclosing the interfaces or other specifications needed for members of the FOSS movement to write drivers for their hardware - for instance as they wish customers to run only their own proprietary software or as they might benefit from partnerships.

Bugs and missing features
While FOSS can be superior to proprietary equivalents in terms of software features and stability, in many cases it has more unfixed bugs and missing features when compared to similar commercial software. This varies per case, and usually depends on the level of interest in a particular project. However, unlike close-sourced software, improvements can be made by anyone who has the motivation, time and skill to do so.A common obstacle in FOSS development is the lack of access to some common official standards, due to costly royalties or required non-disclosure agreements (e.g., for the DVD-Video format).

Less guarantee of development
There is often less certainty of FOSS projects gaining the required resources and participation for continued development than commercial software backed by companies. However, companies also often abolish projects for being unprofitable, yet large companies may rely on, and hence co-develop, open source software. On the other hand, if the vendor of proprietary software ceases development, there are no alternatives; whereas with FOSS, any user who needs it still has the right, and the source-code, to continue to develop it themself, or pay a 3rd party to do so.

Missing applications
As the FOSS operating system distributions of Linux has a lower market share of end users there are also fewer applications available.

Adoption by governments
Adoption by supranational unions and international organizations
European Union
In 2017, the European Commission stated that "EU institutions should become open source software users themselves, even more than they already are" and listed open source software as one of the nine key drivers of innovation, together with big data, mobility, cloud computing and the internet of things.In 2020 the European Commission adopted its Open Source Strategy 2020-2023, including encouraging sharing and reuse of software and publishing Commission's source code as key objectives. Among concrete actions there is also to set up an Open Source Programme Office in 2020 and in 2022 it launched its own FOSS repository https://code.europa.eu/.In 2021 the Commission Decision on the open source licensing and reuse of Commission 
software (2021/C 495 I/01) was adopted, under which, as a general principle, the European Commission may release software under EUPL or another FOSS license, if more appropriate. There are exceptions though.
In May 2022 the Expert group on the Interoperability of European Public Services came published 27 recommendations to strengthen the interoperability of public administrations across the EU. These recommendations are to be taken into account later in the same year in Commission's proposal of the "Interoperable Europe Act".

Production
Issues and incidents
GPLv3 controversy
While copyright is the primary legal mechanism that FOSS authors use to ensure license compliance for their software, other mechanisms such as legislation, patents, and trademarks have implications as well. In response to legal issues with patents and the Digital Millennium Copyright Act (DMCA), the Free Software Foundation released version 3 of its GNU Public License (GNU GPLv3) in 2007 that explicitly addressed the DMCA and patent rights.
After the development of the GNU GPLv3 in 2007, the FSF (as the copyright holder of many pieces of the GNU system) updated many of the GNU programs' licenses from GPLv2 to GPLv3. On the other hand, the adoption of the new GPL version was heavily discussed in the FOSS ecosystem, several projects decided against upgrading to GPLv3. For instance the Linux kernel, the BusyBox project, AdvFS, Blender, and the VLC media player decided against adopting the GPLv3.Apple, a user of GCC and a heavy user of both DRM and patents, switched the compiler in its Xcode IDE from GCC to Clang, which is another FOSS compiler but is under a permissive license. LWN speculated that Apple was motivated partly by a desire to avoid GPLv3. The Samba project also switched to GPLv3, so Apple replaced Samba in their software suite by a closed-source, proprietary software alternative.

Skewed prioritization, ineffectiveness and egoism of developers
Leemhuis criticizes the prioritization of skilled developers who − instead of fixing issues in already popular open-source applications and desktop environments − create new, mostly redundant software to gain fame and fortune.He also criticizes notebook manufacturers for optimizing their own products only privately or creating workarounds instead of helping fix the actual causes of the many issues with Linux on notebooks such as the unnecessary power consumption.

Commercial ownership of open-source software
Mergers have affected major open-source software. Sun Microsystems (Sun) acquired MySQL AB, owner of the popular open-source MySQL database, in 2008.Oracle in turn purchased Sun in January 2010, acquiring their copyrights, patents, and trademarks. Thus, Oracle became the owner of both the most popular proprietary database and the most popular open-source database. Oracle's attempts to commercialize the open-source MySQL database have raised concerns in the FOSS community. Partly in response to uncertainty about the future of MySQL, the FOSS community forked the project into new database systems outside of Oracle's control. These include MariaDB, Percona, and Drizzle. All of these have distinct names; they are distinct projects and cannot use the trademarked name MySQL.

Legal cases
Oracle v. Google
In August 2010, Oracle sued Google, claiming that its use of Java in Android infringed on Oracle's copyrights and patents. In May 2012, the trial judge determined that Google did not infringe on Oracle's patents and ruled that the structure of the Java APIs used by Google was not copyrightable. The jury found that Google infringed a small number of copied files, but the parties stipulated that Google would pay no damages. Oracle appealed to the Federal Circuit, and Google filed a cross-appeal on the literal copying claim.

As part/driver of a new socio-economic model
By defying ownership regulations in the construction and use of information—a key area of contemporary growth—the Free/Open Source Software (FOSS) movement counters neoliberalism and privatization in general.By realizing the historical potential of an "economy of abundance" for the new digital world FOSS may lay down a plan for political resistance or show the way towards a potential transformation of capitalism.According to Yochai Benkler, Jack N. and Lillian R. Berkman Professor for Entrepreneurial Legal Studies at Harvard Law School, free software is the most visible part of a new economy of commons-based peer production of information, knowledge, and culture. As examples, he cites a variety of FOSS projects, including both free software and open-source.

See also
Notes
References
Sources


== Further reading ==