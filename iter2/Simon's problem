In computational complexity theory and quantum computing, Simon's problem is a computational problem that is proven to be solved exponentially faster on a quantum computer than on a classical (that is, traditional) computer. The quantum algorithm solving Simon's problem, usually called Simon's algorithm, served as the inspiration for Shor's algorithm. Both problems are special cases of the abelian hidden subgroup problem, which is now known to have efficient quantum algorithms.
The problem is set in the model of decision tree complexity or query complexity and was conceived by Daniel R. Simon in 1994. Simon exhibited a quantum algorithm that solves Simon's problem exponentially faster with exponentially fewer queries than the best probabilistic (or deterministic) classical algorithm. In particular, Simon's algorithm uses a linear number of queries and any classical probabilistic algorithm must use an exponential number of queries. 
This problem yields an oracle separation between the complexity classes BPP (bounded-error classical query complexity) and BQP (bounded-error quantum query complexity). This is the same separation that the Bernstein–Vazirani algorithm achieves, and different from the separation provided by the Deutsch–Jozsa algorithm, which separates P and EQP. Unlike the Bernstein–Vazirani algorithm, Simon's algorithm's separation is exponential.
Because this problem assumes the existence of a highly-structured "black box" oracle to achieve its speedup, this problem has little practical value. However, without such an oracle, exponential speedups cannot easily be proven, since this would prove that P is different from PSPACE.

Problem description
Given a function (implemented by a black box or oracle) 
  
    
      
        f
        :
        {
        0
        ,
        1
        
          }
          
            n
          
        
        →
        {
        0
        ,
        1
        
          }
          
            n
          
        
      
    
    {\displaystyle f:\{0,1\}^{n}\rightarrow \{0,1\}^{n}}
   with the promise that, for some unknown 
  
    
      
        s
        ∈
        {
        0
        ,
        1
        
          }
          
            n
          
        
      
    
    {\displaystyle s\in \{0,1\}^{n}}
  , for all 
  
    
      
        x
        ,
        y
        ∈
        {
        0
        ,
        1
        
          }
          
            n
          
        
      
    
    {\displaystyle x,y\in \{0,1\}^{n}}
  , 

  
    
      
        f
        (
        x
        )
        =
        f
        (
        y
        )
      
    
    {\displaystyle f(x)=f(y)}
   if and only if 
  
    
      
        x
        ⊕
        y
        ∈
        {
        
          0
          
            n
          
        
        ,
        s
        }
      
    
    {\displaystyle x\oplus y\in \{0^{n},s\}}
  ,where 
  
    
      
        ⊕
      
    
    {\displaystyle \oplus }
   denotes bitwise XOR. The goal is to identify 
  
    
      
        s
      
    
    {\displaystyle s}
   by making as few queries to 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
   as possible. Note that

  
    
      
        a
        ⊕
        b
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle a\oplus b=0^{n}}
   if and only if 
  
    
      
        a
        =
        b
      
    
    {\displaystyle a=b}
  Furthermore, for some 
  
    
      
        x
      
    
    {\displaystyle x}
   and 
  
    
      
        s
      
    
    {\displaystyle s}
   in 
  
    
      
        x
        ⊕
        y
        =
        s
      
    
    {\displaystyle x\oplus y=s}
  , 
  
    
      
        y
      
    
    {\displaystyle y}
   is unique (not equal to 
  
    
      
        x
      
    
    {\displaystyle x}
  ) if and only if 
  
    
      
        s
        ≠
        
          0
          
            n
          
        
      
    
    {\displaystyle s\neq 0^{n}}
  . This means that 
  
    
      
        f
      
    
    {\displaystyle f}
   is two-to-one when 
  
    
      
        s
        ≠
        
          0
          
            n
          
        
      
    
    {\displaystyle s\neq 0^{n}}
  , and one-to-one when 
  
    
      
        s
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle s=0^{n}}
  . It is also the case that 
  
    
      
        x
        ⊕
        y
        =
        s
      
    
    {\displaystyle x\oplus y=s}
   implies 
  
    
      
        y
        =
        s
        ⊕
        x
      
    
    {\displaystyle y=s\oplus x}
  , meaning thatwhich shows how 
  
    
      
        f
      
    
    {\displaystyle f}
   is periodic.
The associated decision problem formulation of Simon's problem is to distinguish when 
  
    
      
        s
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle s=0^{n}}
   (
  
    
      
        f
      
    
    {\displaystyle f}
   is one-to-one), and when 
  
    
      
        s
        ≠
        
          0
          
            n
          
        
      
    
    {\displaystyle s\neq 0^{n}}
   (
  
    
      
        f
      
    
    {\displaystyle f}
   is two-to-one).

Example
The following function is an example of a function that satisfies the required property for 
  
    
      
        n
        =
        3
      
    
    {\displaystyle n=3}
  :

In this case, 
  
    
      
        s
        =
        110
      
    
    {\displaystyle s=110}
   (i.e. the solution). Every output of 
  
    
      
        f
      
    
    {\displaystyle f}
   occurs twice, and the two input strings corresponding to any one given output have bitwise XOR equal to 
  
    
      
        s
        =
        110
      
    
    {\displaystyle s=110}
  . 
For example, the input strings 
  
    
      
        010
      
    
    {\displaystyle 010}
   and 
  
    
      
        100
      
    
    {\displaystyle 100}
   are both mapped (by 
  
    
      
        f
      
    
    {\displaystyle f}
  ) to the same output string 
  
    
      
        000
      
    
    {\displaystyle 000}
  . That is, 
  
    
      
        
          
            f
            (
            010
            )
            =
            000
          
        
      
    
    {\displaystyle {\displaystyle f(010)=000}}
   and 
  
    
      
        
          
            f
            (
            100
            )
            =
            000
          
        
      
    
    {\displaystyle {\displaystyle f(100)=000}}
  . Applying XOR to 010 and 100 obtains 110, that is 
  
    
      
        
          
            010
            ⊕
            100
            =
            110
            =
            s
          
        
        .
      
    
    {\displaystyle {\displaystyle 010\oplus 100=110=s}.}
  

  
    
      
        s
        =
        110
      
    
    {\displaystyle s=110}
   can also be verified using input strings 001 and 111 that are both mapped (by f) to the same output string 010. Applying XOR to 001 and 111 obtains 110, that is 
  
    
      
        001
        ⊕
        111
        =
        110
        =
        s
      
    
    {\displaystyle 001\oplus 111=110=s}
  . This gives the same solution 
  
    
      
        s
        =
        110
      
    
    {\displaystyle s=110}
   as before.
In this example the function f is indeed a two-to-one function where 
  
    
      
        
          
            s
            ≠
            
              0
              
                n
              
            
          
        
      
    
    {\displaystyle {\displaystyle s\neq 0^{n}}}
  .

Problem hardness
Intuitively, this is a hard problem to solve in a "classical" way, even if one uses randomness and accepts a small probability of error. The intuition behind the hardness is reasonably simple: if you want to solve the problem classically, you need to find two different inputs 
  
    
      
        x
      
    
    {\displaystyle x}
   and 
  
    
      
        y
      
    
    {\displaystyle y}
   for which 
  
    
      
        f
        (
        x
        )
        =
        f
        (
        y
        )
      
    
    {\displaystyle f(x)=f(y)}
  . There is not necessarily any structure in the function 
  
    
      
        f
      
    
    {\displaystyle f}
   that would help us to find two such inputs: more specifically, we can discover something about 
  
    
      
        f
      
    
    {\displaystyle f}
   (or what it does) only when, for two different inputs, we obtain the same output. In any case, we would need to guess 
  
    
      
        
          
            Ω
            (
            
              
                
                  2
                  
                    n
                  
                
              
            
            )
          
        
      
    
    {\displaystyle {\displaystyle \Omega ({\sqrt {2^{n}}})}}
   different inputs before being likely to find a pair on which 
  
    
      
        f
      
    
    {\displaystyle f}
   takes the same output, as per the birthday problem. Since, classically to find s with a 100% certainty it would require checking 
  
    
      
        
          
            Θ
            (
            
              
                
                  2
                  
                    n
                  
                
              
            
            )
          
        
      
    
    {\displaystyle {\displaystyle \Theta ({\sqrt {2^{n}}})}}
   inputs, Simon's problem seeks to find s using fewer queries than this classical method.

Simon's algorithm
The algorithm as a whole uses a subroutine to execute the following two steps:
Run the quantum subroutine an expected 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
   times to get a list of linearly independent bitstrings 
  
    
      
        
          y
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          y
          
            n
            −
            1
          
        
      
    
    {\displaystyle y_{1},...,y_{n-1}}
  .
Each 
  
    
      
        
          y
          
            k
          
        
      
    
    {\displaystyle y_{k}}
   satisfies 
  
    
      
        
          y
          
            k
          
        
        ⋅
        s
        =
        0
      
    
    {\displaystyle y_{k}\cdot s=0}
  , so we can solve the system of equations this produces to get 
  
    
      
        s
      
    
    {\displaystyle s}
  .

Quantum subroutine
The quantum circuit (see the picture) is the implementation of the quantum part of Simon's algorithm. The quantum subroutine of the algorithm makes use of the Hadamard transformwhere 
  
    
      
        k
        ⋅
        j
        =
        
          k
          
            1
          
        
        
          j
          
            1
          
        
        ⊕
        …
        ⊕
        
          k
          
            n
          
        
        
          j
          
            n
          
        
      
    
    {\displaystyle k\cdot j=k_{1}j_{1}\oplus \ldots \oplus k_{n}j_{n}}
  , where 
  
    
      
        ⊕
      
    
    {\displaystyle \oplus }
   denotes XOR.
First, the algorithm starts with two registers, initialized to 
  
    
      
        
          |
        
        0
        
          ⟩
          
            ⊗
            n
          
        
        
          |
        
        0
        
          ⟩
          
            ⊗
            n
          
        
      
    
    {\displaystyle |0\rangle ^{\otimes n}|0\rangle ^{\otimes n}}
  . Then, we apply the Hadamard transform to the first register, which gives the state 

  
    
      
        
          
            1
            
              
                2
                
                  n
                
              
            
          
        
        
          ∑
          
            k
            =
            0
          
          
            
              2
              
                n
              
            
            −
            1
          
        
        
          |
        
        k
        ⟩
        
          |
        
        0
        
          ⟩
          
            ⊗
            n
          
        
        .
      
    
    {\displaystyle {\frac {1}{\sqrt {2^{n}}}}\sum _{k=0}^{2^{n}-1}|k\rangle |0\rangle ^{\otimes n}.}
  Query the oracle 
  
    
      
        
          U
          
            f
          
        
      
    
    {\displaystyle U_{f}}
   to get the state 

  
    
      
        
          
            1
            
              
                2
                
                  n
                
              
            
          
        
        
          ∑
          
            k
            =
            0
          
          
            
              2
              
                n
              
            
            −
            1
          
        
        
          |
        
        k
        ⟩
        
          |
        
        f
        (
        k
        )
        ⟩
      
    
    {\displaystyle {\frac {1}{\sqrt {2^{n}}}}\sum _{k=0}^{2^{n}-1}|k\rangle |f(k)\rangle }
  .Apply another Hadamard transform to the first register. This will produce the state 

  
    
      
        
          
            1
            
              
                2
                
                  n
                
              
            
          
        
        
          ∑
          
            k
            =
            0
          
          
            
              2
              
                n
              
            
            −
            1
          
        
        
          [
          
            
              
                1
                
                  
                    2
                    
                      n
                    
                  
                
              
            
            
              ∑
              
                j
                =
                0
              
              
                
                  2
                  
                    n
                  
                
                −
                1
              
            
            (
            −
            1
            
              )
              
                j
                ⋅
                k
              
            
            
              |
            
            j
            ⟩
          
          ]
        
        
          |
        
        f
        (
        k
        )
        ⟩
        =
        
          ∑
          
            j
            =
            0
          
          
            
              2
              
                n
              
            
            −
            1
          
        
        
          |
        
        j
        ⟩
        
          [
          
            
              
                1
                
                  2
                  
                    n
                  
                
              
            
            
              ∑
              
                k
                =
                0
              
              
                
                  2
                  
                    n
                  
                
                −
                1
              
            
            (
            −
            1
            
              )
              
                j
                ⋅
                k
              
            
            
              |
            
            f
            (
            k
            )
            ⟩
          
          ]
        
        .
      
    
    {\displaystyle {\frac {1}{\sqrt {2^{n}}}}\sum _{k=0}^{2^{n}-1}\left[{\frac {1}{\sqrt {2^{n}}}}\sum _{j=0}^{2^{n}-1}(-1)^{j\cdot k}|j\rangle \right]|f(k)\rangle =\sum _{j=0}^{2^{n}-1}|j\rangle \left[{\frac {1}{2^{n}}}\sum _{k=0}^{2^{n}-1}(-1)^{j\cdot k}|f(k)\rangle \right].}
   Finally, we measure the first register (the algorithm also works if the second register is measured before the first, but this is unnecessary). The probability of measuring a state 
  
    
      
        
          |
        
        j
        ⟩
      
    
    {\displaystyle |j\rangle }
   isThis is due to the fact that taking the magnitude of this vector and squaring it sums up all the probabilities of all the possible measurements of the second register that must have the first register as 
  
    
      
        
          |
        
        j
        ⟩
      
    
    {\displaystyle |j\rangle }
  . There are two cases for our measurement:

  
    
      
        s
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle s=0^{n}}
   and 
  
    
      
        f
      
    
    {\displaystyle f}
   is one-to-one.

  
    
      
        s
        ≠
        
          0
          
            n
          
        
      
    
    {\displaystyle s\neq 0^{n}}
   and 
  
    
      
        f
      
    
    {\displaystyle f}
   is two-to-one.For the first case, since in this case, 
  
    
      
        f
      
    
    {\displaystyle f}
   is one-to-one, implying that the range of 
  
    
      
        f
      
    
    {\displaystyle f}
   is 
  
    
      
        {
        0
        ,
        1
        
          }
          
            n
          
        
      
    
    {\displaystyle \{0,1\}^{n}}
  , meaning that the summation is over every basis vector. For the second case, note that there exist two strings, 
  
    
      
        
          x
          
            1
          
        
      
    
    {\displaystyle x_{1}}
   and 
  
    
      
        
          x
          
            2
          
        
      
    
    {\displaystyle x_{2}}
  , such that 
  
    
      
        f
        (
        
          x
          
            1
          
        
        )
        =
        f
        (
        
          x
          
            2
          
        
        )
        =
        z
      
    
    {\displaystyle f(x_{1})=f(x_{2})=z}
  , where 
  
    
      
        z
        ∈
        
          r
          a
          n
          g
          e
        
        (
        f
        )
      
    
    {\displaystyle z\in \mathrm {range} (f)}
  . Thus, Furthermore, since 
  
    
      
        
          x
          
            1
          
        
        ⊕
        
          x
          
            2
          
        
        =
        s
      
    
    {\displaystyle x_{1}\oplus x_{2}=s}
  , 
  
    
      
        
          x
          
            2
          
        
        =
        
          x
          
            1
          
        
        ⊕
        s
      
    
    {\displaystyle x_{2}=x_{1}\oplus s}
  , and soThis expression is now easy to evaluate. Recall that we are measuring 
  
    
      
        j
      
    
    {\displaystyle j}
  . When 
  
    
      
        j
        ⋅
        s
        =
        1
      
    
    {\displaystyle j\cdot s=1}
  , then this expression will evaluate to 
  
    
      
        0
      
    
    {\displaystyle 0}
  , and when 
  
    
      
        j
        ⋅
        s
        =
        0
      
    
    {\displaystyle j\cdot s=0}
  , then this expression will be 
  
    
      
        
          2
          
            −
            n
            +
            1
          
        
      
    
    {\displaystyle 2^{-n+1}}
  .
Thus, both when 
  
    
      
        s
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle s=0^{n}}
   and when 
  
    
      
        s
        ≠
        
          0
          
            n
          
        
      
    
    {\displaystyle s\neq 0^{n}}
  , our measured 
  
    
      
        j
      
    
    {\displaystyle j}
   satisfies 
  
    
      
        j
        ⋅
        s
        =
        0
      
    
    {\displaystyle j\cdot s=0}
  .

Classical post-processing
We run the quantum part of the algorithm until we have a linearly independent list of bitstrings 
  
    
      
        
          y
          
            1
          
        
        ,
        …
        ,
        
          y
          
            n
            −
            1
          
        
      
    
    {\displaystyle y_{1},\ldots ,y_{n-1}}
  , and each 
  
    
      
        
          y
          
            k
          
        
      
    
    {\displaystyle y_{k}}
   satisfies 
  
    
      
        
          y
          
            k
          
        
        ⋅
        s
        =
        0
      
    
    {\displaystyle y_{k}\cdot s=0}
  . Thus, we can efficiently solve this system of equations classically to find 
  
    
      
        s
      
    
    {\displaystyle s}
  .
The probability that 
  
    
      
        
          y
          
            1
          
        
        ,
        
          y
          
            2
          
        
        ,
        …
        ,
        
          y
          
            n
            −
            1
          
        
      
    
    {\displaystyle y_{1},y_{2},\dots ,y_{n-1}}
   are linearly independent is at leastOnce we solve the system of equations, and produce a solution 
  
    
      
        
          s
          ′
        
      
    
    {\displaystyle s'}
  , we can test if 
  
    
      
        f
        (
        
          0
          
            n
          
        
        )
        =
        f
        (
        
          s
          ′
        
        )
      
    
    {\displaystyle f(0^{n})=f(s')}
  . If this is true, then we know 
  
    
      
        
          s
          ′
        
        =
        s
      
    
    {\displaystyle s'=s}
  , since 
  
    
      
        f
        (
        
          0
          
            n
          
        
        )
        =
        f
        (
        
          0
          
            n
          
        
        ⊕
        s
        )
        =
        f
        (
        s
        )
      
    
    {\displaystyle f(0^{n})=f(0^{n}\oplus s)=f(s)}
  . If it is the case that 
  
    
      
        f
        (
        
          0
          
            n
          
        
        )
        ≠
        f
        (
        
          s
          ′
        
        )
      
    
    {\displaystyle f(0^{n})\neq f(s')}
  , then that means that 
  
    
      
        s
        =
        
          0
          
            n
          
        
      
    
    {\displaystyle s=0^{n}}
  , and 
  
    
      
        f
        (
        
          0
          
            n
          
        
        )
        ≠
        f
        (
        
          s
          ′
        
        )
      
    
    {\displaystyle f(0^{n})\neq f(s')}
   since 
  
    
      
        f
      
    
    {\displaystyle f}
   is one-to-one.
We can repeat Simon's algorithm a constant number of times to increase the probability of success arbitrarily, while still having the same time complexity.

Explicit examples of Simon's algorithm for few qubits
One qubit
Consider the simplest instance of the algorithm, with 
  
    
      
        n
        =
        1
      
    
    {\displaystyle n=1}
  . In this case evolving the input state through an Hadamard gate and the oracle results in the state (up to renormalization):

  
    
      
        
          |
        
        0
        ⟩
        
          |
        
        f
        (
        0
        )
        ⟩
        +
        
          |
        
        1
        ⟩
        
          |
        
        f
        (
        1
        )
        ⟩
        .
      
    
    {\displaystyle |0\rangle |f(0)\rangle +|1\rangle |f(1)\rangle .}
  If 
  
    
      
        s
        =
        1
      
    
    {\displaystyle s=1}
  , that is, 
  
    
      
        f
        (
        0
        )
        =
        f
        (
        1
        )
      
    
    {\displaystyle f(0)=f(1)}
  , then measuring the second register always gives the outcome 
  
    
      
        
          |
        
        f
        (
        0
        )
        ⟩
      
    
    {\displaystyle |f(0)\rangle }
  , and always results in the first register collapsing to the state (up to renormalization):

  
    
      
        
          |
        
        0
        ⟩
        +
        
          |
        
        1
        ⟩
        .
      
    
    {\displaystyle |0\rangle +|1\rangle .}
  Thus applying an Hadamard and measuring the first register always gives the outcome 
  
    
      
        
          |
        
        0
        ⟩
      
    
    {\displaystyle |0\rangle }
  . On the other hand, if 
  
    
      
        f
      
    
    {\displaystyle f}
   is one-to-one, that is, 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
  , then measuring the first register after the second Hadamard can result in both 
  
    
      
        
          |
        
        0
        ⟩
      
    
    {\displaystyle |0\rangle }
   and 
  
    
      
        
          |
        
        1
        ⟩
      
    
    {\displaystyle |1\rangle }
  , with equal probability.
We recover 
  
    
      
        s
      
    
    {\displaystyle s}
   from the measurement outcomes by looking at whether we measured always 
  
    
      
        
          |
        
        0
        ⟩
      
    
    {\displaystyle |0\rangle }
  , in which case 
  
    
      
        s
        =
        1
      
    
    {\displaystyle s=1}
  , or we measured both 
  
    
      
        
          |
        
        0
        ⟩
      
    
    {\displaystyle |0\rangle }
   and 
  
    
      
        
          |
        
        1
        ⟩
      
    
    {\displaystyle |1\rangle }
   with equal probability, in which case we infer that 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
  . This scheme will fail if 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
   but we nonetheless always found the outcome 
  
    
      
        
          |
        
        0
        ⟩
      
    
    {\displaystyle |0\rangle }
  , but the probability of this event is 
  
    
      
        
          2
          
            −
            N
          
        
      
    
    {\displaystyle 2^{-N}}
   with 
  
    
      
        N
      
    
    {\displaystyle N}
   the number of performed measurements, and can thus be made exponentially small by increasing the statistics.

Two qubits
Consider now the case with 
  
    
      
        n
        =
        2
      
    
    {\displaystyle n=2}
  . The initial part of the algorithm results in the state (up to renormalization):If 
  
    
      
        s
        =
        (
        00
        )
      
    
    {\displaystyle s=(00)}
  , meaning 
  
    
      
        f
      
    
    {\displaystyle f}
   is injective, then finding 
  
    
      
        
          |
        
        f
        (
        x
        )
        ⟩
      
    
    {\displaystyle |f(x)\rangle }
   on the second register always collapses the first register to 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
  , for all 
  
    
      
        x
        ∈
        {
        0
        ,
        1
        
          }
          
            2
          
        
      
    
    {\displaystyle x\in \{0,1\}^{2}}
  . In other words, applying Hadamard gates and measuring the first register the four outcomes 
  
    
      
        00
        ,
        01
        ,
        10
        ,
        11
      
    
    {\displaystyle 00,01,10,11}
   are thus found with equal probability.
Suppose on the other hand 
  
    
      
        s
        ≠
        (
        00
        )
      
    
    {\displaystyle s\neq (00)}
  , for example, 
  
    
      
        s
        =
        (
        01
        )
      
    
    {\displaystyle s=(01)}
  . Then measuring 
  
    
      
        
          |
        
        f
        (
        00
        )
        ⟩
      
    
    {\displaystyle |f(00)\rangle }
   on the second register collapses the first register to the state 
  
    
      
        
          |
        
        00
        ⟩
        +
        
          |
        
        10
        ⟩
      
    
    {\displaystyle |00\rangle +|10\rangle }
  . And more generally, measuring 
  
    
      
        
          |
        
        f
        (
        x
        y
        )
        ⟩
      
    
    {\displaystyle |f(xy)\rangle }
   gives 
  
    
      
        
          |
        
        x
        ,
        y
        ⟩
        +
        
          |
        
        x
        ,
        y
        ⊕
        1
        ⟩
        =
        
          |
        
        x
        ⟩
        (
        
          |
        
        0
        ⟩
        +
        
          |
        
        1
        ⟩
        )
      
    
    {\displaystyle |x,y\rangle +|x,y\oplus 1\rangle =|x\rangle (|0\rangle +|1\rangle )}
   on the first register. Applying Hadamard gates and measuring on the first register can thus result in the outcomes 
  
    
      
        00
      
    
    {\displaystyle 00}
   and 
  
    
      
        10
      
    
    {\displaystyle 10}
   with equal probabilities.
Similar reasoning applies to the other cases: if 
  
    
      
        s
        =
        (
        10
        )
      
    
    {\displaystyle s=(10)}
   then the possible outcomes are 
  
    
      
        00
      
    
    {\displaystyle 00}
   and 
  
    
      
        01
      
    
    {\displaystyle 01}
  , while if 
  
    
      
        s
        =
        (
        11
        )
      
    
    {\displaystyle s=(11)}
   the possible outcomes are 
  
    
      
        00
      
    
    {\displaystyle 00}
   and 
  
    
      
        11
      
    
    {\displaystyle 11}
  , compatibly with the 
  
    
      
        j
        ⋅
        s
        =
        0
      
    
    {\displaystyle j\cdot s=0}
   rule discussed in the general case.
To recover 
  
    
      
        s
      
    
    {\displaystyle s}
   we thus only need to distinguish between these four cases, collecting enough statistics to ensure that the probability of mistaking one outcome probability distribution for another is sufficiently small.

Complexity
Simon's algorithm requires 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
   queries to the black box, whereas a classical algorithm would need at least 
  
    
      
        Ω
        (
        
          2
          
            n
            
              /
            
            2
          
        
        )
      
    
    {\displaystyle \Omega (2^{n/2})}
   queries. It is also known that Simon's algorithm is optimal in the sense that any quantum algorithm to solve this problem requires 
  
    
      
        Ω
        (
        n
        )
      
    
    {\displaystyle \Omega (n)}
   queries.

See also
Deutsch–Jozsa algorithm


== References ==