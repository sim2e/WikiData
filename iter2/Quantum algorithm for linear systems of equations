The quantum algorithm for linear systems of equations, also called HHL algorithm, designed by Aram Harrow, Avinatan Hassidim, and Seth Lloyd, is a quantum algorithm published in 2008 for solving linear systems. The algorithm estimates the result of a scalar measurement on the solution vector to a given linear system of equations.The algorithm is one of the main fundamental algorithms expected to provide a speedup over their classical counterparts, along with Shor's factoring algorithm, Grover's search algorithm, and the quantum fourier transform. Provided the linear system is sparse and has a low condition number 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
  , and that the user is interested in the result of a scalar measurement on the solution vector, instead of the values of the solution vector itself, then the algorithm has a runtime of 
  
    
      
        O
        (
        log
        ⁡
        (
        N
        )
        
          κ
          
            2
          
        
        )
      
    
    {\displaystyle O(\log(N)\kappa ^{2})}
  , where 
  
    
      
        N
      
    
    {\displaystyle N}
   is the number of variables in the linear system. This offers an exponential speedup over the fastest classical algorithm, which runs in 
  
    
      
        O
        (
        N
        κ
        )
      
    
    {\displaystyle O(N\kappa )}
   (or 
  
    
      
        O
        (
        N
        
          
            κ
          
        
        )
      
    
    {\displaystyle O(N{\sqrt {\kappa }})}
   for positive semidefinite matrices).
An implementation of the quantum algorithm for linear systems of equations was first demonstrated in 2013 by Cai et al., Barz et al. and Pan et al. in parallel. The demonstrations consisted of simple linear equations on specially designed quantum devices. The first demonstration of a general-purpose version of the algorithm appeared in 2018 in the work of Zhao et al.Due to the prevalence of linear systems in virtually all areas of science and engineering, the quantum algorithm for linear systems of equations has the potential for widespread applicability.

Procedure
The HHL algorithm tackles the following problem: given a 
  
    
      
        N
        ×
        N
      
    
    {\displaystyle N\times N}
   Hermitian matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   and a unit vector 
  
    
      
        
          
            
              b
              →
            
          
        
        ∈
        
          
            R
          
          
            N
          
        
      
    
    {\displaystyle {\vec {b}}\in \mathbb {R} ^{N}}
  , prepare the quantum state 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
    corresponding to the vector 
  
    
      
        
          
            
              x
              →
            
          
        
        ∈
        
          
            R
          
          
            N
          
        
      
    
    {\displaystyle {\vec {x}}\in \mathbb {R} ^{N}}
   that solves the linear system 
  
    
      
        A
        
          
            
              x
              →
            
          
        
        =
        
          
            
              b
              →
            
          
        
      
    
    {\displaystyle A{\vec {x}}={\vec {b}}}
  . More precisely, the goal is to prepare a state 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
   whose amplitudes equal the elements of 
  
    
      
        
          
            
              x
              →
            
          
        
      
    
    {\displaystyle {\vec {x}}}
  . This means, in particular, that the algorithm cannot be used to efficiently retrieve the vector 
  
    
      
        
          
            
              x
              →
            
          
        
      
    
    {\displaystyle {\vec {x}}}
   itself. It does, however, allow to efficiently compute expectation values of the form 
  
    
      
        ⟨
        x
        
          |
        
        M
        
          |
        
        x
        ⟩
      
    
    {\displaystyle \langle x|M|x\rangle }
   for some observable 
  
    
      
        M
      
    
    {\displaystyle M}
  .
First, the algorithm represents the vector 
  
    
      
        
          
            
              b
              →
            
          
        
      
    
    {\displaystyle {\vec {b}}}
   as a quantum state of the form:

  
    
      
        
          |
        
        b
        ⟩
        =
        
          ∑
          
            i
            
              =
            
            ⁡
            1
          
          
            N
          
        
        
          b
          
            i
          
        
        
          |
        
        i
        ⟩
        .
      
    
    {\displaystyle |b\rangle =\sum _{i\mathop {=} 1}^{N}b_{i}|i\rangle .}
  Next, Hamiltonian simulation techniques are used to apply the unitary operator 
  
    
      
        
          e
          
            i
            A
            t
          
        
      
    
    {\displaystyle e^{iAt}}
   to 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   for a superposition of different times 
  
    
      
        t
      
    
    {\displaystyle t}
  . The ability to decompose 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   into the eigenbasis of 
  
    
      
        A
      
    
    {\displaystyle A}
   and to find the corresponding eigenvalues 
  
    
      
        
          λ
          
            j
          
        
      
    
    {\displaystyle \lambda _{j}}
   is facilitated by the use of quantum phase estimation.
The state of the system after this decomposition is approximately:

  
    
      
        
          ∑
          
            j
            
              =
            
            ⁡
            1
          
          
            N
          
        
        
          β
          
            j
          
        
        
          |
        
        
          u
          
            j
          
        
        ⟩
        
          |
        
        
          λ
          
            j
          
        
        ⟩
        ,
      
    
    {\displaystyle \sum _{j\mathop {=} 1}^{N}\beta _{j}|u_{j}\rangle |\lambda _{j}\rangle ,}
  where 
  
    
      
        
          u
          
            j
          
        
      
    
    {\displaystyle u_{j}}
   is the eigenvector basis of 
  
    
      
        A
      
    
    {\displaystyle A}
  , and 
  
    
      
        
          |
        
        b
        ⟩
        =
        
          ∑
          
            j
            
              =
            
            ⁡
            1
          
          
            N
          
        
        
          β
          
            j
          
        
        
          |
        
        
          u
          
            j
          
        
        ⟩
      
    
    {\displaystyle |b\rangle =\sum _{j\mathop {=} 1}^{N}\beta _{j}|u_{j}\rangle }
  .
We would then like to perform the linear map taking 
  
    
      
        
          |
        
        
          λ
          
            j
          
        
        ⟩
      
    
    {\displaystyle |\lambda _{j}\rangle }
   to 
  
    
      
        C
        
          λ
          
            j
          
          
            −
            1
          
        
        
          |
        
        
          λ
          
            j
          
        
        ⟩
      
    
    {\displaystyle C\lambda _{j}^{-1}|\lambda _{j}\rangle }
  , where 
  
    
      
        C
      
    
    {\displaystyle C}
   is a normalizing constant. The linear mapping operation is not unitary and thus will require a number of repetitions as it has some probability of failing. After it succeeds, we uncomputed the 
  
    
      
        
          |
        
        
          λ
          
            j
          
        
        ⟩
      
    
    {\displaystyle |\lambda _{j}\rangle }
   register and are left with a state proportional to:

  
    
      
        
          ∑
          
            i
            
              =
            
            ⁡
            1
          
          
            N
          
        
        
          β
          
            i
          
        
        
          λ
          
            j
          
          
            −
            1
          
        
        
          |
        
        
          u
          
            j
          
        
        ⟩
        =
        
          A
          
            −
            1
          
        
        
          |
        
        b
        ⟩
        =
        
          |
        
        x
        ⟩
        ,
      
    
    {\displaystyle \sum _{i\mathop {=} 1}^{N}\beta _{i}\lambda _{j}^{-1}|u_{j}\rangle =A^{-1}|b\rangle =|x\rangle ,}
  where 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
   is a quantum-mechanical representation of the desired solution vector x. To read out all components of x would require the procedure be repeated at least N times. However, it is often the case that one is not interested in 
  
    
      
        x
      
    
    {\displaystyle x}
   itself, but rather some expectation value of a linear operator M acting on x. By mapping M to a quantum-mechanical operator and performing the quantum measurement corresponding to M, we obtain an estimate of the expectation value 
  
    
      
        ⟨
        x
        
          |
        
        M
        
          |
        
        x
        ⟩
      
    
    {\displaystyle \langle x|M|x\rangle }
  . This allows for a wide variety of features of the vector x to be extracted including normalization, weights in different parts of the state space, and moments without actually computing all the values of the solution vector x.

Explanation of the algorithm
Initialization
Firstly, the algorithm requires that the matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   be Hermitian so that it can be converted into a unitary operator. In the case where 
  
    
      
        A
      
    
    {\displaystyle A}
   is not Hermitian, define 

  
    
      
        
          C
        
        =
        
          
            [
            
              
                
                  0
                
                
                  A
                
              
              
                
                  
                    A
                    
                      †
                    
                  
                
                
                  0
                
              
            
            ]
          
        
        .
      
    
    {\displaystyle \mathbf {C} ={\begin{bmatrix}0&A\\A^{\dagger }&0\end{bmatrix}}.}
  As 
  
    
      
        C
      
    
    {\displaystyle C}
   is Hermitian, the algorithm can now be used to solve 
  
    
      
        C
        y
        =
        
          
            [
            
              
                
                  b
                
              
              
                
                  0
                
              
            
            ]
          
        
      
    
    {\displaystyle Cy={\begin{bmatrix}b\\0\end{bmatrix}}}
   to obtain 
  
    
      
        y
        =
        
          
            [
            
              
                
                  0
                
              
              
                
                  x
                
              
            
            ]
          
        
      
    
    {\displaystyle y={\begin{bmatrix}0\\x\end{bmatrix}}}
  .
Secondly, the algorithm requires an efficient procedure to prepare 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
  , the quantum representation of b. It is assumed that there exists some linear operator 
  
    
      
        B
      
    
    {\displaystyle B}
   that can take some arbitrary quantum state 
  
    
      
        
          |
        
        
          i
          n
          i
          t
          i
          a
          l
        
        ⟩
      
    
    {\displaystyle |\mathrm {initial} \rangle }
   to 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   efficiently or that this algorithm is a subroutine in a larger algorithm and is given 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   as input. Any error in the preparation of state 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   is ignored.
Finally, the algorithm assumes that the state 
  
    
      
        
          |
        
        
          ψ
          
            0
          
        
        ⟩
      
    
    {\displaystyle |\psi _{0}\rangle }
   can be prepared efficiently, where

  
    
      
        
          |
        
        
          ψ
          
            0
          
        
        ⟩
        :=
        
          
            2
            
              /
            
            T
          
        
        
          ∑
          
            τ
            
              =
            
            ⁡
            0
          
          
            T
            −
            1
          
        
        sin
        ⁡
        π
        
          (
          
            
              
                
                  τ
                  +
                  
                    
                      
                        1
                        2
                      
                    
                  
                
                T
              
            
          
          )
        
        
          |
        
        τ
        ⟩
      
    
    {\displaystyle |\psi _{0}\rangle :={\sqrt {2/T}}\sum _{\tau \mathop {=} 0}^{T-1}\sin \pi \left({\tfrac {\tau +{\tfrac {1}{2}}}{T}}\right)|\tau \rangle }
  for some large 
  
    
      
        T
      
    
    {\displaystyle T}
  . The coefficients of 
  
    
      
        
          |
        
        
          ψ
          
            0
          
        
        ⟩
      
    
    {\displaystyle |\psi _{0}\rangle }
   are chosen to minimize a certain quadratic loss function which induces error in the 
  
    
      
        
          U
          
            
              i
              n
              v
              e
              r
              t
            
          
        
      
    
    {\displaystyle U_{\mathrm {invert} }}
   subroutine described below.

Hamiltonian simulation
Hamiltonian simulation is used to transform the Hermitian matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   into a unitary operator, which can then be applied at will. This is possible if A is s-sparse and efficiently row computable, meaning it has at most s nonzero entries per row and given a row index these entries can be computed in time O(s). Under these assumptions, quantum Hamiltonian simulation allows 
  
    
      
        
          e
          
            i
            A
            t
          
        
      
    
    {\displaystyle e^{iAt}}
   to be simulated in time 
  
    
      
        O
        (
        log
        ⁡
        (
        N
        )
        
          s
          
            2
          
        
        t
        )
      
    
    {\displaystyle O(\log(N)s^{2}t)}
  .

Uinvert  subroutine
The key subroutine to the algorithm, denoted 
  
    
      
        
          U
          
            
              i
              n
              v
              e
              r
              t
            
          
        
      
    
    {\displaystyle U_{\mathrm {invert} }}
  , is defined as follows and incorporates a phase estimation subroutine:
1. Prepare 
  
    
      
        
          |
        
        
          ψ
          
            0
          
        
        
          ⟩
          
            C
          
        
      
    
    {\displaystyle |\psi _{0}\rangle ^{C}}
   on register C
2. Apply the conditional Hamiltonian evolution (sum)
3. Apply the Fourier transform to the register C. Denote the resulting basis states with 
  
    
      
        
          |
        
        k
        ⟩
      
    
    {\displaystyle |k\rangle }
   for k = 0, ..., T − 1. Define 
  
    
      
        
          λ
          
            k
          
        
        :=
        2
        π
        k
        
          /
        
        
          t
          
            0
          
        
      
    
    {\displaystyle \lambda _{k}:=2\pi k/t_{0}}
  .
4. Adjoin a three-dimensional register S in the state

  
    
      
        
          |
        
        h
        (
        
          λ
          
            k
          
        
        )
        
          ⟩
          
            S
          
        
        :=
        
          
            1
            −
            f
            (
            
              λ
              
                k
              
            
            
              )
              
                2
              
            
            −
            g
            (
            
              λ
              
                k
              
            
            
              )
              
                2
              
            
          
        
        
          |
        
        
          n
          o
          t
          h
          i
          n
          g
        
        
          ⟩
          
            S
          
        
        +
        f
        (
        
          λ
          
            k
          
        
        )
        
          |
        
        
          w
          e
          l
          l
        
        
          ⟩
          
            S
          
        
        +
        g
        (
        
          λ
          
            k
          
        
        )
        
          |
        
        
          i
          l
          l
        
        
          ⟩
          
            S
          
        
        ,
      
    
    {\displaystyle |h(\lambda _{k})\rangle ^{S}:={\sqrt {1-f(\lambda _{k})^{2}-g(\lambda _{k})^{2}}}|\mathrm {nothing} \rangle ^{S}+f(\lambda _{k})|\mathrm {well} \rangle ^{S}+g(\lambda _{k})|\mathrm {ill} \rangle ^{S},}
  5. Reverse steps 1–3, uncomputing any garbage produced along the way.
The phase estimation procedure in steps 1-3 allows for the estimation of eigenvalues of A up to error 
  
    
      
        ϵ
      
    
    {\displaystyle \epsilon }
  .
The ancilla register in step 4 is necessary to construct a final state with inverted eigenvalues corresponding to the diagonalized inverse of A.  In this register, the functions f, g, are called filter functions. The states 'nothing', 'well' and 'ill' are used to instruct the loop body on how to proceed; 'nothing' indicates that the desired matrix inversion has not yet taken place, 'well' indicates that the inversion has taken place and the loop should halt, and 'ill' indicates that part of 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
   is in the ill-conditioned subspace of A and the algorithm will not be able to produce the desired inversion. Producing a state proportional to the inverse of A requires 'well' to be measured, after which the overall state of the system collapses to the desired state by the extended Born rule.

Main loop
The body of the algorithm follows the amplitude amplification procedure: starting with 
  
    
      
        
          U
          
            
              i
              n
              v
              e
              r
              t
            
          
        
        B
        
          |
        
        
          i
          n
          i
          t
          i
          a
          l
        
        ⟩
      
    
    {\displaystyle U_{\mathrm {invert} }B|\mathrm {initial} \rangle }
  , the following operation is repeatedly applied:

  
    
      
        
          U
          
            
              i
              n
              v
              e
              r
              t
            
          
        
        B
        
          R
          
            
              i
              n
              i
              t
            
          
        
        
          B
          
            †
          
        
        
          U
          
            
              i
              n
              v
              e
              r
              t
            
          
          
            †
          
        
        
          R
          
            
              s
              u
              c
              c
            
          
        
        ,
      
    
    {\displaystyle U_{\mathrm {invert} }BR_{\mathrm {init} }B^{\dagger }U_{\mathrm {invert} }^{\dagger }R_{\mathrm {succ} },}
  where

  
    
      
        
          R
          
            
              s
              u
              c
              c
            
          
        
        =
        I
        −
        2
        
          |
        
        
          w
          e
          l
          l
        
        ⟩
        ⟨
        
          w
          e
          l
          l
        
        
          |
        
      
    
    {\displaystyle R_{\mathrm {succ} }=I-2|\mathrm {well} \rangle \langle \mathrm {well} |}
  and

  
    
      
        
          R
          
            
              i
              n
              i
              t
            
          
        
        =
        I
        −
        2
        
          |
        
        
          i
          n
          i
          t
          i
          a
          l
        
        ⟩
        ⟨
        
          i
          n
          i
          t
          i
          a
          l
        
        
          |
        
        .
      
    
    {\displaystyle R_{\mathrm {init} }=I-2|\mathrm {initial} \rangle \langle \mathrm {initial} |.}
  After each repetition, 
  
    
      
        S
      
    
    {\displaystyle S}
   is measured and will produce a value of 'nothing', 'well', or 'ill' as described above. This loop is repeated until 
  
    
      
        
          |
        
        
          w
          e
          l
          l
        
        ⟩
      
    
    {\displaystyle |\mathrm {well} \rangle }
   is measured, which occurs with a probability 
  
    
      
        p
      
    
    {\displaystyle p}
  . Rather than repeating 
  
    
      
        
          
            1
            p
          
        
      
    
    {\displaystyle {\frac {1}{p}}}
   times to minimize error, amplitude amplification is used to achieve the same error resilience using only 
  
    
      
        O
        
          (
          
            
              1
              
                p
              
            
          
          )
        
      
    
    {\displaystyle O\left({\frac {1}{\sqrt {p}}}\right)}
   repetitions.

Scalar measurement
After successfully measuring 'well' on 
  
    
      
        S
      
    
    {\displaystyle S}
   the system will be in a state proportional to:

  
    
      
        
          ∑
          
            i
            
              =
            
            ⁡
            1
          
          
            N
          
        
        
          β
          
            i
          
        
        
          λ
          
            j
          
          
            −
            1
          
        
        
          |
        
        
          u
          
            j
          
        
        ⟩
        =
        
          A
          
            −
            1
          
        
        
          |
        
        b
        ⟩
        =
        
          |
        
        x
        ⟩
        .
      
    
    {\displaystyle \sum _{i\mathop {=} 1}^{N}\beta _{i}\lambda _{j}^{-1}|u_{j}\rangle =A^{-1}|b\rangle =|x\rangle .}
  Finally, we perform the quantum-mechanical operator corresponding to M and obtain an estimate of the value of 
  
    
      
        ⟨
        x
        
          |
        
        M
        
          |
        
        x
        ⟩
      
    
    {\displaystyle \langle x|M|x\rangle }
  .

Run time analysis
Classical efficiency
The best classical algorithm which produces the actual solution vector 
  
    
      
        
          
            x
            →
          
        
      
    
    {\displaystyle {\overrightarrow {x}}}
   is Gaussian elimination, which runs in 
  
    
      
        O
        (
        
          N
          
            3
          
        
        )
      
    
    {\displaystyle O(N^{3})}
   time.
If A is s-sparse and positive semi-definite, then the Conjugate Gradient method can be used to find the solution vector 
  
    
      
        
          
            x
            →
          
        
      
    
    {\displaystyle {\overrightarrow {x}}}
  , which can be found in 
  
    
      
        O
        (
        N
        s
        κ
        )
      
    
    {\displaystyle O(Ns\kappa )}
   time by minimizing the quadratic function 
  
    
      
        
          |
        
        A
        
          
            x
            →
          
        
        −
        
          
            b
            →
          
        
        
          
            |
          
          
            2
          
        
      
    
    {\displaystyle |A{\overrightarrow {x}}-{\overrightarrow {b}}|^{2}}
  .
When only a summary statistic of the solution vector 
  
    
      
        
          
            x
            →
          
        
      
    
    {\displaystyle {\overrightarrow {x}}}
   is needed, as is the case for the quantum algorithm for linear systems of equations, a classical computer can find an estimate of 
  
    
      
        
          
            
              x
              →
            
          
          
            †
          
        
        M
        
          
            x
            →
          
        
      
    
    {\displaystyle {\overrightarrow {x}}^{\dagger }M{\overrightarrow {x}}}
   in 
  
    
      
        O
        (
        N
        
          
            κ
          
        
        )
      
    
    {\displaystyle O(N{\sqrt {\kappa }})}
  .

Quantum efficiency
The runtime of the quantum algorithm for solving systems of linear equations originally proposed by Harrow et al. was shown to be 
  
    
      
        O
        (
        
          κ
          
            2
          
        
        log
        ⁡
        N
        
          /
        
        ε
        )
      
    
    {\displaystyle O(\kappa ^{2}\log N/\varepsilon )}
  , where  
  
    
      
        ε
        >
        0
      
    
    {\displaystyle \varepsilon >0}
   is the error parameter and 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
   is the condition number of 
  
    
      
        A
      
    
    {\displaystyle A}
  . This was subsequently improved to 
  
    
      
        O
        (
        κ
        
          log
          
            3
          
        
        ⁡
        κ
        log
        ⁡
        N
        
          /
        
        
          ε
          
            3
          
        
        )
      
    
    {\displaystyle O(\kappa \log ^{3}\kappa \log N/\varepsilon ^{3})}
   by Andris Ambainis and a quantum algorithm with runtime polynomial in 
  
    
      
        log
        ⁡
        (
        1
        
          /
        
        ε
        )
      
    
    {\displaystyle \log(1/\varepsilon )}
   was developed by Childs et al.  Since the HHL algorithm maintains its logarithmic scaling in 
  
    
      
        N
      
    
    {\displaystyle N}
   only for sparse or low rank matrices, Wossnig et al. extended the HHL algorithm based on a quantum singular value estimation technique and provided a linear system algorithm for dense matrices which runs in 
  
    
      
        O
        (
        
          
            N
          
        
        log
        ⁡
        N
        
          κ
          
            2
          
        
        )
      
    
    {\displaystyle O({\sqrt {N}}\log N\kappa ^{2})}
   time compared to the 
  
    
      
        O
        (
        N
        log
        ⁡
        N
        
          κ
          
            2
          
        
        )
      
    
    {\displaystyle O(N\log N\kappa ^{2})}
   of the standard HHL algorithm.

Optimality
An important factor in the performance of the matrix inversion algorithm is the condition number 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
  , which represents the ratio of 
  
    
      
        A
      
    
    {\displaystyle A}
  's largest and smallest eigenvalues. As the condition number increases, the ease with which the solution vector can be found using gradient descent methods such as the conjugate gradient method decreases, as 
  
    
      
        A
      
    
    {\displaystyle A}
   becomes closer to a matrix which cannot be inverted and the solution vector becomes less stable. This algorithm assumes that all singular values of the matrix 
  
    
      
        A
      
    
    {\displaystyle A}
   lie between 
  
    
      
        
          
            1
            κ
          
        
      
    
    {\displaystyle {\frac {1}{\kappa }}}
   and 1, in which case the claimed run-time proportional to 
  
    
      
        
          κ
          
            2
          
        
      
    
    {\displaystyle \kappa ^{2}}
   will be achieved. Therefore, the speedup over classical algorithms is increased further when 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
   is a 
  
    
      
        
          p
          o
          l
          y
        
        (
        log
        ⁡
        (
        N
        )
        )
      
    
    {\displaystyle \mathrm {poly} (\log(N))}
  .If the run-time of the algorithm were made poly-logarithmic in 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
   then problems solvable on n qubits could be solved in poly(n) time, causing the complexity class BQP to be equal to PSPACE.

Error analysis
Performing the Hamiltonian simulation, which is the dominant source of error, is done by simulating 
  
    
      
        
          e
          
            i
            A
            t
          
        
      
    
    {\displaystyle e^{iAt}}
  . Assuming that 
  
    
      
        A
      
    
    {\displaystyle A}
   is s-sparse, this can be done with an error bounded by a constant 
  
    
      
        ε
      
    
    {\displaystyle \varepsilon }
  , which will translate to the additive error achieved in the output state 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
  .
The phase estimation step errs by 
  
    
      
        O
        
          (
          
            
              1
              
                t
                
                  0
                
              
            
          
          )
        
      
    
    {\displaystyle O\left({\frac {1}{t_{0}}}\right)}
   in estimating 
  
    
      
        λ
      
    
    {\displaystyle \lambda }
  , which translates into a relative error of 
  
    
      
        O
        
          (
          
            
              1
              
                λ
                
                  t
                  
                    0
                  
                
              
            
          
          )
        
      
    
    {\displaystyle O\left({\frac {1}{\lambda t_{0}}}\right)}
   in 
  
    
      
        
          λ
          
            −
            1
          
        
      
    
    {\displaystyle \lambda ^{-1}}
  . If 
  
    
      
        λ
        ≥
        1
        
          /
        
        κ
      
    
    {\displaystyle \lambda \geq 1/\kappa }
  , taking 
  
    
      
        
          t
          
            0
          
        
        =
        O
        (
        κ
        ε
        )
      
    
    {\displaystyle t_{0}=O(\kappa \varepsilon )}
   induces a final error of 
  
    
      
        ε
      
    
    {\displaystyle \varepsilon }
  . This requires that the overall run-time efficiency be increased proportional to 
  
    
      
        O
        
          (
          
            
              1
              ε
            
          
          )
        
      
    
    {\displaystyle O\left({\frac {1}{\varepsilon }}\right)}
   to minimize error.

Experimental realization
While there does not yet exist a quantum computer that can truly offer a speedup over a classical computer, implementation of a "proof of concept" remains an important milestone in the development of a new quantum algorithm. Demonstrating the quantum algorithm for linear systems of equations remained a challenge for years after its proposal until 2013 when it was demonstrated by Cai et al., Barz et al. and Pan et al. in parallel.

Cai et al.
Published in Physical Review Letters 110, 230501 (2013), Cai et al. reported an experimental demonstration of the simplest meaningful instance of this algorithm, that is, solving 
  
    
      
        2
        ×
        2
      
    
    {\displaystyle 2\times 2}
   linear equations for various input vectors. The quantum circuit is optimized and compiled into a linear optical network with four photonic quantum bits (qubits) and four controlled logic gates, which is used to coherently implement every subroutine for this algorithm. For various input vectors, the quantum computer gives solutions for the linear equations with reasonably high precision, ranging from fidelities of 0.825 to 0.993.

Barz et al.
On February 5, 2013,  Stefanie Barz and co-workers demonstrated the quantum algorithm for linear systems of equations on a photonic quantum computing architecture. This implementation used two consecutive entangling gates on the same pair of polarization-encoded qubits. Two separately controlled NOT gates were realized where the successful operation of the first was heralded by a measurement of two ancillary photons. Barz et al. found that the fidelity in the obtained output state ranged from 64.7% to 98.1% due to the influence of higher-order emissions from spontaneous parametric down-conversion.

Pan et al.
On February 8, 2013, Pan et al. reported a proof-of-concept experimental demonstration of the quantum algorithm using a 4-qubit nuclear magnetic resonance quantum information processor. The implementation was tested using simple linear systems of only 2 variables. Across three experiments they obtain the solution vector with over 96% fidelity.

Wen et al.
Another experimental demonstration using NMR for solving an 8*8 system was reported by Wen et al. in 2018 using the algorithm developed by Subaşı et al.

Applications
Quantum computers are devices that harness quantum mechanics to perform computations in ways that classical computers cannot. For certain problems, quantum algorithms supply exponential speedups over their classical counterparts, the most famous example being Shor's factoring algorithm. Few such exponential speedups are known, and those that are (such as the use of quantum computers to simulate other quantum systems) have so far found limited use outside the domain of quantum mechanics. This algorithm provides an exponentially faster method of estimating features of the solution of a set of linear equations, which is a problem ubiquitous in science and engineering, both on its own and as a subroutine in more complex problems.

Electromagnetic scattering
Clader et al. provided a preconditioned version of the linear systems algorithm that provided two advances. First, they demonstrated how a preconditioner could be included within the quantum algorithm. This expands the class of problems that can achieve the promised exponential speedup, since the scaling of HHL and the best classical algorithms are both polynomial in the condition number. The second advance was the demonstration of how to use HHL to solve for the radar cross-section of a complex shape. This was one of the first end to end examples of how to use HHL to solve a concrete problem exponentially faster than the best known classical algorithm.

Linear differential equation solving
Dominic Berry proposed a new algorithm for solving linear time dependent differential equations as an extension of the quantum algorithm for solving linear systems of equations. Berry provides an efficient algorithm for solving the full-time evolution under sparse linear differential equations on a quantum computer.

Finite element method
The Finite Element Method uses large systems of linear equations to find approximate solutions to various physical and mathematical models. Montanaro and Pallister demonstrate that the HHL algorithm, when applied to certain FEM problems, can achieve a polynomial quantum speedup. They suggest that an exponential speedup is not possible in problems with fixed dimensions, and for which the solution meets certain smoothness conditions.
Quantum speedups for the finite element method are higher for problems which include solutions with higher-order derivatives and large spatial dimensions. For example, problems in many-body dynamics require the solution of equations containing derivatives on orders scaling with the number of bodies, and some problems in computational finance, such as Black-Scholes models, require large spatial dimensions.

Least-squares fitting
Wiebe et al. provide a new quantum algorithm to determine the quality of a least-squares fit in which a continuous function is used to approximate a set of discrete points by extending the quantum algorithm for linear systems of equations. As the number of discrete points increases, the time required to produce a least-squares fit using even a quantum computer running a quantum state tomography algorithm becomes very large. Wiebe et al. find that in many cases, their algorithm can efficiently find a concise approximation of the data points, eliminating the need for the higher-complexity tomography algorithm.

Machine learning and big data analysis
Machine learning is the study of systems that can identify trends in data. Tasks in machine learning frequently involve manipulating and classifying a large volume of data in high-dimensional vector spaces. The runtime of classical machine learning algorithms is limited by a polynomial dependence on both the volume of data and the dimensions of the space. Quantum computers are capable of manipulating high-dimensional vectors using tensor product spaces and are thus the perfect platform for machine learning algorithms.The quantum algorithm for linear systems of equations has been applied to a support vector machine, which is an optimized linear or non-linear binary classifier. A support vector machine can be used for supervised machine learning, in which  training set of already classified data is available, or unsupervised machine learning, in which all data given to the system is unclassified. Rebentrost et al. show that a quantum support vector machine can be used for big data classification and achieve an exponential speedup over classical computers.In June 2018, Zhao et al. developed an algorithm for performing Bayesian training of deep neural networks in quantum computers with an exponential speedup over classical training due to the use of the quantum algorithm for linear systems of equations, providing also the first general-purpose implementation of the algorithm to be run in cloud-based quantum computers.

Critique
Recognizing the importance of the HHL algorithm in the field of quantum machine learning, Scott Aaronson analyzes the caveats and factors that could limit the actual quantum advantage of the algorithm. 

the solution vector, 
  
    
      
        
          |
        
        b
        ⟩
      
    
    {\displaystyle |b\rangle }
  , has to be efficiently prepared in the quantum state. If the vector is not close to uniform, the state preparation is likely to be costly, and if it takes 
  
    
      
        O
        (
        
          n
          
            c
          
        
        )
      
    
    {\displaystyle O(n^{c})}
   steps the exponential advantage of HHL would vanish.
the QPE phases calls for the generation of the unitary 
  
    
      
        
          e
          
            i
            A
            t
          
        
      
    
    {\displaystyle e^{iAt}}
  , and its controlled application. The efficiency of this step depends on the 
  
    
      
        A
      
    
    {\displaystyle A}
   matrix being sparse and 'well conditioned' (low 
  
    
      
        κ
      
    
    {\displaystyle \kappa }
  ). Otherwise, the application of 
  
    
      
        
          e
          
            i
            A
            t
          
        
      
    
    {\displaystyle e^{iAt}}
   would grow as 
  
    
      
        O
        (
        
          n
          
            c
          
        
        )
      
    
    {\displaystyle O(n^{c})}
   and once again, the algorithm's quantum advantage would vanish.
lastly, the vector, 
  
    
      
        
          |
        
        x
        ⟩
      
    
    {\displaystyle |x\rangle }
  , is not readily accessible. The HHL algorithm enables learning a 'summary' of the vector, namely the result of measuring the expectation of an operator 
  
    
      
        ⟨
        x
        
          |
        
        M
        
          |
        
        x
        ⟩
      
    
    {\displaystyle \langle x|M|x\rangle }
  . If actual values of 
  
    
      
        
          
            
              x
              →
            
          
        
      
    
    {\displaystyle {\vec {x}}}
   are needed, then HHL would need to be repeated 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
   times, killing the exponential speed-up.

See also
Differentiable programming


== References ==