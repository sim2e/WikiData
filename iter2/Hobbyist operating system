The development of a hobbyist operating system is one of the more involved and technical options for a computer hobbyist.
The definition of a hobby operating system can sometimes be vague. It can be from the developer's view, where the developers do it just for fun or learning; it can also be seen from the user's view, where the users are only using it as a toy; or it can be defined as an operating system which doesn't have a very big user base.Development can begin from existing resources like a kernel, an operating system, or a bootloader, or it can also be made completely from scratch. The development platform could be a bare hardware machine, which is the nature of an operating system, but it could also be developed and tested on a virtual machine.
Since the hobbyist must claim more ownership for adapting a complex system to the ever-changing needs of the technical terrain, much enthusiasm is common amongst the many different groups attracted to operating system development.

Development
Elements of operating system development include:

Kernel:
Bootstrapping
Memory management
Process management and scheduling
Device driver management
Program API
External programs
User interfaceThe C programming language is frequently used for hobby operating system programming, as well as assembly language, though other languages can be used as well.
The use of assembly language is common with small systems, especially those based on eight bit microprocessors such as the MOS Technology 6502 family or the Zilog Z80, or in systems with a lack of available resources because of its small output size and low-level efficiency.

User interface
Most hobby operating systems use a command-line interface or a simple text user interface due to ease of development. More advanced hobby operating systems may have a graphical user interface. For example, AtheOS was a hobby operating system with a graphical interface written entirely by one programmer.

Examples
Use of BIOS
This section is predominantly x86 oriented.
The term BIOS (Basic Input/Output System) refers to firmware that initialises computer hardware and has provisions to load an operating system. The BIOS also sets up a standard interface for several low-level device drivers at boot time. BIOS resources are often used by hobbyist operating systems, especially those written on 16-bit x86 machines, as many hobby operating systems developers lack the time to write complex low level drivers themselves or they simply want to get into writing software for the system as soon as possible.
The most commonly used BIOS functions are VideoBIOS and Disk services. These are used because video cards and disk drives vary significantly on different machines and specialised drivers are often difficult to write.
The use of the BIOS is uncommon in operating systems that operate in Protected mode or Long mode, because the system must switch back to real mode which BIOS drivers run in.

See also
List of hobbyist operating systems
Computer architecture

References
External links
OSDev.org - A hobby OSDev community
Independent Software - Set of tutorials on boot loader development and entering protected mode
The little book about OS development - This book is a practical guide to writing your own x86 operating system
Kernel 101 – Let’s write a Kernel
aodfaq - OS development FAQ
Bona Fide OS Development - Store of OS development tutorials and other documents
A step by step tutorial
Operating System Resource Center - Information and resources on various OSDev topics (both software and hardware)