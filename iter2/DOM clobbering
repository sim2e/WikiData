DOM clobbering is a type of injection attack that revolves around the attacker being able to insert benign non-script HTML code that can be used to influence the execution of Javascript code. This can lead to a skilled attacker being able to perform a variety of unwanted behaviours, including the ability to escalate to arbitrary code execution on the website.
While the vulnerability has been known for over a decade, recent efforts to mitigate it completely have been unsuccessful due to a significant amount of usage of the underlying features across the web as of 2021. However, a few defences have been identified that limit the effects of DOM clobbering and prevent some instances of DOM clobbering from occurring.

Vulnerability
The DOM clobbering vulnerability arises from a naming collision between the Javascript execution context and HTML elements in the Document Object Model (DOM). When a undefined Javascript variable is declared in the same context as an HTML element with the same name or id parameter, the browser will assign the HTML element to the undefined variable. In some instances, DOM clobbering can even be used to overshadow legitimate browser APIs by shadowing the property tree using HTML DOM elements. This can lead to the attacker manipulating the execution of various parts of the Javascript code by injecting specific markup.A skilled attacker might be able to perform arbitrary open redirections, cross-site request forgery, or even gain arbitrary code execution via careful manipulation of HTML elements. As part of a study conducted in 2023, Khodayari et al. showed that out of the top 5K websites in the world (as determined by the Tranco list), 9.8% of sites were vulnerable to this attack, including sites like Wikibooks, GitHub, Fandom, and Trello.

Threat model
The threat model for a DOM clobbering attack is similar to that of the web attacker model proposed by Akhawe et al. in 2010. This model assumes that the attacker can send emails or, by some other method, phish the victim to specific pages under their control. The model also assumes that the attacker can inject a limited set of markup into victim websites. This is crucial since DOM clobbering depends on the attacker being able to inject potentially benign HTML into a website.

History
The existence of DOM clobbering has been known for over a decade. The first known instance of a DOM clobbering attack being discussed in a research paper was in 2010 when researchers from University of California, Berkley and Carnegie Mellon University demonstrated an attack where an iframe called self could be used to navigate a page to a different page violating the same-origin policy. Over the years, security researchers have found more sophisticated techniques that have allowed for much more significant impact than what was initially demonstratedWhile the existence of the attack itself was known for a long time, the term "DOM clobbering" itself did not emerge until 2013, when it was popularized by security researcher Gareth Heyes's blog post demonstrating how the vulnerability could be used to gain arbitrary code execution. In 2015, Heiderich et al. proposed a design for a library called JSAgents, (later DOMPurify) that would be effective at santizing markup injection attacks such as those related to cross-site scripting and DOM clobbering.There has been a resurgence of interest in mitigating this attack in recent years, especially after DOM clobbering vulnerabilities were found in Gmail and Google Analytics in 2020. Over 2020 and 2021, proposals were made at various web standard groups detailing defences against DOM clobbering by disallowing named access to DOM elements at the browser level. However, these proposals were dismissed since as per Chrome telemetry data, over 10.5% per cent of the web relies on the features working as per their current behaviour.

Defenses
While the ultimate defence against DOM clobbering would be to turn off access to named DOM elements, this is currently not feasible due to significant active usage of these features as per Chrome telemetry data in 2021. However, various secure coding practices can be used to mitigate the effects of DOM clobbering on Javascript code execution.

HTML sanitization libraries
One of the most common techniques to limit DOM clobbering attacks is to use HTML santization libraries. In 2017, Heiderich et al. proposed a mitigation for DOM clobbering that was subsequently added to the DOMPurify library. The mitigation leveraged the use of hashes of existing functions to determine if HTML elements had overwritten them. In addition, DOMPurify parses the id and name attributes of injected elements to identify if they can collide with existing global functions. However, recent vulnerabilities related to DOM clobbering have been found in DOMPurify and similar libraries such as HTML Janitor, which indicate that these libraries only protect against specific cases of DOM clobbering and are largely unaware of the related risks.

Content security policy
Another popular method to mitigate the effects of DOM clobbering is the use of restrictive Content Security Policies (CSP). While this does nothing to prevent DOM clobbering from altering the execution of already present code, using restrictive content security policies can make it much harder for attackers to elevate a DOM clobbering issue into a arbitrary code execution attack by limiting how scripts can be executed on a website. By leveraging the script-src CSP directive, web developers can restrict where scripts can be loaded to a predetermined set of trusted domains. This thwarts the attacker's ability to load an untrusted attacker-controlled code significantly, if they can compromise the src attribute of a script tag.

See also
Cross-site scripting
Document Object Model

References
Further reading
"It's (DOM) Clobbering Time: Attack Techniques, Prevalence, and Defenses". cispa.de.