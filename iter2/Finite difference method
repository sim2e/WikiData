In numerical analysis, finite-difference methods (FDM) are a class of numerical techniques for solving differential equations by approximating derivatives with finite differences. Both the spatial domain and time interval (if applicable) are discretized, or broken into a finite number of steps, and the value of the solution at these discrete points is approximated by solving algebraic equations containing finite differences and values from nearby points.
Finite difference methods convert ordinary differential equations (ODE) or partial differential equations (PDE), which may be nonlinear, into a system of linear equations that can be solved by matrix algebra techniques. Modern computers can perform these linear algebra computations efficiently which, along with their relative ease of implementation, has led to the widespread use of FDM in modern numerical analysis.
Today, FDM are one of the most common approaches to the numerical solution of PDE, along with finite element methods.

Derive difference quotient from Taylor's polynomial
For a n-times differentiable function, by Taylor's theorem the Taylor series expansion is given as

where n! denotes the factorial of n, and Rn(x) is a remainder term, denoting the difference between the Taylor polynomial of degree n and the original function. We will derive an approximation for the first derivative of the function f by first truncating the Taylor polynomial plus remainder:

Dividing across by h gives:

Solving for 
  
    
      
        
          f
          ′
        
        (
        
          x
          
            0
          
        
        )
      
    
    {\displaystyle f'(x_{0})}
  :

Assuming that 
  
    
      
        
          R
          
            1
          
        
        (
        x
        )
      
    
    {\displaystyle R_{1}(x)}
   is sufficiently small, the approximation of the first derivative of f is:

This is, not coincidentally, similar to the definition of derivative, which is given as:

except for the limit towards zero (the method is named after this).

Accuracy and order
The error in a method's solution is defined as the difference between the approximation and the exact analytical solution. The two sources of error in finite difference methods are round-off error, the loss of precision due to computer rounding of decimal quantities, and truncation error or discretization error, the difference between the exact solution of the original differential equation and the exact quantity assuming perfect arithmetic (that is, assuming no round-off).

To use a finite difference method to approximate the solution to a problem, one must first discretize the problem's domain. This is usually done by dividing the domain into a uniform grid (see image to the right). This means that finite-difference methods produce sets of discrete numerical approximations to the derivative, often in a "time-stepping" manner.
An expression of general interest is the local truncation error of a method. Typically expressed using Big-O notation, local truncation error refers to the error from a single application of a method. That is, it is the quantity 
  
    
      
        
          f
          ′
        
        (
        
          x
          
            i
          
        
        )
        −
        
          f
          
            i
          
          ′
        
      
    
    {\displaystyle f'(x_{i})-f'_{i}}
   if 
  
    
      
        
          f
          ′
        
        (
        
          x
          
            i
          
        
        )
      
    
    {\displaystyle f'(x_{i})}
   refers to the exact value and 
  
    
      
        
          f
          
            i
          
          ′
        
      
    
    {\displaystyle f'_{i}}
   to the numerical approximation. The remainder term of a Taylor polynomial is convenient for analyzing the local truncation error. Using the Lagrange form of the remainder from the Taylor polynomial for 
  
    
      
        f
        (
        
          x
          
            0
          
        
        +
        h
        )
      
    
    {\displaystyle f(x_{0}+h)}
  , which is

the dominant term of the local truncation error can be discovered. For example, again using the forward-difference formula for the first derivative, knowing that 
  
    
      
        f
        (
        
          x
          
            i
          
        
        )
        =
        f
        (
        
          x
          
            0
          
        
        +
        i
        h
        )
      
    
    {\displaystyle f(x_{i})=f(x_{0}+ih)}
  ,

and with some algebraic manipulation, this leads to

and further noting that the quantity on the left is the approximation from the finite difference method and that the quantity on the right is the exact quantity of interest plus a remainder, clearly that remainder is the local truncation error. A final expression of this example and its order is:

This means that, in this case, the local truncation error is proportional to the step sizes. The quality and duration of simulated FDM solution depends on the discretization equation selection and the step sizes (time and space steps). The data quality and simulation duration increase significantly with smaller step size. Therefore, a reasonable balance between data quality and simulation duration is necessary for practical usage. Large time steps are useful for increasing simulation speed in practice. However, time steps which are too large may create instabilities and affect the data quality.The von Neumann and Courant-Friedrichs-Lewy criteria are often evaluated to determine the numerical model stability.

Example: ordinary differential equation
For example, consider the ordinary differential equation

The Euler method for solving this equation uses the finite difference quotient

to approximate the differential equation by first substituting it for u'(x) then applying a little algebra (multiplying both sides by h, and then adding u(x) to both sides) to get

The last equation is a finite-difference equation, and solving this equation gives an approximate solution to the differential equation.

Example: The heat equation
Consider the normalized heat equation in one dimension, with homogeneous Dirichlet boundary conditions

One way to numerically solve this equation is to approximate all the derivatives by finite differences. We partition the domain in space using a mesh 
  
    
      
        
          x
          
            0
          
        
        ,
        …
        ,
        
          x
          
            J
          
        
      
    
    {\displaystyle x_{0},\dots ,x_{J}}
   and in time using a mesh 
  
    
      
        
          t
          
            0
          
        
        ,
        …
        ,
        
          t
          
            N
          
        
      
    
    {\displaystyle t_{0},\dots ,t_{N}}
  . We assume a uniform partition both in space and in time, so the difference between two consecutive space points will be h and between two consecutive time points will be k. The points

will represent the numerical approximation of 
  
    
      
        u
        (
        
          x
          
            j
          
        
        ,
        
          t
          
            n
          
        
        )
        .
      
    
    {\displaystyle u(x_{j},t_{n}).}

Explicit method
Using a forward difference at time 
  
    
      
        
          t
          
            n
          
        
      
    
    {\displaystyle t_{n}}
   and a second-order central difference for the space derivative at position 
  
    
      
        
          x
          
            j
          
        
      
    
    {\displaystyle x_{j}}
   (FTCS) we get the recurrence equation:

This is an explicit method for solving the one-dimensional heat equation.
We can obtain 
  
    
      
        
          u
          
            j
          
          
            n
            +
            1
          
        
      
    
    {\displaystyle u_{j}^{n+1}}
   from the other values this way:

where 
  
    
      
        r
        =
        k
        
          /
        
        
          h
          
            2
          
        
        .
      
    
    {\displaystyle r=k/h^{2}.}
  
So, with this recurrence relation, and knowing the values at time n, one can obtain the corresponding values at time n+1. 
  
    
      
        
          u
          
            0
          
          
            n
          
        
      
    
    {\displaystyle u_{0}^{n}}
   and 
  
    
      
        
          u
          
            J
          
          
            n
          
        
      
    
    {\displaystyle u_{J}^{n}}
   must be replaced by the boundary conditions, in this example they are both 0.
This explicit method is known to be numerically stable and convergent whenever 
  
    
      
        r
        ≤
        1
        
          /
        
        2
      
    
    {\displaystyle r\leq 1/2}
  . The numerical errors are proportional to the time step and the square of the space step:

Implicit method
If we use the backward difference at time 
  
    
      
        
          t
          
            n
            +
            1
          
        
      
    
    {\displaystyle t_{n+1}}
   and a second-order central difference for the space derivative at position 
  
    
      
        
          x
          
            j
          
        
      
    
    {\displaystyle x_{j}}
   (The Backward Time, Centered Space Method "BTCS") we get the recurrence equation:

This is an implicit method for solving the one-dimensional heat equation.
We can obtain 
  
    
      
        
          u
          
            j
          
          
            n
            +
            1
          
        
      
    
    {\displaystyle u_{j}^{n+1}}
   from solving a system of linear equations:

The scheme is always numerically stable and convergent but usually more numerically intensive than the explicit method as it requires solving a system of numerical equations on each time step. The errors are  linear over the time step and quadratic over the space step:

Crank–Nicolson method
Finally if we use the central difference at time 
  
    
      
        
          t
          
            n
            +
            1
            
              /
            
            2
          
        
      
    
    {\displaystyle t_{n+1/2}}
   and a second-order central difference for the space derivative at position 
  
    
      
        
          x
          
            j
          
        
      
    
    {\displaystyle x_{j}}
   ("CTCS") we get the recurrence equation:

This formula is known as the Crank–Nicolson method.

We can obtain 
  
    
      
        
          u
          
            j
          
          
            n
            +
            1
          
        
      
    
    {\displaystyle u_{j}^{n+1}}
   from solving a system of linear equations:

The scheme is always numerically stable and convergent but usually more numerically intensive as it requires solving a system of numerical equations on each time step. The errors are quadratic over both the time step and the space step:

Comparison
To summarize, usually the Crank–Nicolson scheme is the most accurate scheme for small time steps. For larger time steps, the implicit scheme works better since it is less computationally demanding. The explicit scheme is the least accurate and can be unstable, but is also the easiest to implement and the least numerically intensive. 
Here is an example. The figures below present the solutions given by the above methods to approximate the heat equation 

with the boundary condition

The exact solution is

Example: The Laplace operator
The (continuous) Laplace operator in 
  
    
      
        n
      
    
    {\displaystyle n}
  -dimensions is given by 
  
    
      
        Δ
        u
        (
        x
        )
        =
        
          ∑
          
            i
            =
            1
          
          
            n
          
        
        
          ∂
          
            i
          
          
            2
          
        
        u
        (
        x
        )
      
    
    {\displaystyle \Delta u(x)=\sum _{i=1}^{n}\partial _{i}^{2}u(x)}
  .
The discrete Laplace operator 
  
    
      
        
          Δ
          
            h
          
        
        u
      
    
    {\displaystyle \Delta _{h}u}
   depends on the dimension 
  
    
      
        n
      
    
    {\displaystyle n}
  .
In 1D the Laplace operator is approximated as 

This approximation is usually expressed via the following stencil

and which represents a symmetric, tridiagonal matrix. 
For an equidistant grid one gets a Toeplitz matrix.
The 2D case shows all the characteristics of the more general n-dimensional case. Each second partial derivative needs to be approximated similar to the 1D case 

which is usually given by the following stencil

Consistency
Consistency of the above-mentioned approximation can be shown for highly regular functions, such as 
  
    
      
        u
        ∈
        
          C
          
            4
          
        
        (
        Ω
        )
      
    
    {\displaystyle u\in C^{4}(\Omega )}
  .
The statement is

To prove this, one needs to substitute Taylor Series expansions up to order 3 into the discrete Laplace operator.

Properties
Subharmonic
Similar to continuous subharmonic functions one can define subharmonic functions for finite-difference approximations 
  
    
      
        
          u
          
            h
          
        
      
    
    {\displaystyle u_{h}}

Mean value
One can define a general stencil of positive type via

If 
  
    
      
        
          u
          
            h
          
        
      
    
    {\displaystyle u_{h}}
   is (discrete) subharmonic then the following mean value property holds

where the approximation is evaluated on points of the grid, and the stencil is assumed to be of positive type.
A similar mean value property also holds for the continuous case.

Maximum principle
For a (discrete) subharmonic function 
  
    
      
        
          u
          
            h
          
        
      
    
    {\displaystyle u_{h}}
   the following holds

where 
  
    
      
        
          Ω
          
            h
          
        
        ,
        ∂
        
          Ω
          
            h
          
        
      
    
    {\displaystyle \Omega _{h},\partial \Omega _{h}}
   are discretizations of the continuous domain 
  
    
      
        Ω
      
    
    {\displaystyle \Omega }
  , respectively the boundary 
  
    
      
        ∂
        Ω
      
    
    {\displaystyle \partial \Omega }
  .
A similar maximum principle also holds for the continuous case.

The SBP-SAT method
The SBP-SAT (summation by parts - simultaneous approximation term) method is a stable and accurate technique for discretizing and imposing boundary conditions of a well-posed partial differential equation using high order finite differences.The method is based on finite differences where the differentiation operators exhibit summation-by-parts properties. Typically, these operators consist of differentiation matrices with central difference stencils in the interior with carefully chosen one-sided boundary stencils designed to mimic integration-by-parts in the discrete setting. Using the SAT technique, the boundary conditions of the PDE are imposed weakly, where the boundary values are "pulled" towards the desired conditions rather than exactly fulfilled. If the tuning parameters (inherent to the SAT technique) are chosen properly, the resulting system of ODE's will exhibit similar energy behavior as the continuous PDE, i.e. the system has no non-physical energy growth. This guarantees stability if an integration scheme with a stability region that includes parts of the imaginary axis, such as the fourth order Runge-Kutta method, is used. This makes the SAT technique an attractive method of imposing boundary conditions for higher order finite difference methods, in contrast to for example the injection method, which typically will not be stable if high order differentiation operators are used.

See also
References
Further reading
K.W. Morton and D.F. Mayers, Numerical Solution of Partial Differential Equations, An Introduction. Cambridge University Press, 2005.
Autar Kaw and E. Eric Kalu, Numerical Methods with Applications, (2008) [1]. Contains a brief, engineering-oriented introduction to FDM (for ODEs) in Chapter 08.07.
John Strikwerda (2004). Finite Difference Schemes and Partial Differential Equations (2nd ed.). SIAM. ISBN 978-0-89871-639-9.
Smith, G. D. (1985), Numerical Solution of Partial Differential Equations: Finite Difference Methods, 3rd ed., Oxford University Press
Peter Olver (2013). Introduction to Partial Differential Equations. Springer. Chapter 5: Finite differences. ISBN 978-3-319-02099-0..
Randall J. LeVeque, Finite Difference Methods for Ordinary and Partial Differential Equations, SIAM, 2007.
Sergey Lemeshevsky, Piotr Matus, Dmitriy Poliakov(Eds): "Exact Finite-Difference Schemes", De Gruyter (2016). DOI: https://doi.org/10.1515/9783110491326 .