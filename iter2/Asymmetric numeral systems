Asymmetric numeral systems (ANS) is a family of entropy encoding methods introduced by Jarosław (Jarek) Duda from Jagiellonian University, used in data compression since 2014 due to improved performance compared to previous methods. ANS combines the compression ratio of arithmetic coding (which uses a nearly accurate probability distribution), with a processing cost similar to that of Huffman coding. In the tabled ANS (tANS) variant, this is achieved by constructing a finite-state machine to operate on a large alphabet without using multiplication.
Among others, ANS is used in the Facebook Zstandard compressor (also used e.g. in Linux kernel, Android operating system, was published as RFC 8478 for MIME and HTTP), Apple LZFSE compressor, Google Draco 3D compressor (used e.g. in Pixar Universal Scene Description format) and PIK image compressor, CRAM DNA compressor from SAMtools utilities,Dropbox DivANS compressor, Microsoft DirectStorage BCPack texture compressor, and JPEG XL image compressor.
The basic idea is to encode information into a single natural number 
  
    
      
        x
      
    
    {\displaystyle x}
  . In the standard binary number system, we can add a bit 
  
    
      
        s
        ∈
        {
        0
        ,
        1
        }
      
    
    {\displaystyle s\in \{0,1\}}
   of information to 
  
    
      
        x
      
    
    {\displaystyle x}
   by appending 
  
    
      
        s
      
    
    {\displaystyle s}
   at the end of 
  
    
      
        x
      
    
    {\displaystyle x}
  , which gives us 
  
    
      
        
          x
          ′
        
        =
        2
        x
        +
        s
      
    
    {\displaystyle x'=2x+s}
  . For an entropy coder, this is optimal if 
  
    
      
        Pr
        (
        0
        )
        =
        Pr
        (
        1
        )
        =
        1
        
          /
        
        2
      
    
    {\displaystyle \Pr(0)=\Pr(1)=1/2}
  . ANS generalizes this process for arbitrary sets of symbols 
  
    
      
        s
        ∈
        S
      
    
    {\displaystyle s\in S}
   with an accompanying probability distribution 
  
    
      
        (
        
          p
          
            s
          
        
        
          )
          
            s
            ∈
            S
          
        
      
    
    {\displaystyle (p_{s})_{s\in S}}
  . In ANS, if the information from 
  
    
      
        s
      
    
    {\displaystyle s}
   is appended to 
  
    
      
        x
      
    
    {\displaystyle x}
   to result in 
  
    
      
        
          x
          ′
        
      
    
    {\displaystyle x'}
  , then 
  
    
      
        
          x
          ′
        
        ≈
        x
        ⋅
        
          p
          
            s
          
          
            −
            1
          
        
      
    
    {\displaystyle x'\approx x\cdot p_{s}^{-1}}
  . Equivalently, 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        
          x
          ′
        
        )
        ≈
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
        +
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        
          p
          
            s
          
        
        )
      
    
    {\displaystyle \log _{2}(x')\approx \log _{2}(x)+\log _{2}(1/p_{s})}
  , where 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
      
    
    {\displaystyle \log _{2}(x)}
   is the number of bits of information stored in the number 
  
    
      
        x
      
    
    {\displaystyle x}
  , and 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        
          p
          
            s
          
        
        )
      
    
    {\displaystyle \log _{2}(1/p_{s})}
   is the number of bits contained in the symbol 
  
    
      
        s
      
    
    {\displaystyle s}
  .
For the encoding rule, the set of natural numbers is split into disjoint subsets corresponding to different symbols –  like into even and odd numbers, but with densities corresponding to the probability distribution of the symbols to encode. Then to add information from symbol 
  
    
      
        s
      
    
    {\displaystyle s}
   into the information already stored in the current number 
  
    
      
        x
      
    
    {\displaystyle x}
  , we go to number 
  
    
      
        
          x
          ′
        
        =
        C
        (
        x
        ,
        s
        )
        ≈
        x
        
          /
        
        p
      
    
    {\displaystyle x'=C(x,s)\approx x/p}
   being the position of the 
  
    
      
        x
      
    
    {\displaystyle x}
  -th appearance from the 
  
    
      
        s
      
    
    {\displaystyle s}
  -th subset.
There are alternative ways to apply it in practice –  direct mathematical formulas for encoding and decoding steps (uABS and rANS variants), or one can put the entire behavior into a table (tANS variant). Renormalization is used to prevent 
  
    
      
        x
      
    
    {\displaystyle x}
   going to infinity –  transferring accumulated bits to or from the bitstream.

Entropy coding
Suppose a sequence of 1,000 zeros and ones would be encoded, which would take 1000 bits to store directly. However, if it is somehow known that it only contains 1 zero and 999 ones, it would be sufficient to encode the zero's position, which requires only 
  
    
      
        ⌈
        
          log
          
            2
          
        
        ⁡
        (
        1000
        )
        ⌉
        ≈
        10
      
    
    {\displaystyle \lceil \log _{2}(1000)\rceil \approx 10}
   bits here instead of the original 1000 bits.
Generally, such length 
  
    
      
        n
      
    
    {\displaystyle n}
   sequences containing 
  
    
      
        p
        n
      
    
    {\displaystyle pn}
   zeros and 
  
    
      
        (
        1
        −
        p
        )
        n
      
    
    {\displaystyle (1-p)n}
   ones, for some probability 
  
    
      
        p
        ∈
        (
        0
        ,
        1
        )
      
    
    {\displaystyle p\in (0,1)}
  , are called combinations. Using Stirling's approximation we get their asymptotic number being

  
    
      
        
          
            
              (
            
            
              n
              
                p
                n
              
            
            
              )
            
          
        
        ≈
        
          2
          
            n
            h
            (
            p
            )
          
        
        
           for large 
        
        n
        
           and 
        
        h
        (
        p
        )
        =
        −
        p
        
          log
          
            2
          
        
        ⁡
        (
        p
        )
        −
        (
        1
        −
        p
        )
        
          log
          
            2
          
        
        ⁡
        (
        1
        −
        p
        )
        ,
      
    
    {\displaystyle {n \choose pn}\approx 2^{nh(p)}{\text{ for large }}n{\text{ and }}h(p)=-p\log _{2}(p)-(1-p)\log _{2}(1-p),}
  called Shannon entropy.
Hence, to choose one such sequence we need approximately 
  
    
      
        n
        h
        (
        p
        )
      
    
    {\displaystyle nh(p)}
   bits. It is still 
  
    
      
        n
      
    
    {\displaystyle n}
   bits if 
  
    
      
        p
        =
        1
        
          /
        
        2
      
    
    {\displaystyle p=1/2}
  , however, it can also be much smaller. For example, we need only 
  
    
      
        ≈
        n
        
          /
        
        2
      
    
    {\displaystyle \approx n/2}
   bits for 
  
    
      
        p
        =
        0.11
      
    
    {\displaystyle p=0.11}
  .
An entropy coder allows the encoding of a sequence of symbols using approximately the Shannon entropy bits per symbol. For example, ANS could be directly used to enumerate combinations: assign a different natural number to every sequence of symbols having fixed proportions in a nearly optimal way.
In contrast to encoding combinations, this probability distribution usually varies in data compressors. For this purpose, Shannon entropy can be seen as a weighted average: a symbol of probability 
  
    
      
        p
      
    
    {\displaystyle p}
   contains 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        p
        )
      
    
    {\displaystyle \log _{2}(1/p)}
   bits of information. ANS encodes information into a single natural number 
  
    
      
        x
      
    
    {\displaystyle x}
  , interpreted as containing 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
      
    
    {\displaystyle \log _{2}(x)}
   bits of information. Adding information from a symbol of probability 
  
    
      
        p
      
    
    {\displaystyle p}
   increases this informational content to 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
        +
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        p
        )
        =
        
          log
          
            2
          
        
        ⁡
        (
        x
        
          /
        
        p
        )
      
    
    {\displaystyle \log _{2}(x)+\log _{2}(1/p)=\log _{2}(x/p)}
  . Hence, the new number containing both information should be 
  
    
      
        
          x
          ′
        
        ≈
        x
        
          /
        
        p
      
    
    {\displaystyle x'\approx x/p}
  .

Motivating examples
Consider a source with 3 letters A, B, C, with probability 1/2, 1/4, 1/4. It is simple to construct the optimal prefix code in binary: A = 0, B = 10, C = 11. Then, a message is encoded as ABC -> 01011.
We see that an equivalent method for performing the encoding is as follows:

Start with number 1, and perform an operation on the number for each input letter.
A = multiply by 2; B = multiply by 4, add 2; C = multiply by 4, add 3.
Express the number in binary, then remove the first digit 1.Consider a more general source with k letters, with rational probabilities 
  
    
      
        
          n
          
            1
          
        
        
          /
        
        N
        ,
        .
        .
        .
        ,
        
          n
          
            k
          
        
        
          /
        
        N
      
    
    {\displaystyle n_{1}/N,...,n_{k}/N}
  . Then performing arithmetic coding on the source requires only exact arithmetic with integers.
In general, ANS is an approximation of arithmetic coding that approximates the real probabilities 
  
    
      
        
          r
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          r
          
            k
          
        
      
    
    {\displaystyle r_{1},...,r_{k}}
   by rational numbers 
  
    
      
        
          n
          
            1
          
        
        
          /
        
        N
        ,
        .
        .
        .
        ,
        
          n
          
            k
          
        
        
          /
        
        N
      
    
    {\displaystyle n_{1}/N,...,n_{k}/N}
   with a small denominator 
  
    
      
        N
      
    
    {\displaystyle N}
  .

Basic concepts of ANS
Imagine there is some information stored in a natural number 
  
    
      
        x
      
    
    {\displaystyle x}
  , for example as bit sequence of its binary expansion. To add information from a binary variable 
  
    
      
        s
      
    
    {\displaystyle s}
  , we can use coding function 
  
    
      
        
          x
          ′
        
        =
        C
        (
        x
        ,
        s
        )
        =
        2
        x
        +
        s
      
    
    {\displaystyle x'=C(x,s)=2x+s}
  , which shifts all bits one position up, and place the new bit in the least significant position. Now decoding function 
  
    
      
        D
        (
        
          x
          ′
        
        )
        =
        (
        ⌊
        
          x
          ′
        
        
          /
        
        2
        ⌋
        ,
        
          m
          o
          d
        
        (
        
          x
          ′
        
        ,
        2
        )
        )
      
    
    {\displaystyle D(x')=(\lfloor x'/2\rfloor ,\mathrm {mod} (x',2))}
   allows one to retrieve the previous 
  
    
      
        x
      
    
    {\displaystyle x}
   and this added bit: 
  
    
      
        D
        (
        C
        (
        x
        ,
        s
        )
        )
        =
        (
        x
        ,
        s
        )
        ,
         
        C
        (
        D
        (
        
          x
          ′
        
        )
        )
        =
        
          x
          ′
        
      
    
    {\displaystyle D(C(x,s))=(x,s),\ C(D(x'))=x'}
  . We can start with 
  
    
      
        x
        =
        1
      
    
    {\displaystyle x=1}
   initial state, then use the 
  
    
      
        C
      
    
    {\displaystyle C}
   function on the successive bits of a finite bit sequence to obtain a final 
  
    
      
        x
      
    
    {\displaystyle x}
   number storing this entire sequence. Then using 
  
    
      
        D
      
    
    {\displaystyle D}
   function multiple times until 
  
    
      
        x
        =
        1
      
    
    {\displaystyle x=1}
   allows one to retrieve the bit sequence in reversed order.
The above procedure is optimal for the uniform (symmetric) probability distribution of symbols 
  
    
      
        Pr
        (
        0
        )
        =
        Pr
        (
        1
        )
        =
        1
        
          /
        
        2
      
    
    {\displaystyle \Pr(0)=\Pr(1)=1/2}
  . ANS generalize it to make it optimal for any chosen (asymmetric) probability distribution of symbols: 
  
    
      
        Pr
        (
        s
        )
        =
        
          p
          
            s
          
        
      
    
    {\displaystyle \Pr(s)=p_{s}}
  . While 
  
    
      
        s
      
    
    {\displaystyle s}
   in the above example was choosing between even and odd 
  
    
      
        C
        (
        x
        ,
        s
        )
      
    
    {\displaystyle C(x,s)}
  , in ANS this even/odd division of natural numbers is replaced with division into subsets having densities corresponding to the assumed probability distribution 
  
    
      
        {
        
          p
          
            s
          
        
        
          }
          
            s
          
        
      
    
    {\displaystyle \{p_{s}\}_{s}}
  : up to position 
  
    
      
        x
      
    
    {\displaystyle x}
  , there are approximately 
  
    
      
        x
        
          p
          
            s
          
        
      
    
    {\displaystyle xp_{s}}
   occurrences of symbol 
  
    
      
        s
      
    
    {\displaystyle s}
  .
The coding function 
  
    
      
        C
        (
        x
        ,
        s
        )
      
    
    {\displaystyle C(x,s)}
   returns the 
  
    
      
        x
      
    
    {\displaystyle x}
  -th appearance from such subset corresponding to symbol 
  
    
      
        s
      
    
    {\displaystyle s}
  . The density assumption is equivalent to condition 
  
    
      
        
          x
          ′
        
        =
        C
        (
        x
        ,
        s
        )
        ≈
        x
        
          /
        
        
          p
          
            s
          
        
      
    
    {\displaystyle x'=C(x,s)\approx x/p_{s}}
  . Assuming that a natural number 
  
    
      
        x
      
    
    {\displaystyle x}
   contains 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
      
    
    {\displaystyle \log _{2}(x)}
   bits of information, 
  
    
      
        
          log
          
            2
          
        
        ⁡
        (
        C
        (
        x
        ,
        s
        )
        )
        ≈
        
          log
          
            2
          
        
        ⁡
        (
        x
        )
        +
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        
          p
          
            s
          
        
        )
      
    
    {\displaystyle \log _{2}(C(x,s))\approx \log _{2}(x)+\log _{2}(1/p_{s})}
  . Hence the symbol of probability 
  
    
      
        
          p
          
            s
          
        
      
    
    {\displaystyle p_{s}}
   is encoded as containing 
  
    
      
        ≈
        
          log
          
            2
          
        
        ⁡
        (
        1
        
          /
        
        
          p
          
            s
          
        
        )
      
    
    {\displaystyle \approx \log _{2}(1/p_{s})}
   bits of information as it is required from entropy coders.

Uniform binary variant (uABS)
Let us start with the binary alphabet and a probability distribution 
  
    
      
        Pr
        (
        1
        )
        =
        p
      
    
    {\displaystyle \Pr(1)=p}
  , 
  
    
      
        Pr
        (
        0
        )
        =
        1
        −
        p
      
    
    {\displaystyle \Pr(0)=1-p}
  . Up to position 
  
    
      
        x
      
    
    {\displaystyle x}
   we want approximately 
  
    
      
        p
        ⋅
        x
      
    
    {\displaystyle p\cdot x}
   analogues of odd numbers (for 
  
    
      
        s
        =
        1
      
    
    {\displaystyle s=1}
  ). We can choose this number of appearances as 
  
    
      
        ⌈
        x
        ⋅
        p
        ⌉
      
    
    {\displaystyle \lceil x\cdot p\rceil }
  , getting 
  
    
      
        s
        =
        ⌈
        (
        x
        +
        1
        )
        ⋅
        p
        ⌉
        −
        ⌈
        x
        ⋅
        p
        ⌉
      
    
    {\displaystyle s=\lceil (x+1)\cdot p\rceil -\lceil x\cdot p\rceil }
  . This variant is called uABS and leads to the following decoding and encoding functions:Decoding:

Encoding:

For 
  
    
      
        p
        =
        1
        
          /
        
        2
      
    
    {\displaystyle p=1/2}
   it amounts to the standard binary system (with 0 and 1  inverted), for a different 
  
    
      
        p
      
    
    {\displaystyle p}
   it becomes optimal for this given probability distribution. For example, for 
  
    
      
        p
        =
        0.3
      
    
    {\displaystyle p=0.3}
   these formulas lead to a table for small values of 
  
    
      
        x
      
    
    {\displaystyle x}
  :

The symbol 
  
    
      
        s
        =
        1
      
    
    {\displaystyle s=1}
   corresponds to a subset of natural numbers with density 
  
    
      
        p
        =
        0.3
      
    
    {\displaystyle p=0.3}
  , which in this case are positions 
  
    
      
        {
        0
        ,
        3
        ,
        6
        ,
        10
        ,
        13
        ,
        16
        ,
        20
        ,
        23
        ,
        26
        ,
        …
        }
      
    
    {\displaystyle \{0,3,6,10,13,16,20,23,26,\ldots \}}
  . As 
  
    
      
        1
        
          /
        
        4
        <
        0.3
        <
        1
        
          /
        
        3
      
    
    {\displaystyle 1/4<0.3<1/3}
  , these positions increase by 3 or 4. Because 
  
    
      
        p
        =
        3
        
          /
        
        10
      
    
    {\displaystyle p=3/10}
   here, the pattern of symbols repeats every 10 positions.
The coding 
  
    
      
        C
        (
        x
        ,
        s
        )
      
    
    {\displaystyle C(x,s)}
   can be found by taking the row corresponding to a given symbol 
  
    
      
        s
      
    
    {\displaystyle s}
  , and choosing the given 
  
    
      
        x
      
    
    {\displaystyle x}
   in this row. Then the top row provides 
  
    
      
        C
        (
        x
        ,
        s
        )
      
    
    {\displaystyle C(x,s)}
  . For example, 
  
    
      
        C
        (
        7
        ,
        0
        )
        =
        11
      
    
    {\displaystyle C(7,0)=11}
   from the middle to the top row.
Imagine we would like to encode the sequence '0100' starting from 
  
    
      
        x
        =
        1
      
    
    {\displaystyle x=1}
  . First 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
   takes us to 
  
    
      
        x
        =
        2
      
    
    {\displaystyle x=2}
  , then 
  
    
      
        s
        =
        1
      
    
    {\displaystyle s=1}
   to 
  
    
      
        x
        =
        6
      
    
    {\displaystyle x=6}
  , then 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
   to 
  
    
      
        x
        =
        9
      
    
    {\displaystyle x=9}
  , then 
  
    
      
        s
        =
        0
      
    
    {\displaystyle s=0}
   to 
  
    
      
        x
        =
        14
      
    
    {\displaystyle x=14}
  . By using the decoding function 
  
    
      
        D
        (
        
          x
          ′
        
        )
      
    
    {\displaystyle D(x')}
   on this final 
  
    
      
        x
      
    
    {\displaystyle x}
  , we can retrieve the symbol sequence. Using the table for this purpose, 
  
    
      
        x
      
    
    {\displaystyle x}
   in the first row determines the column, then the non-empty row and the written value determine the corresponding 
  
    
      
        s
      
    
    {\displaystyle s}
   and 
  
    
      
        x
      
    
    {\displaystyle x}
  .

Range variants (rANS) and streaming
The range variant also uses arithmetic formulas, but allows operation on a large alphabet. Intuitively, it divides the set of natural numbers into size 
  
    
      
        
          2
          
            n
          
        
      
    
    {\displaystyle 2^{n}}
   ranges, and split each of them in identical way into subranges of proportions given by the assumed probability distribution.
We start with quantization of probability distribution to 
  
    
      
        
          2
          
            n
          
        
      
    
    {\displaystyle 2^{n}}
   denominator, where n is chosen (usually 8-12 bits): 
  
    
      
        
          p
          
            s
          
        
        ≈
        f
        [
        s
        ]
        
          /
        
        
          2
          
            n
          
        
      
    
    {\displaystyle p_{s}\approx f[s]/2^{n}}
   for some natural 
  
    
      
        f
        [
        s
        ]
      
    
    {\displaystyle f[s]}
   numbers (sizes of subranges).
Denote 
  
    
      
        
          mask
        
        =
        
          2
          
            n
          
        
        −
        1
      
    
    {\displaystyle {\text{mask}}=2^{n}-1}
  , and a cumulative distribution function:

  
    
      
        CDF
        ⁡
        [
        s
        ]
        =
        
          ∑
          
            i
            <
            s
          
        
        f
        [
        i
        ]
        =
        f
        [
        0
        ]
        +
        ⋯
        +
        f
        [
        s
        −
        1
        ]
        .
      
    
    {\displaystyle \operatorname {CDF} [s]=\sum _{i<s}f[i]=f[0]+\cdots +f[s-1].}
  Note here that the 
CDF[s] function is not a true CDF in that the current symbol's probability is not included in the expression's value. Instead, the CDF[s] represents the total probability of all previous symbols. Example: Instead of the normal definition of CDF[0] = f[0], it is evaluated as CDF[0] = 0, since there are no previous symbols.
For 
  
    
      
        y
        ∈
        [
        0
        ,
        
          2
          
            n
          
        
        −
        1
        ]
      
    
    {\displaystyle y\in [0,2^{n}-1]}
   denote function (usually tabled)

Now coding function is:

Decoding: s = symbol(x & mask)

This way we can encode a sequence of symbols into a large natural number x. To avoid using large number arithmetic, in practice stream variants are used: which enforce 
  
    
      
        x
        ∈
        [
        L
        ,
        b
        ⋅
        L
        −
        1
        ]
      
    
    {\displaystyle x\in [L,b\cdot L-1]}
   by renormalization: sending the least significant bits of x to or from the bitstream (usually L and b are powers of 2).
In rANS variant x is for example 32 bit. For 16 bit renormalization, 
  
    
      
        x
        ∈
        [
        
          2
          
            16
          
        
        ,
        
          2
          
            32
          
        
        −
        1
        ]
      
    
    {\displaystyle x\in [2^{16},2^{32}-1]}
  , decoder refills the least significant bits from the bitstream when needed:

Tabled variant (tANS)
tANS variant puts the entire behavior (including renormalization) for 
  
    
      
        x
        ∈
        [
        L
        ,
        2
        L
        −
        1
        ]
      
    
    {\displaystyle x\in [L,2L-1]}
   into a table which yields a finite-state machine avoiding the need of multiplication.
Finally, the step of the decoding loop can be written as:

The step of the encoding loop:

A specific tANS coding is determined by assigning a symbol to every 
  
    
      
        [
        L
        ,
        2
        L
        −
        1
        ]
      
    
    {\displaystyle [L,2L-1]}
   position, their number of appearances should be proportional to the assumed probabilities. For example, one could choose "abdacdac" assignment for Pr(a)=3/8, Pr(b)=1/8, Pr(c)=2/8, Pr(d)=2/8 probability distribution. If symbols are assigned in ranges of lengths being powers of 2, we would get Huffman coding. For example, a->0, b->100, c->101, d->11 prefix code would be obtained for tANS with "aaaabcdd" symbol assignment.

Remarks
As for Huffman coding, modifying the probability distribution of tANS is relatively costly, hence it is mainly used in static situations, usually with some Lempel–Ziv scheme (e.g. ZSTD, LZFSE). In this case, the file is divided into blocks - for each of them symbol frequencies are independently counted, then after approximation (quantization) written in the block header and used as static probability distribution for tANS.
In contrast, rANS is usually used as a faster replacement for range coding (e.g. CRAM, LZNA, Draco,). It requires multiplication, but is more memory efficient and is appropriate for dynamically adapting probability distributions.
Encoding and decoding of ANS are performed in opposite directions, making it a stack for symbols. This inconvenience is usually resolved by encoding in backward direction, after which decoding can be done forward. For context-dependence, like Markov model, the encoder needs to use context from the perspective of later decoding. For adaptivity, the encoder should first go forward to find probabilities which will be used (predicted) by decoder and store them in a buffer, then encode in backward direction using the buffered probabilities.
The final state of encoding is required to start decoding, hence it needs to be stored in the compressed file. This cost can be compensated by storing some information in the initial state of encoder. For example, instead of starting with "10000" state, start with "1****" state, where "*" are some additional stored bits, which can be retrieved at the end of the decoding. Alternatively, this state can be used as a checksum by starting encoding with a fixed state, and testing if the final state of decoding is the expected one.

Patent controversy
The author of the novel ANS algorithm and its variants tANS and rANS specifically intended his work to be available freely in the public domain, for altruistic reasons. He has not sought to profit from them and took steps to ensure they would not become a "legal minefield", or restricted by, or profited from by others. In 2015, Google published a US and then worldwide patent for "Mixed boolean-token ans coefficient coding". At the time, Professor Duda had been asked by Google to help it with video compression, so was intimately aware of this domain, having the original author assisting them.
Duda was not pleased by (accidentally) discovering Google's patent intentions, given he had been clear he wanted it as public domain, and had assisted Google specifically on that basis. Duda subsequently filed a third-party application to the US Patent office seeking a rejection. The USPTO rejected its application in 2018, and Google subsequently abandoned the patent.In June 2019 Microsoft lodged a patent application called "Features of range asymmetric number system encoding and decoding". The USPTO issued a final rejection of the application on October 27, 2020. Yet on March 2, 2021, Microsoft gave a USPTO explanatory filing stating "The Applicant respectfully disagrees with the rejections.", seeking to overturn the final rejection under the "After Final Consideration Pilot 2.0" program. After reconsideration, the USPTO granted the application on January 25, 2022.

See also
Entropy encoding
Huffman coding
Arithmetic coding
Range encoding
Zstandard Facebook compressor
LZFSE Apple compressor

References
External links
High throughput hardware architectures for asymmetric numeral systems entropy coding S. M. Najmabadi, Z. Wang, Y. Baroud, S. Simon, ISPA 2015
New Generation Entropy coders Finite state entropy (FSE) implementation of tANS by Yann Collet
rygorous/ryg_rans Implementation of rANS by Fabian Giesen
jkbonfield/rans_static Fast implementation of rANS and aritmetic coding by James K. Bonfield
facebook/zstd Facebook Zstandard compressor by Yann Collet (author of LZ4)
LZFSE LZFSE compressor (LZ+FSE) of Apple Inc.
CRAM 3.0 DNA compressor (order 1 rANS) (part of SAMtools) by European Bioinformatics Institute
[1] implementation for Google VP10
[2] implementation for Google WebP
[3] Google Draco 3D compression library
aom_dsp - aom - Git at Google implementation of Alliance for Open Media
Data Compression Using Asymmetric Numeral Systems - Wolfram Demonstrations Project Wolfram Demonstrations Project
GST: GPU-decodable Supercompressed Textures GST: GPU-decodable Supercompressed Textures
Understanding compression book by A. Haecky, C. McAnlis