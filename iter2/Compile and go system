In computer programming, a compile and go system, compile, load, and go system, assemble and go system, or load and go system
is a programming language processor in which the compilation, assembly, or link steps are not separated from program execution.  The intermediate forms of the program are generally kept in primary memory, and not saved to the file system.Examples of compile-and-go systems are WATFOR, PL/C, and Dartmouth BASIC. An example of load-and-go systems is the loader Anthony J. Barr wrote for the University Computing Corporation in 1968 that was replaced in the market by the IBM OS/360 loader in 1972. These OS/360 loaders performed many of the functions of the Linkage Editor but placed the linked program in memory rather than creating an executable on disk. Compile and go systems differ from interpreters, which either directly execute source code or execute an intermediate representation.

Analysis
Advantages of compile-and-go systems are:

The user need not be concerned with the separate steps of compilation, assembling, linking, loading, and executing.
Execution speed is generally much superior to interpreted systems.
They are simple and easier to implement.Disadvantages of compile-and-go loaders are:

There is wastage in memory space due to the presence of the assembler or compiler.
The code must be reprocessed every time it is run.
Systems with multiple modules, possibly in different languages, cannot be handled naturally within this framework.Compile-and-go systems were popular in academic environments, where student programs were small, compiled many times, usually executed quickly and, once debugged, seldom needed to be re-executed.

See also
Ahead-of-time compilation

References
Cross-reference
Sources used
External links
Dave Yost’s “compileAndGo” for any compiled language