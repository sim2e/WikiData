In formal languages, terminal and nonterminal symbols are the lexical elements used in specifying the production rules constituting a formal grammar.  Terminal symbols are the elementary symbols of the  language defined as part of a formal grammar.  Nonterminal symbols (or syntactic variables) are replaced by groups of terminal symbols according to the production rules.
The terminals and nonterminals of a particular grammar are in two  completely separate sets.

Terminal symbols
Terminal symbols are symbols that may appear in the outputs of the production rules of a formal grammar and which cannot be changed using the rules of the grammar. Applying the rules recursively to a source string of symbols will usually terminate in a final output string consisting only of terminal symbols.
Consider a grammar defined by two rules. In this grammar, the symbol Б is a terminal symbol and Ψ is both a non-terminal symbol and the start symbol. The production rules for creating strings are as follows:

The symbol Ψ can become БΨ
The symbol Ψ can become БHere Б is a terminal symbol because no rule exists which would change it into something else. On the other hand, Ψ has two rules that can change it, thus it is nonterminal. A formal language defined or generated by a particular grammar is the set of strings that can be produced by the grammar and that consist only of terminal symbols. Diagram 1 illustrates a string that can be produced with this grammar.

Nonterminal symbols
Nonterminal symbols are those symbols that can be replaced. They may also be called simply syntactic variables. A formal grammar includes a start symbol, a designated member of the set of nonterminals from which all the strings in the language may be derived by successive applications of the production rules. In fact, the language defined by a grammar is precisely the set of terminal strings that can be so derived.
Context-free grammars are those grammars in which the left-hand side of each production rule consists of only a single nonterminal symbol. This restriction is non-trivial; not all languages can be generated by context-free grammars. Those that can are called context-free languages. 
These are exactly the languages that can be recognized by a non-deterministic push down automaton. Context-free languages are the theoretical basis for the syntax of most programming languages.

Production rules
A grammar is defined by production rules (or just 'productions') that specify which symbols may replace which other symbols; these rules may be used to generate strings, or to parse them. Each such rule has a head, or left-hand side, which consists of the string that may be replaced, and a body, or right-hand side, which consists of a string that may replace it. Rules are often written in the form head → body; e.g., the rule a → b specifies that a can be replaced by b.
In the classic formalization of generative grammars first proposed by Noam Chomsky in the 1950s, a grammar G consists of the following components:

A finite set N of nonterminal symbols.
A finite set Σ of terminal symbols that is disjoint from N.
A finite set P of production rules, each rule of the form
  
    
      
        (
        Σ
        ∪
        N
        
          )
          
            ∗
          
        
        N
        (
        Σ
        ∪
        N
        
          )
          
            ∗
          
        
        →
        (
        Σ
        ∪
        N
        
          )
          
            ∗
          
        
      
    
    {\displaystyle (\Sigma \cup N)^{*}N(\Sigma \cup N)^{*}\rightarrow (\Sigma \cup N)^{*}}
  
where 
  
    
      
        
          

          
          
            ∗
          
        
      
    
    {\displaystyle {}^{*}}
   is the Kleene star operator and ∪ denotes set union, so 
  
    
      
        (
        Σ
        ∪
        N
        
          )
          
            ∗
          
        
      
    
    {\displaystyle (\Sigma \cup N)^{*}}
   represents zero or more symbols, and N means one nonterminal symbol. That is, each production rule maps from one string of symbols to another, where the first string contains at least one nonterminal symbol. In the case that the body consists solely of the empty string, it may be denoted with a special notation (often Λ, e or ε) in order to avoid confusion.A distinguished symbol 
  
    
      
        S
        ∈
        N
      
    
    {\displaystyle S\in N}
   that is the start symbol.A grammar is formally defined as the ordered quadruple 
  
    
      
        ⟨
        N
        ,
        Σ
        ,
        P
        ,
        S
        ⟩
      
    
    {\displaystyle \langle N,\Sigma ,P,S\rangle }
  . Such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature.

Example
Backus–Naur form is a notation for expressing certain grammars. For instance, the following production rules in Backus-Naur form are used to represent an integer (which may be signed):

In this example, the symbols (-,0,1,2,3,4,5,6,7,8,9) are terminal symbols and <digit> and <integer> are nonterminal symbols. 
Another example is:

  
    
      
        
          S
          ⟶
          cAd
        
      
    
    {\displaystyle {\ce {S -> cAd}}}
  
  
    
      
        
          A
          ⟶
          a
          
            |
          
          ab
        
      
    
    {\displaystyle {\ce {A -> a | ab}}}
  In this example, the symbols a,b,c,d are terminal symbols and S,A are nonterminal symbols.

See also
Alphabet (formal languages)
Chomsky Hierarchy
Recursive grammar

Notes


== References ==