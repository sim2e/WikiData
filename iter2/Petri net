A Petri net, also known as a place/transition (PT) net, is one of several mathematical modeling languages for the description of distributed systems.  It is a class of discrete event dynamic system. A Petri net is a directed bipartite graph that has two types of elements: places and transitions.  Place elements are depicted as white circles and transition elements are depicted as rectangles. 
A place can contain any number of tokens, depicted as black circles. A transition is enabled if all places connected to it as inputs contain at least one token. Some sources state that Petri nets were invented in August 1939 by Carl Adam Petri—at the age of 13—for the purpose of describing chemical processes.
Like industry standards such as UML activity diagrams, Business Process Model and Notation, and event-driven process chains, Petri nets offer a graphical notation for stepwise processes that include choice, iteration, and concurrent execution. Unlike these standards, Petri nets have an exact mathematical definition of their execution semantics, with a well-developed mathematical theory for process analysis.

Historical background
The German computer scientist Carl Adam Petri, after whom such structures are named, analyzed Petri nets extensively in his 1962 dissertation Kommunikation mit Automaten.

Petri net basics
A Petri net consists of places, transitions, and arcs. Arcs run from a place to a transition or vice versa, never between places or between transitions. The places from which an arc runs to a transition are called the input places of the transition; the places to which arcs run from a transition are called the output places of the transition.
Graphically, places in a Petri net may contain a discrete number of marks called tokens.  Any distribution of tokens over the places will represent a configuration of the net called a marking.  In an abstract sense relating to a Petri net diagram, a transition of a Petri net may fire if it is enabled, i.e. there are sufficient tokens in all of its input places; when the transition fires, it consumes the required input tokens, and creates tokens in its output places. A firing is atomic, i.e. a single non-interruptible step.
Unless an execution policy (e.g. a strict ordering of transitions, describing precedence) is defined, the execution of Petri nets is nondeterministic: when multiple transitions are enabled at the same time, they will fire in any order.
Since firing is nondeterministic, and multiple tokens may be present anywhere in the net (even in the same place), Petri nets are well suited for modeling the concurrent behavior of distributed systems.

Formal definition and basic terminology
Petri nets are state-transition systems that extend a class of nets called elementary nets.Definition 1. A net is a tuple 
  
    
      
        N
        =
        (
        P
        ,
        T
        ,
        F
        )
      
    
    {\displaystyle N=(P,T,F)}
   where

  
    
      
        P
      
    
    {\displaystyle P}
   and 
  
    
      
        T
      
    
    {\displaystyle T}
   are disjoint finite sets of places and transitions, respectively.

  
    
      
        F
        ⊆
        (
        P
        ×
        T
        )
        ∪
        (
        T
        ×
        P
        )
      
    
    {\displaystyle F\subseteq (P\times T)\cup (T\times P)}
   is a set of (directed) arcs (or flow relations).Definition 2. Given a net N = (P, T, F), a configuration is a set C so that C ⊆ P.

Definition 3. An elementary net is a net of the form EN = (N, C) where

N = (P, T, F) is a net.
C is such that C ⊆ P is a configuration.Definition 4. A Petri net is a net of the form PN = (N, M, W), which extends the elementary net so that

N = (P, T, F) is a net.
M : P → Z is a place multiset, where Z is a countable set. M extends the concept of configuration and is commonly described with reference to Petri net diagrams as a marking.
W : F → Z is an arc multiset, so that the count (or weight) for each arc is a measure of the arc multiplicity.If a Petri net is equivalent to an elementary net, then Z can be the countable set {0,1} and those elements in P that map to 1 under M form a configuration. Similarly, if a Petri net is not an elementary net, then the multiset M can be interpreted as representing a non-singleton set of configurations. In this respect, M extends the concept of configuration for elementary nets to Petri nets.
In the diagram of a Petri net (see top figure right), places are conventionally depicted with circles, transitions with long narrow rectangles and arcs as one-way arrows that show connections of places to transitions or transitions to places. If the diagram were of an elementary net, then those places in a configuration would be conventionally depicted as circles, where each circle encompasses a single dot called a token. In the given diagram of a Petri net (see right), the place circles may encompass more than one token to show the number of times a place appears in a configuration. The configuration of tokens distributed over an entire Petri net diagram is called a marking.
In the top figure (see right), the place p1 is an input place of transition t; whereas, the place p2 is an output place to the same transition. Let PN0 (top figure) be a Petri net with a marking configured M0, and PN1 (bottom figure) be a Petri net with a marking configured M1. The configuration of PN0 enables transition t through the property that all input places have sufficient number of tokens (shown in the figures as dots) "equal to or greater" than the multiplicities on their respective arcs to t. Once and only once a transition is enabled will the transition fire. In this example, the firing of transition t generates a map that has the marking configured M1 in the image of M0 and results in Petri net PN1, seen in the bottom figure. In the diagram, the firing rule for a transition can be characterised by subtracting a number of tokens from its input places equal to the multiplicity of the respective input arcs and accumulating a new number of tokens at the output places equal to the multiplicity of the respective output arcs.
Remark 1. The precise meaning of "equal to or greater" will depend on the precise algebraic properties of addition being applied on Z in the firing rule, where subtle variations on the algebraic properties can lead to other classes of Petri nets; for example, algebraic Petri nets.The following formal definition is loosely based on (Peterson 1981).  Many alternative definitions exist.

Syntax
A Petri net graph (called Petri net by some, but see below) is a 3-tuple 
  
    
      
        (
        S
        ,
        T
        ,
        W
        )
      
    
    {\displaystyle (S,T,W)}
  , where

S is a finite set of places
T is a finite set of transitions
S and T are disjoint, i.e. no object can be both a place and a transition

  
    
      
        W
        :
        (
        S
        ×
        T
        )
        ∪
        (
        T
        ×
        S
        )
        →
        
          N
        
      
    
    {\displaystyle W:(S\times T)\cup (T\times S)\to \mathbb {N} }
   is a multiset of arcs, i.e. it assigns to each arc a non-negative integer arc multiplicity (or weight); note that no arc may connect two places or two transitions.The flow relation is the set of arcs: 
  
    
      
        F
        =
        {
        (
        x
        ,
        y
        )
        ∣
        W
        (
        x
        ,
        y
        )
        >
        0
        }
      
    
    {\displaystyle F=\{(x,y)\mid W(x,y)>0\}}
  .  In many textbooks, arcs can only have multiplicity 1. These texts often define Petri nets using F instead of W.  When using this convention, a Petri net graph is a bipartite directed graph 
  
    
      
        (
        S
        ∪
        T
        ,
        F
        )
      
    
    {\displaystyle (S\cup T,F)}
   with node partitions S and T.
The preset of a transition t is the set of its input places: 
  
    
      
        
          

          
          
            ∙
          
        
        t
        =
        {
        s
        ∈
        S
        ∣
        W
        (
        s
        ,
        t
        )
        >
        0
        }
      
    
    {\displaystyle {}^{\bullet }t=\{s\in S\mid W(s,t)>0\}}
  ;
its postset is the set of its output places: 
  
    
      
        
          t
          
            ∙
          
        
        =
        {
        s
        ∈
        S
        ∣
        W
        (
        t
        ,
        s
        )
        >
        0
        }
      
    
    {\displaystyle t^{\bullet }=\{s\in S\mid W(t,s)>0\}}
  . Definitions of pre- and postsets of places are analogous.
A marking of a Petri net (graph) is a multiset of its places, i.e., a mapping 
  
    
      
        M
        :
        S
        →
        
          N
        
      
    
    {\displaystyle M:S\to \mathbb {N} }
  .  We say the marking assigns to each place a number of tokens.
A Petri net (called marked Petri net by some, see above) is a 4-tuple 
  
    
      
        (
        S
        ,
        T
        ,
        W
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle (S,T,W,M_{0})}
  , where

  
    
      
        (
        S
        ,
        T
        ,
        W
        )
      
    
    {\displaystyle (S,T,W)}
   is a Petri net graph;

  
    
      
        
          M
          
            0
          
        
      
    
    {\displaystyle M_{0}}
   is the initial marking, a marking of the Petri net graph.

Execution semantics
In words

firing a transition t in a marking M consumes 
  
    
      
        W
        (
        s
        ,
        t
        )
      
    
    {\displaystyle W(s,t)}
   tokens from each of its input places s, and produces 
  
    
      
        W
        (
        t
        ,
        s
        )
      
    
    {\displaystyle W(t,s)}
   tokens in each of its output places s
a transition is enabled (it may fire) in M if there are enough tokens in its input places for the consumptions to be possible, i.e. if and only if 
  
    
      
        ∀
        s
        :
        M
        (
        s
        )
        ≥
        W
        (
        s
        ,
        t
        )
      
    
    {\displaystyle \forall s:M(s)\geq W(s,t)}
  .We are generally interested in what may happen when transitions may continually fire in arbitrary order.
We say that a marking M' is reachable from a marking M in one step if 
  
    
      
        M
        
          
            ⟶
            G
          
        
        
          M
          ′
        
      
    
    {\displaystyle M{\underset {G}{\longrightarrow }}M'}
  ; we say that it is reachable from M if 
  
    
      
        M
        
          
            
              ⟶
              G
            
            ∗
          
        
        
          M
          ′
        
      
    
    {\displaystyle M{\overset {*}{\underset {G}{\longrightarrow }}}M'}
  , where 
  
    
      
        
          
            
              ⟶
              G
            
            ∗
          
        
      
    
    {\displaystyle {\overset {*}{\underset {G}{\longrightarrow }}}}
   is the reflexive transitive closure of 
  
    
      
        
          
            ⟶
            G
          
        
      
    
    {\displaystyle {\underset {G}{\longrightarrow }}}
  ; that is, if it is reachable in 0 or more steps.
For a (marked) Petri net 
  
    
      
        N
        =
        (
        S
        ,
        T
        ,
        W
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle N=(S,T,W,M_{0})}
  , we are interested in the firings that can be performed starting with the initial marking 
  
    
      
        
          M
          
            0
          
        
      
    
    {\displaystyle M_{0}}
  .  Its set of reachable markings is the set

  
    
      
        R
        (
        N
        )
         
        
          
            
              
                =
              
              
                D
              
            
          
        
         
        
          {
          
            
              M
              ′
            
            
              
                |
              
            
            
              M
              
                0
              
            
            
              
                →
                
                  
                    (
                    S
                    ,
                    T
                    ,
                    W
                    )
                  
                
                
                  ∗
                
              
            
            
              M
              ′
            
          
          }
        
      
    
    {\displaystyle R(N)\ {\stackrel {D}{=}}\ \left\{M'{\Bigg |}M_{0}{\xrightarrow[{(S,T,W)}]{*}}M'\right\}}
  
The reachability graph of N is the transition relation 
  
    
      
        
          
            ⟶
            G
          
        
      
    
    {\displaystyle {\underset {G}{\longrightarrow }}}
   restricted to its reachable markings 
  
    
      
        R
        (
        N
        )
      
    
    {\displaystyle R(N)}
  .  It is the state space of the net.
A firing sequence for a Petri net with graph G and initial marking 
  
    
      
        
          M
          
            0
          
        
      
    
    {\displaystyle M_{0}}
   is a sequence of transitions 
  
    
      
        
          
            
              σ
              →
            
          
        
        =
        ⟨
        
          t
          
            1
          
        
        ⋯
        
          t
          
            n
          
        
        ⟩
      
    
    {\displaystyle {\vec {\sigma }}=\langle t_{1}\cdots t_{n}\rangle }
   such that 
  
    
      
        
          M
          
            0
          
        
        
          
            ⟶
            
              G
              ,
              
                t
                
                  1
                
              
            
          
        
        
          M
          
            1
          
        
        ∧
        ⋯
        ∧
        
          M
          
            n
            −
            1
          
        
        
          
            ⟶
            
              G
              ,
              
                t
                
                  n
                
              
            
          
        
        
          M
          
            n
          
        
      
    
    {\displaystyle M_{0}{\underset {G,t_{1}}{\longrightarrow }}M_{1}\wedge \cdots \wedge M_{n-1}{\underset {G,t_{n}}{\longrightarrow }}M_{n}}
  .  The set of firing sequences is denoted as 
  
    
      
        L
        (
        N
        )
      
    
    {\displaystyle L(N)}
  .

Variations on the definition
A common variation is to disallow arc multiplicities and replace the bag of arcs W with a simple set, called the flow relation, 
  
    
      
        F
        ⊆
        (
        S
        ×
        T
        )
        ∪
        (
        T
        ×
        S
        )
      
    
    {\displaystyle F\subseteq (S\times T)\cup (T\times S)}
  .
This does not limit expressive power as both can represent each other.
Another common variation, e.g. in Desel and Juhás (2001), is to allow capacities to be defined on places. This is discussed under extensions below.

Formulation in terms of vectors and matrices
The markings of a Petri net 
  
    
      
        (
        S
        ,
        T
        ,
        W
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle (S,T,W,M_{0})}
   can be regarded as vectors of non-negative integers of length 
  
    
      
        
          |
        
        S
        
          |
        
      
    
    {\displaystyle |S|}
  .

Its transition relation can be described as a pair of 
  
    
      
        
          |
        
        S
        
          |
        
      
    
    {\displaystyle |S|}
   by 
  
    
      
        
          |
        
        T
        
          |
        
      
    
    {\displaystyle |T|}
   matrices:

  
    
      
        
          W
          
            −
          
        
      
    
    {\displaystyle W^{-}}
  , defined by 
  
    
      
        ∀
        s
        ,
        t
        :
        
          W
          
            −
          
        
        [
        s
        ,
        t
        ]
        =
        W
        (
        s
        ,
        t
        )
      
    
    {\displaystyle \forall s,t:W^{-}[s,t]=W(s,t)}
  

  
    
      
        
          W
          
            +
          
        
      
    
    {\displaystyle W^{+}}
  , defined by 
  
    
      
        ∀
        s
        ,
        t
        :
        
          W
          
            +
          
        
        [
        s
        ,
        t
        ]
        =
        W
        (
        t
        ,
        s
        )
        .
      
    
    {\displaystyle \forall s,t:W^{+}[s,t]=W(t,s).}
  Then their difference

  
    
      
        
          W
          
            T
          
        
        =
        −
        
          W
          
            −
          
        
        +
        
          W
          
            +
          
        
      
    
    {\displaystyle W^{T}=-W^{-}+W^{+}}
  can be used to describe the reachable markings in terms of matrix multiplication, as follows.
For any sequence of transitions w, write 
  
    
      
        o
        (
        w
        )
      
    
    {\displaystyle o(w)}
   for the vector that maps every transition to its number of occurrences in w.  Then, we have

  
    
      
        R
        (
        N
        )
        =
        {
        M
        ∣
        ∃
        w
        :
         
        w
        
           is a firing sequence of 
        
        N
         
        
           and 
        
         
        M
        =
        
          M
          
            0
          
        
        +
        
          W
          
            T
          
        
        ⋅
        o
        (
        w
        )
        }
      
    
    {\displaystyle R(N)=\{M\mid \exists w:\ w{\text{ is a firing sequence of }}N\ {\text{ and }}\ M=M_{0}+W^{T}\cdot o(w)\}}
  .It must be required that w is a firing sequence; allowing arbitrary sequences of transitions will generally produce a larger set.

Category-theoretic formulation
Meseguer and Montanari considered a kind of symmetric monoidal categories known as Petri categories.

Mathematical properties of Petri nets
One thing that makes Petri nets interesting is that they provide a balance between modeling power and analyzability: many things one would like to know about concurrent systems can be automatically determined for Petri nets, although some of those things are very expensive to determine in the general case. Several subclasses of Petri nets have been studied that can still model interesting classes of concurrent systems, while these determinations become easier.
An overview of such decision problems, with decidability and complexity results for Petri nets and some subclasses, can be found in Esparza and Nielsen (1995).

Reachability
The reachability problem for Petri nets is to decide, given a Petri net N and a marking M, whether 
  
    
      
        M
        ∈
        R
        (
        N
        )
      
    
    {\displaystyle M\in R(N)}
  .
It is a matter of walking the reachability-graph defined above, until either the requested-marking is reached or it can no longer be found. This is harder than it may seem at first: the reachability graph is generally infinite, and it isn't easy to determine when it is safe to stop.
In fact, this problem was shown to be EXPSPACE-hard years before it was shown to be decidable at all (Mayr, 1981). Papers continue to be published on how to do it efficiently. In 2018, Czerwiński et al. improved the lower bound and showed that the problem is not ELEMENTARY. In 2021, this problem was shown to be non-primitive recursive, independently by Jerome Leroux 
and by Wojciech Czerwiński and Łukasz Orlikowski. These results thus close the long-standing complexity gap.
While reachability seems to be a good tool to find erroneous states, for practical problems the constructed graph usually has far too many states to calculate. To alleviate this problem, linear temporal logic is usually used in conjunction with the tableau method to prove that such states cannot be reached. Linear temporal logic uses the semi-decision technique to find if indeed a state can be reached, by finding a set of necessary conditions for the state to be reached then proving that those conditions cannot be satisfied.

Liveness
Petri nets can be described as having different degrees of liveness 
  
    
      
        
          L
          
            1
          
        
        −
        
          L
          
            4
          
        
      
    
    {\displaystyle L_{1}-L_{4}}
  . A Petri net 
  
    
      
        (
        N
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle (N,M_{0})}
   is called 
  
    
      
        
          L
          
            k
          
        
      
    
    {\displaystyle L_{k}}
  -live if and only if all of its transitions are 
  
    
      
        
          L
          
            k
          
        
      
    
    {\displaystyle L_{k}}
  -live, where a transition is

dead, if it can never fire, i.e. it is not in any firing sequence in 
  
    
      
        L
        (
        N
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle L(N,M_{0})}
  

  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  -live (potentially fireable), if and only if it may fire, i.e. it is in some firing sequence in 
  
    
      
        L
        (
        N
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle L(N,M_{0})}
  

  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  -live if it can fire arbitrarily often, i.e. if for every positive integer k, it occurs at least k times in some firing sequence in 
  
    
      
        L
        (
        N
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle L(N,M_{0})}
  

  
    
      
        
          L
          
            3
          
        
      
    
    {\displaystyle L_{3}}
  -live if it can fire infinitely often, i.e. if there is some fixed (necessarily infinite) firing sequence in which for every positive integer k, the transition 
  
    
      
        
          L
          
            3
          
        
      
    
    {\displaystyle L_{3}}
   occurs at least k times,

  
    
      
        
          L
          
            4
          
        
      
    
    {\displaystyle L_{4}}
  -live (live) if it may always fire, i.e. it is 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  -live in every reachable marking in 
  
    
      
        R
        (
        N
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle R(N,M_{0})}
  Note that these are increasingly stringent requirements: 
  
    
      
        
          L
          
            j
            +
            1
          
        
      
    
    {\displaystyle L_{j+1}}
  -liveness implies 
  
    
      
        
          L
          
            j
          
        
      
    
    {\displaystyle L_{j}}
  -liveness, for 
  
    
      
        
          
            j
            ∈
            
              1
              ,
              2
              ,
              3
            
          
        
      
    
    {\textstyle \textstyle {j\in {1,2,3}}}
  .
These definitions are in accordance with Murata's overview, which additionally uses 
  
    
      
        
          L
          
            0
          
        
      
    
    {\displaystyle L_{0}}
  -live as a term for dead.

Boundedness
A place in a Petri net is called k-bound if it does not contain more than k tokens in all reachable markings, including the initial marking; it is said to be safe if it is 1-bounded; it is bounded if it is k-bounded for some k.
A (marked) Petri net is called k-bounded, safe, or bounded when all of its places are.
A Petri net (graph) is called (structurally) bounded if it is bounded for every possible initial marking.
A Petri net is bounded if and only if its reachability graph is finite.
Boundedness is decidable by looking at covering, by constructing the Karp–Miller Tree.
It can be useful to explicitly impose a bound on places in a given net.
This can be used to model limited system resources.
Some definitions of Petri nets explicitly allow this as a syntactic feature.
Formally, Petri nets with place capacities can be defined as tuples 
  
    
      
        (
        S
        ,
        T
        ,
        W
        ,
        C
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle (S,T,W,C,M_{0})}
  , where 
  
    
      
        (
        S
        ,
        T
        ,
        W
        ,
        
          M
          
            0
          
        
        )
      
    
    {\displaystyle (S,T,W,M_{0})}
   is a Petri net, 
  
    
      
        C
        :
        P
        →
        
        
        
        ∣
        
          N
        
      
    
    {\displaystyle C:P\rightarrow \!\!\!\shortmid \mathbb {N} }
   an assignment of capacities to (some or all) places, and the transition relation is the usual one restricted to the markings in which each place with a capacity has at most that many tokens.

For example, if in the net N, both places are assigned capacity 2, we obtain a Petri net with place capacities, say N2; its reachability graph is displayed on the right.

Alternatively, places can be made bounded by extending the net. To be exact,
a place can be made k-bounded by adding a "counter-place" with flow opposite to that of the place, and adding tokens to make the total in both places k.

Discrete, continuous, and hybrid Petri nets
As well as for discrete events, there are Petri nets for continuous and hybrid discrete-continuous processes that are useful in discrete, continuous and hybrid control theory, and related to discrete, continuous and hybrid automata.

Extensions
There are many extensions to Petri nets. Some of them are completely backwards-compatible (e.g. coloured Petri nets) with the original Petri net, some add properties that cannot be modelled in the original Petri net formalism (e.g. timed Petri nets). Although backwards-compatible models do not extend the computational power of Petri nets, they may have more succinct representations and may be more convenient for modeling. Extensions that cannot be transformed into Petri nets are sometimes very powerful, but usually lack the full range of mathematical tools available to analyse ordinary Petri nets.
The term  high-level Petri net is used for many Petri net formalisms that extend the basic P/T net formalism; this includes coloured Petri nets, hierarchical Petri nets such as Nets within Nets, and all other extensions sketched in this section. The term is also used specifically for the type of coloured nets supported by CPN Tools.
A short list of possible extensions follows:

Additional types of arcs; two common types are
a reset arc does not impose a precondition on firing, and empties the place when the transition fires; this makes reachability undecidable, while some other properties, such as termination, remain decidable;
an inhibitor arc imposes the precondition that the transition may only fire when the place is empty; this allows arbitrary computations on numbers of tokens to be expressed, which makes the formalism Turing complete and implies existence of a universal net.
In a standard Petri net, tokens are indistinguishable.  In a coloured Petri net, every token has a value.  In popular tools for coloured Petri nets such as CPN Tools, the values of tokens are typed, and can be tested (using guard expressions) and manipulated with a functional programming language. A subsidiary of coloured Petri nets are the well-formed Petri nets, where the arc and guard expressions are restricted to make it easier to analyse the net.
Another popular extension of Petri nets is hierarchy; this in the form of different views supporting levels of refinement and abstraction was studied by Fehling. Another form of hierarchy is found in so-called object Petri nets or object systems  where a Petri net can contain Petri nets as its tokens inducing a hierarchy of nested Petri nets that communicate by synchronisation of transitions on different levels. See for an informal introduction to object Petri nets.
A vector addition system with states (VASS) is an equivalent formalism to Petri nets.  However, it can be superficially viewed as a generalisation of Petri nets. Consider a finite state automaton where each transition is labelled by a transition from the Petri net. The Petri net is then synchronised with the finite state automaton, i.e., a transition in the automaton is taken at the same time as the corresponding transition in the Petri net. It is only possible to take a transition in the automaton if the corresponding transition in the Petri net is enabled, and it is only possible to fire a transition in the Petri net if there is a transition from the current state in the automaton labelled by it. (The definition of VASS is usually formulated slightly differently.)
Prioritised Petri nets add priorities to transitions, whereby a transition cannot fire, if a higher-priority transition is enabled (i.e. can fire). Thus, transitions are in priority groups, and e.g. priority group 3 can only fire if all transitions are disabled in groups 1 and 2. Within a priority group, firing is still non-deterministic.
The non-deterministic property has been a very valuable one, as it lets the user abstract a large number of properties (depending on what the net is used for). In certain cases, however, the need arises to also model the timing, not only the structure of a model. For these cases, timed Petri nets have evolved, where there are transitions that are timed, and possibly transitions which are not timed (if there are, transitions that are not timed have a higher priority than timed ones). A subsidiary of timed Petri nets are the stochastic Petri nets that add nondeterministic time through adjustable randomness of the transitions. The exponential random distribution is usually used to 'time' these nets. In this case, the nets' reachability graph can be used as a continuous time Markov chain (CTMC).
Dualistic Petri Nets (dP-Nets) is a Petri Net extension developed by E. Dawis, et al. to better represent real-world process.  dP-Nets balance the duality of change/no-change, action/passivity, (transformation) time/space, etc., between the bipartite Petri Net constructs of transformation and place resulting in the unique characteristic of transformation marking, i.e., when the transformation is "working" it is marked.  This allows for the transformation to fire (or be marked) multiple times representing the real-world behavior of process throughput.  Marking of the transformation assumes that transformation time must be greater than zero.  A zero transformation time used in many typical Petri Nets may be mathematically appealing but impractical in representing real-world processes.  dP-Nets also exploit the power of Petri Nets' hierarchical abstraction to depict process architecture.  Complex process systems are modeled as a series of simpler nets interconnected through various levels of hierarchical abstraction.  The process architecture of a packet switch is demonstrated in, where development requirements are organized around the structure of the designed system.There are many more extensions to Petri nets, however, it is important to keep in mind, that as the complexity of the net increases in terms of extended properties, the harder it is to use standard tools to evaluate certain properties of the net. For this reason, it is a good idea to use the most simple net type possible for a given modelling task.

Restrictions
Instead of extending the Petri net formalism, we can also look at restricting it, and look at particular types of Petri nets, obtained by restricting the syntax in a particular way.  Ordinary Petri nets are the nets where all arc weights are 1.  Restricting further, the following types of ordinary Petri nets are commonly used and studied:

In a state machine (SM), every transition has one incoming arc, and one outgoing arc, and all markings have exactly one token. As a consequence, there can not be concurrency, but there can be conflict (i.e. nondeterminism): mathematically, 
  
    
      
        ∀
        t
        ∈
        T
        :
        
          |
        
        
          t
          
            ∙
          
        
        
          |
        
        =
        
          |
        
        
          

          
          
            ∙
          
        
        t
        
          |
        
        =
        1
      
    
    {\displaystyle \forall t\in T:|t^{\bullet }|=|{}^{\bullet }t|=1}
  
In a marked graph (MG), every place has one incoming arc, and one outgoing arc. This means, that there can not be conflict, but there can be concurrency: mathematically, 
  
    
      
        ∀
        s
        ∈
        S
        :
        
          |
        
        
          s
          
            ∙
          
        
        
          |
        
        =
        
          |
        
        
          

          
          
            ∙
          
        
        s
        
          |
        
        =
        1
      
    
    {\displaystyle \forall s\in S:|s^{\bullet }|=|{}^{\bullet }s|=1}
  
In a free choice net (FC), every arc from a place to a transition is either the only arc from that place or the only arc to that transition, i.e. there can be both concurrency and conflict, but not at the same time: mathematically, 
  
    
      
        ∀
        s
        ∈
        S
        :
        (
        
          |
        
        
          s
          
            ∙
          
        
        
          |
        
        ≤
        1
        )
        ∨
        (
        
          

          
          
            ∙
          
        
        (
        
          s
          
            ∙
          
        
        )
        =
        {
        s
        }
        )
      
    
    {\displaystyle \forall s\in S:(|s^{\bullet }|\leq 1)\vee ({}^{\bullet }(s^{\bullet })=\{s\})}
  
Extended free choice (EFC) – a Petri net that can be transformed into an FC.
In an asymmetric choice net (AC), concurrency and conflict (in sum, confusion) may occur, but not symmetrically: mathematically, 
  
    
      
        ∀
        
          s
          
            1
          
        
        ,
        
          s
          
            2
          
        
        ∈
        S
        :
        (
        
          s
          
            1
          
        
        
          

          
          
            ∙
          
        
        ∩
        
          s
          
            2
          
        
        
          

          
          
            ∙
          
        
        ≠
        ∅
        )
        →
        [
        (
        
          s
          
            1
          
        
        
          

          
          
            ∙
          
        
        ⊆
        
          s
          
            2
          
        
        
          

          
          
            ∙
          
        
        )
        ∨
        (
        
          s
          
            2
          
        
        
          

          
          
            ∙
          
        
        ⊆
        
          s
          
            1
          
        
        
          

          
          
            ∙
          
        
        )
        ]
      
    
    {\displaystyle \forall s_{1},s_{2}\in S:(s_{1}{}^{\bullet }\cap s_{2}{}^{\bullet }\neq \emptyset )\to [(s_{1}{}^{\bullet }\subseteq s_{2}{}^{\bullet })\vee (s_{2}{}^{\bullet }\subseteq s_{1}{}^{\bullet })]}

Workflow nets
Workflow nets (WF-nets) are a subclass of Petri nets intending to model the workflow of process activities. 
The WF-net transitions are assigned to tasks or activities, and places are assigned to the pre/post conditions.
The WF-nets have additional structural and operational requirements, mainly the addition of a single input (source) place with no previous transitions, and output place (sink) with no following transitions. Accordingly, start and termination markings can be defined that represent the process status.
WF-nets have the soundness property, indicating that a process with a start marking of k tokens in its source place, can reach the termination state marking with k tokens in its sink place (defined as k-sound WF-net). Additionally, all the transitions in the process could fire (i.e., for each transition there is a reachable state in which the transition is enabled). 
A general sound (G-sound) WF-net is defined as being k-sound for every k > 0.A directed path in the Petri net is defined as the sequence of nodes (places and transitions) linked by the directed arcs. An elementary path includes every node in the sequence only once.
A well-handled Petri net is a net in which there are no fully distinct elementary paths between a place and a transition (or transition and a place), i.e., if there are two paths between the pair of nodes then these paths share a node.
An acyclic well-handled WF-net is sound (G-sound).Extended WF-net is a Petri net that is composed of a WF-net with additional transition t (feedback transition). The sink place is connected as the input place of transition t and the source place as its output place. Firing of the transition causes iteration of the process (Note, the extended WF-net is not a WF-net).WRI (Well-handled with Regular Iteration) WF-net, is an extended acyclic well-handled WF-net.  
WRI-WF-net can be built as composition of nets, i.e., replacing a transition within a WRI-WF-net with a subnet which is a WRI-WF-net. The result is also WRI-WF-net. WRI-WF-nets are G-sound, therefore by using only WRI-WF-net building blocks, one can get WF-nets that are G-sound by construction.
The design structure matrix (DSM) can model process relations, and be utilized for process planning. The DSM-nets are realization of DSM-based plans into workflow processes by Petri nets, and are equivalent to WRI-WF-nets. The DSM-net construction process ensures the soundness property of the resulting net.

Other models of concurrency
Other ways of modelling concurrent computation have been proposed, including vector addition systems, communicating finite-state machines, Kahn process networks, process algebra, the actor model, and trace theory. Different models provide tradeoffs of concepts such as compositionality, modularity, and locality.
An approach to relating some of these models of concurrency is proposed in the chapter by Winskel and Nielsen.

Application areas
Boolean differential calculus
Business process modeling
Computational biology
Concurrent programming
Control engineering
Data analysis
Diagnosis (artificial intelligence)
Discrete process control
Game theory
Hardware design
Kahn process networks
Process modeling
Reliability engineering
Simulation
Software design
Workflow management systems

See also
Finite-state machine
Petri Net Markup Language
Petriscript
Process architecture
Vector addition systems
Machine learning

References
Further reading

Cardoso, Janette; Camargo, Heloisa (1999). Fuzziness in Petri Nets. Physica-Verlag. ISBN 978-3-7908-1158-2.
Chiachio, Manuel; Chiachio, Juan; Presscott, Darren; Andrews, John (2018). "A new paradigm for uncertain knowledge representation by 'Plausible Petri nets'". Information Sciences. 453 (July 2018): 323–345. doi:10.1016/j.ins.2018.04.029.
Grobelna, Iwona (2011). "Formal verification of embedded logic controller specification with computer deduction in temporal logic". Przegląd Elektrotechniczny. 87 (12a): 47–50.
Jensen, Kurt (1997). Coloured Petri Nets. Springer Verlag. ISBN 978-3-540-62867-5.
Pataricza, András (2004). Formális módszerek az informatikában (Formal methods in informatics). TYPOTEX Kiadó. ISBN 978-963-9548-08-4.
Peterson, James Lyle (1977). "Petri Nets". ACM Computing Surveys. 9 (3): 223–252. doi:10.1145/356698.356702. hdl:10338.dmlcz/135597. S2CID 3605804.
Peterson, James Lyle (1981). Petri Net Theory and the Modeling of Systems. Prentice Hall. ISBN 978-0-13-661983-3.
Petri, Carl Adam (1962). Kommunikation mit Automaten (Ph. D. thesis). University of Bonn.
Petri, Carl Adam; Reisig, Wolfgang (2008). "Petri net". Scholarpedia. 3 (4): 6477. Bibcode:2008SchpJ...3.6477P. doi:10.4249/scholarpedia.6477.
Reisig, Wolfgang (1992). A Primer in Petri Net Design. Springer-Verlag. ISBN 978-3-540-52044-3.
Riemann, Robert-Christoph (1999). Modelling of Concurrent Systems: Structural and Semantical Methods in the High Level Petri Net Calculus. Herbert Utz Verlag. ISBN 978-3-89675-629-9.
Störrle, Harald (2000). Models of Software Architecture – Design and Analysis with UML and Petri-Nets. Books on Demand. ISBN 978-3-8311-1330-9.
Zaitsev, Dmitry (2013). Clans of Petri Nets: Verification of protocols and performance evaluation of networks. LAP LAMBERT Academic Publishing. ISBN 978-3-659-42228-7.
Zhou, Mengchu; Dicesare, Frank (1993). Petri Net Synthesis for Discrete Event Control of Manufacturing Systems. Kluwer Academic Publishers. ISBN 978-0-7923-9289-7.
Zhou, Mengchu; Venkatesh, Kurapati (1998). Modeling, Simulation, & Control of Flexible Manufacturing Systems: A Petri Net Approach. World Scientific Publishing. ISBN 978-981-02-3029-6.
Xue-Guo, Xu (2019). "Picture Fuzzy Petri Nets for Knowledge Representation and Acquisition in Considering Conflicting Opinions". Applied Sciences. 9 (5): 983. doi:10.3390/app9050983.