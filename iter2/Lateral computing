Lateral computing is a lateral thinking approach to solving computing problems.
Lateral thinking has been made popular by Edward de Bono. This thinking technique is applied to generate creative ideas and solve problems. Similarly, by applying lateral-computing techniques to a problem, it can become much easier to arrive at a computationally inexpensive, easy to implement, efficient, innovative or unconventional solution.
The traditional or conventional approach to solving computing problems is to either build mathematical models or have an IF- THEN -ELSE structure. For example, a brute-force search is used in many chess engines, but this approach is computationally expensive and sometimes may arrive at poor solutions. It is for problems like this that lateral computing can be useful to form a better solution.
A simple problem of truck backup can be used for illustrating lateral-computing. This is one of the difficult tasks for traditional computing techniques, and has been efficiently solved by the use of fuzzy logic (which is a lateral computing technique). Lateral-computing sometimes arrives at a novel solution for particular computing problem by using the model of how living beings, such as how humans, ants, and honeybees, solve a problem; how pure crystals are formed by annealing, or evolution of living beings or quantum mechanics etc.

From lateral-thinking to lateral-computing
Lateral thinking is technique for creative thinking for solving problems. The brain as center of thinking has a self-organizing information system. It tends to create patterns and traditional thinking process uses them to solve problems. The lateral thinking technique proposes to escape from this patterning to arrive at better solutions through new ideas. Provocative use of information processing is the basic underlying principle of lateral thinking,
The provocative operator (PO) is something which characterizes lateral thinking. Its function is to generate new ideas by provocation and providing escape route from old ideas. It creates a provisional arrangement of information.
Water logic is contrast to traditional or rock logic. Water logic has boundaries which depends on circumstances and conditions while rock logic has hard boundaries. Water logic, in someways, resembles fuzzy logic.

Transition to lateral-computing
Lateral computing does a provocative use of information processing similar to lateral-thinking. This is explained with the use of evolutionary computing which is a very useful lateral-computing technique. The evolution proceeds by change and selection. While random mutation provides change, the selection is through survival of the fittest. The random mutation works as a provocative information processing and provides a new avenue for generating better solutions for the computing problem. The term "Lateral Computing" was first proposed by Prof CR SUTHIKSHN Kumar and First World Congress on Lateral Computing WCLC 2004 was organized with international participants during December 2004. 
Lateral computing takes the analogies from real-world examples such as:

How slow cooling of the hot gaseous state results in pure crystals (Annealing)
How the neural networks in the brain solve such problems as face and speech recognition
How simple insects such as ants and honeybees solve some sophisticated problems
How evolution of human beings from molecular life forms are mimicked by evolutionary computing
How living organisms defend themselves against diseases and heal their wounds
How electricity is distributed by gridsDifferentiating factors of "lateral computing":

Does not directly approach the problem through mathematical means.
Uses indirect models or looks for analogies to solve the problem.
Radically different from what is in vogue, such as using "photons" for computing in optical computing. This is rare as most conventional computers use electrons to carry signals.
Sometimes the Lateral Computing techniques are surprisingly simple and deliver high performance solutions to very complex problems.
Some of the techniques in lateral computing use "unexplained jumps". These jumps may not look logical. The example is the use of "Mutation" operator in genetic algorithms.

Convention â€“ lateral
It is very hard to draw a clear boundary between conventional and lateral computing. Over a period of time, some unconventional computing techniques become integral part of mainstream computing. So there will always be an overlap between conventional and lateral computing. It will be tough task classifying a computing technique as a conventional or lateral computing technique as shown in the figure. The boundaries are fuzzy and one may approach with fuzzy sets.

Formal definition
Lateral computing is a fuzzy set of all computing techniques which use unconventional computing approach. Hence Lateral computing includes those techniques which use semi-conventional or hybrid computing. The degree of membership for lateral computing techniques is greater than 0 in the fuzzy set of unconventional computing techniques.
The following brings out some important differentiators for lateral computing.

Conventional computing
The problem and technique are directly correlated.
Treats the problem with rigorous mathematical analysis.
Creates mathematical models.
The computing technique can be analyzed mathematically.Lateral computing
The problem may hardly have any relation to the computing technique used
Approaches problems by analogies such as human information processing model, annealing, etc.
Sometimes the computing technique cannot be mathematically analyzed.

Lateral computing and parallel computing
Parallel computing focuses on improving the performance of the computers/algorithms through the use of several computing elements (such as processing elements). The computing speed is improved by using several computing elements. Parallel computing is an extension of conventional sequential computing. However, in lateral computing, the problem is solved using unconventional information processing whether using a sequential or parallel computing.

A review of lateral-computing techniques
There are several computing techniques which fit the Lateral computing paradigm. Here is a brief description of some of the Lateral Computing techniques:

Swarm intelligence
Swarm intelligence (SI) is the property of a system whereby the collective behaviors of (unsophisticated) agents, interacting locally with their environment, cause coherent functional global patterns to emerge. SI provides a basis with which it is possible to explore collective (or distributed) problem solving without centralized control or the provision of a global model.
One interesting swarm intelligent technique is the Ant Colony algorithm:
Ants are behaviorally unsophisticated; collectively they perform complex tasks. Ants have highly developed sophisticated sign-based communication.
Ants communicate using pheromones; trails are laid that can be followed by other ants.
Routing Problem Ants drop different pheromones used to compute the "shortest" path from source to destination(s).

Agent-based systems
Agents are encapsulated computer systems that are situated in some environment and are capable of flexible, autonomous action in that environment in order to meet their design objectives. Agents are considered to be autonomous (independent, not-controllable), reactive (responding to events), pro-active (initiating actions of their own volition), and social (communicative). Agents vary in their abilities: they can be static or mobile, or may or may not be intelligent. Each agent may have its own task and/or role. Agents, and multi-agent systems, are used as a metaphor to model complex distributed processes. Such agents invariably need to interact with one another in order to manage their inter-dependencies. These interactions involve agents cooperating, negotiating and coordinating with one another.
Agent-based systems are computer programs that try to simulate various complex phenomena via virtual "agents" that represent the components of a business system. The behaviors of these agents are programmed with rules that realistically depict how business is conducted. As widely varied individual agents interact in the model, the simulation shows how their collective behaviors govern the performance of the entire system - for instance, the emergence of a successful product or an optimal schedule. These simulations are powerful strategic tools for "what-if" scenario analysis: as managers change agent characteristics or "rules," the impact of the change can be easily seen in the model output

Grid computing
By analogy, a computational grid is a hardware and software infrastructure that provides dependable, consistent, pervasive, and inexpensive access to high-end computational capabilities. The applications of grid computing are in:

Chip design, cryptographic problems, medical instrumentation, and supercomputing.
Distributed supercomputing applications use grids to aggregate substantial computational resources in order to tackle problems that cannot be solved on a single system.

Autonomic computing
The autonomic nervous system governs our heart rate and body temperature, thus freeing our conscious brain from the burden of dealing with these and many other low-level, yet vital, functions. The essence of autonomic computing is self-management, the intent of which is to free system administrators from the details of system operation and maintenance.Four aspects of autonomic computing are:

Self-configuration
Self-optimization
Self-healing
Self-protectionThis is a grand challenge promoted by IBM.

Optical computing
Optical computing is to use photons rather than conventional electrons for computing. There are quite a few instances of optical computers and successful use of them. The conventional logic gates use semiconductors, which use electrons for transporting the signals. In case of optical computers, the photons in a light beam are used to do computation.
There are numerous advantages of using optical devices for computing such as immunity to electromagnetic interference, large bandwidth, etc.

DNA computing
DNA computing uses strands of DNA to encode the instance of the problem and to manipulate them using techniques commonly available in any molecular biology laboratory in order to simulate operations that select the solution of the problem if it exists.
Since the DNA molecule is also a code, but is instead made up of a sequence of four bases that pair up in a predictable manner, many scientists have thought about the possibility of creating a molecular computer. These computers rely on the much faster reactions of DNA nucleotides binding with their complements, a brute force method that holds enormous potential for creating a new generation of computers that would be 100 billion times faster than today's fastest PC. DNA computing has been heralded as the "first example of true nanotechnology", and even the "start of a new era", which forges an unprecedented link between computer science and life science.
Example applications of DNA computing are in solution for the Hamiltonian path problem which is a known NP complete one. The number of required lab operations using DNA grows linearly with the number of vertices of the graph. Molecular algorithms have been reported that solves the cryptographic problem in a polynomial number of steps. As known, factoring large numbers is a relevant problem in many cryptographic applications.

Quantum computing
In a quantum computer, the fundamental unit of information (called a quantum bit or qubit), is not binary but rather more quaternary in nature. This qubit property arises as a direct consequence of its adherence to the laws of quantum mechanics, which differ radically from the laws of classical physics. A qubit can exist not only in a state corresponding to the logical state 0 or 1 as in a classical bit, but also in states corresponding to a blend or quantum superposition of these classical states. In other words, a qubit can exist as a zero, a one, or simultaneously as both 0 and 1, with a numerical coefficient representing the probability for each state. A quantum computer manipulates qubits by executing a series of quantum gates, each a unitary transformation acting on a single qubit or pair of qubits. In applying these gates in succession, a quantum computer can perform a complicated unitary transformation to a set of qubits in some initial state.

Reconfigurable computing
Field-programmable gate arrays (FPGA) are making it possible to build truly reconfigurable computers. The computer architecture is transformed by on the fly reconfiguration of the FPGA circuitry. The optimal matching between architecture and algorithm improves the performance of the reconfigurable computer. The key feature is hardware performance and software flexibility.
For several applications such as fingerprint matching, DNA sequence comparison, etc., reconfigurable computers have been shown to perform several orders of magnitude better than conventional computers.

Simulated annealing
The Simulated annealing algorithm is designed by looking at how the pure crystals form from a heated gaseous state while the system is cooled slowly. The computing problem is redesigned as a simulated annealing exercise and the solutions are arrived at. The working principle of simulated annealing is borrowed from metallurgy: a piece of metal is heated (the atoms are given thermal agitation), and then the metal is left to cool slowly. The slow and regular cooling of the metal allows the atoms to slide progressively their most stable ("minimal energy") positions. (Rapid cooling would have "frozen" them in whatever position they happened to be at that time.) The resulting structure of the metal is stronger and more stable. By simulating the process of annealing inside a computer program, it is possible to find answers to difficult and very complex problems. Instead of minimizing the energy of a block of metal or maximizing its strength, the program minimizes or maximizes some objective relevant to the problem at hand.

Soft computing
One of the main components of "Lateral-computing" is soft computing which approaches problems with human information processing model. The Soft Computing technique comprises Fuzzy logic, neuro-computing, evolutionary-computing, machine learning and probabilistic-chaotic computing.

Neuro computing
Instead of solving a problem by creating a non-linear equation model of it, the biological neural network analogy is used for solving the problem. The neural network is trained like a human brain to solve a given problem. This approach has become highly successful in solving some of the pattern recognition problems.

Evolutionary computing
The genetic algorithm (GA) resembles the natural evolution to provide a universal optimization. Genetic algorithms start with a population of chromosomes which represent the various solutions. The solutions are evaluated using a fitness function and a selection process determines which solutions are to be used for competition process. These algorithms are highly successful in solving search and optimization problems. The new solutions are created using evolutionary principles such as mutation and crossover.

Fuzzy logic
Fuzzy logic is based on the fuzzy sets concepts proposed by Lotfi Zadeh. The degree of membership concept is central to fuzzy sets. The fuzzy sets differ from crisp sets since they allow an element to belong to a set to a degree (degree of membership). This approach finds good applications for control problems. The Fuzzy logic has found enormous applications and has already found a big market presence in consumer electronics such as washing machines, microwaves, mobile phones, Televisions, Camcoders etc.

Probabilistic/chaotic computing
Probabilistic computing engines, e.g. use of probabilistic graphical model such as Bayesian network. Such computational techniques are referred to as randomization, yielding probabilistic algorithms. When interpreted as a physical phenomenon through classical statistical thermodynamics, such techniques lead to energy savings that are proportional to the probability p with which each primitive computational step is guaranteed to be correct (or equivalently to the probability of error, (1â€“p). Chaotic Computing is based on the chaos theory.

Fractals
Fractal Computing are objects displaying self-similarity at different scales. Fractals generation involves small iterative algorithms. The fractals have dimensions greater than their topological dimensions. The length of the fractal is infinite and size of it cannot be measured. It is described by an iterative algorithm unlike a Euclidean shape which is given by a simple formula. There are several types of fractals and Mandelbrot sets are very popular.
Fractals have found applications in image processing, image compression music generation, computer games etc. Mandelbrot set is a fractal named after its creator. Unlike the other fractals, even though the Mandelbrot set is self-similar at magnified scales, the small scale details are not identical to the whole. I.e., the Mandelbrot set is infinitely complex. But the process of generating it is based on an extremely simple equation. The Mandelbrot set M is a collection of complex numbers. The numbers Z which belong to M are computed by iteratively testing the Mandelbrot equation. C is a constant. If the equation converges for chosen Z, then Z belongs to M.
Mandelbrot equation:

Randomized algorithm
A Randomized algorithm makes arbitrary choices during its execution. This allows a savings in execution time at the beginning of a program. The disadvantage of this method is the possibility that an incorrect solution will occur. A well-designed randomized algorithm will have a very high probability of returning a correct answer. The two categories of randomized algorithms are:

Monte Carlo algorithm
Las Vegas algorithmConsider an algorithm to find the kth element of an array. A deterministic approach would be to choose a pivot element near the median of the list and partition the list around that element. The randomized approach to this problem would be to choose a pivot at random, thus saving time at the beginning of the process. Like approximation algorithms, they can be used to more quickly solve tough NP-complete problems. An advantage over the approximation algorithms, however, is that a randomized algorithm will eventually yield an exact answer if executed enough times

Machine learning
Human beings/animals learn new skills, languages/concepts. Similarly, machine learning algorithms provide capability to generalize from training data. There are two classes of Machine Learning (ML):

Supervised ML
Unsupervised MLOne of the well known machine learning technique is Back Propagation Algorithm. This mimics how humans learn from examples. The training patterns are repeatedly presented to the network. The error is back propagated and the network weights are adjusted using gradient descent. The network converges through several hundreds of iterative computations.

Support vector machines
This is another class of highly successful machine learning techniques successfully applied to tasks such as text classification, speaker recognition, image recognition etc.

Example applications
There are several successful applications of lateral-computing techniques. Here is a small set of applications that illustrates lateral computing:

Bubble sorting: Here the computing problem of sorting is approached with an analogy of bubbles rising in water. This is by treating the numbers as bubbles and floating them to their natural position.
Truck backup problem: This is an interesting problem of reversing a truck and parking it at a particular location. The traditional computing techniques have found it difficult to solve this problem. This has been successfully solved by Fuzzy system.
Balancing an inverted pendulum: This problem involves balancing and inverted pendulum. This problem has been efficiently solved by neural networks and fuzzy systems.
Smart volume control for mobile phones: The volume control in mobile phones depend on the background noise levels, noise classes, hearing profile of the user and other parameters. The measurement on noise level and loudness level involve imprecision and subjective measures. The authors have demonstrated the successful use of fuzzy logic system for volume control in mobile handsets.
Optimization using genetic algorithms and simulated annealing: The problems such as traveling salesman problem have been shown to be NP complete problems. Such problems are solved using algorithms which benefit by heuristics. Some of the applications are in VLSI routing, partitioning etc. Genetic algorithms and Simulated annealing have been successful in solving such optimization problems.
Programming The Unprogrammable (PTU) involving the automatic creation of computer programs for unconventional computing devices such as cellular automata, multi-agent systems, parallel systems, field-programmable gate arrays, field-programmable analog arrays, ant colonies, swarm intelligence, distributed systems, and the like.

Summary
Above is a review of lateral-computing techniques. Lateral-computing is based on the lateral-thinking approach and applies unconventional techniques to solve computing problems. While, most of the problems are solved in conventional techniques, there are problems which require lateral-computing. Lateral-computing provides advantage of computational efficiency, low cost of implementation, better solutions when compared to conventional computing for several problems. The lateral-computing successfully tackles a class of problems by exploiting tolerance for imprecision, uncertainty and partial truth to achieve tractability, robustness and low solution cost. Lateral-computing techniques which use the human like information processing models have been classified as "Soft Computing" in literature.
Lateral-computing is valuable while solving numerous computing problems whose mathematical models are unavailable. They provide a way of developing innovative solutions resulting in smart systems with Very High Machine IQ (VHMIQ). This article has traced the transition from lateral-thinking to lateral-computing. Then several lateral-computing techniques have been described followed by their applications. Lateral-computing is for building new generation artificial intelligence based on unconventional processing.

See also
Calculation
Computing
Computationalism
Real computation
Reversible computation
Hypercomputation
Computation
Computational problem
Unconventional computing

References
Sources
Suthikshn Kumar CR(2022), Lateral Computing Algorithms: workbook for Programmers, Second Edition, 2022 Lateral Computing Algorithms Book( last accessed on 28th Nov 2022)
de Bono, E. (2003). "Edward de Bono". Archived from the original on 2001-02-01.
Proceedings of IEEE (2001): Special Issue on Industrial Innovations Using Soft Computing, September.
T. Ross (2004): Fuzzy Logic With Engineering Applications, McGraw-Hill Inc Publishers.
B. Kosko (1994); Fuzzy Thinking, Flamingo Publishers.
E. Aarts and J. Krost (1997); Simulated Annealing and Boltzmann Machines, John Wiley And Sons Publishers.
K.V. Palem (2003); Energy Aware Computing through Probabilistic Switching: A study of limits, Technical Report GIT-CC-03-16 May 2003.
M. Sima, S. Vassiliadis, S. Cotofona, J. T. J. Van Eijndoven, and K. A. Vissers (2000); A taxonomy of custom computing machines, in Proceedings of the Progress workshop, October.
J. Gleick (1998); Choas: Making a New Science, Vintage Publishers.
B. Mandelbrot (1997); The Fractal Geometry of Nature, Freeman Publishers, New York.
D.R. Hofstadter (1999); Godel, Escher, Bach: An Eternal Golden Braid, Harper Collins Publishers.
R.A. Aliev and R.R. Aliev (2001); Soft Computing and Its Applications, World Scientific Publishers.
Jyh-Shing Roger Jang, Chuen-Tsai Sun & Eiji Mizutani (1997); Neuro-Fuzzy and Soft Computing: A Computational Approach to Learning and Machine Intelligence, Prentice Hall Publishers.
John R. Koza, Martin A. Keane, Matthew J. Streeter, William Mydlowec, Jessen Yu, and Guido Lanza (2003); Genetic Programming IV: Routine Human-Competitive Machine Intelligence, Kluwer Academic.
James Allen (1995); Natural Language Understanding, 2nd Edition, Pearson Education Publishers.
R. Herken (1995); Universal Turing Machine, Springer-Verlag 2nd Edition.
Harry R. Lewis, Christos H. Papadimtrou (1997); Elements of Theory of Computation, 2nd edition, Prentice Hall Publishers.
M. Garey and D. Johnson (1979); Computers and Intractability: A theory of NP Completeness, W.H. Freeman and Company Publishers.
M. Sipser (2001); Introduction to the Theory of Computation, Thomson/Brooks/Cole Publishers.
K. Compton and S. Hauck (2002); Reconfigurable Computing: A survey of Systems and Software, ACM Computing Surveys, Vo. 34, No.2, June 2002, pp. 171â€“210.
D.W. Patterson (1990); Introduction to Artificial Intelligence and Expert Systems, Prentice Hall Inc. Publishers.
E. Charniak and D. Mcdermott (1999); Introduction to Artificial Intelligence, Addison Wesley.
Hameroff, S. R. (1997). Ultimate Computing. Elsevier Science Publishers. ISBN 978-0-444-70283-8.
R.L. Epstein and W.A. Carnielli (1989); Computability, Computable Functions, Logic and The Foundations of Mathematics, Wadsworth & Brooks/Cole Advanced Books and Software.
T. Joachims (2002);  Learning to Classify Text using Support Vector Machines, Kluwer Academic Publishers.
T. Mitchell (1997); Machine Learning, McGraw Hill Publishers.
R. Motwani and P. Raghavan (1995); Randomized Algorithms, Cambridge International Series in Parallel Computation, Cambridge University Press.
Sun Microsystems (2003); Introduction to Throughput Computing, Technical Report.

Conferences
First World Congress on Lateral Computing, IISc, Bangalore India, December 2004 WCLC 2004
Second World Congress on Lateral Computing, WCLC 2005, PESIT, Bangalore, India