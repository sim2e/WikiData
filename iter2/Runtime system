In computer programming, a runtime system or runtime environment is a sub-system that exists both in the computer where a program is created, as well as in the computers where the program is intended to be run. The name comes from the compile time and runtime division from compiled languages, which similarly distinguishes the computer processes involved in the creation of a program (compilation) and its execution in the target machine (the run time).Most programming languages have some form of runtime system that provides an environment in which programs run. This environment may address a number of issues including the management of application memory, how the program accesses variables, mechanisms for passing parameters between procedures, interfacing with the operating system, and otherwise. The compiler makes assumptions depending on the specific runtime system to generate correct code. Typically the runtime system will have some responsibility for setting up and managing the stack and heap, and may include features such as garbage collection, threads or other dynamic features built into the language.

Overview
Every programming language specifies an execution model, and many implement at least part of that model in a runtime system. One possible definition of runtime system behavior, among others, is "any behavior not directly attributable to the program itself". This definition includes putting parameters onto the stack before function calls, parallel execution of related behaviors, and disk I/O. 
By this definition, essentially every language has a runtime system, including compiled languages, interpreted languages, and embedded domain-specific languages.  Even API-invoked  standalone execution models, such as Pthreads (POSIX threads), have a runtime system that implements the execution model's behavior.
Most scholarly papers on runtime systems focus on the implementation details of parallel runtime systems.  A notable example of a parallel runtime system is Cilk, a popular parallel programming model. The proto-runtime toolkit was created to simplify the creation of parallel runtime systems.In addition to execution model behavior, a runtime system may also perform support services such as type checking, debugging, or code generation and optimization.

Relation to runtime environments
The runtime system is also the gateway through which a running program interacts with the runtime environment. The runtime environment includes not only accessible state values, but also active entities with which the program can interact during execution. For example, environment variables are features of many operating systems, and are part of the runtime environment; a running program can access them via the runtime system.  Likewise, hardware devices such as disks or DVD drives are active entities that a program can interact with via a runtime system.
One unique application of a runtime environment is its use within an operating system that only allows it to run. In other words, from boot until power-down, the entire OS is dedicated to only the application(s) running within that runtime environment. Any other code that tries to run, or any failures in the application(s), will break the runtime environment. Breaking the runtime environment in turn breaks the OS, stopping all processing and requiring a reboot.  If the boot is from read-only memory, an extremely secure, simple, single-mission system is created.
Examples of such directly bundled runtime systems include:

Between 1983 and 1984, Digital Research offered several of their business and educations applications for the IBM PC on bootable floppy diskettes bundled with SpeedStart CP/M-86, a reduced version of CP/M-86 as runtime environment.
Some stand-alone versions of Ventura Publisher (1986–1993), Artline (1988–1991), Timeworks Publisher (1988–1991) and ViewMAX (1990–1992) contained special runtime versions of Digital Research's GEM as their runtime environment.
In the late 1990s, JP Software's command line processor 4DOS was optionally available in a special runtime version to be linked with BATCOMP pre-compiled and encrypted batch jobs in order to create unmodifyable executables from batch scripts and run them on systems without 4DOS installed.

Examples
The runtime system of the C language is a particular set of instructions inserted by the compiler into the executable image.  Among other things, these instructions manage the process stack, create space for local variables, and copy function call parameters onto the top of the stack.  
There are often no clear criteria for determining which language behaviors are part of the runtime system itself and which can be determined by any particular source program.  For example, in C, the setup of the stack is part of the runtime system. It is not determined by the semantics of an individual program because the behavior is globally invariant: it holds over all executions. This systematic behavior implements the execution model of the language, as opposed to implementing semantics of the particular program (in which text is directly translated into code that computes results).
This separation between the semantics of a particular program and the runtime environment is reflected by the different ways of compiling a program: compiling source code to an object file that contains all the functions versus compiling an entire program to an executable binary.  The object file will only contain assembly code relevant to the included functions, while the executable binary will contain additional code that implements the runtime environment.  The object file, on one hand, may be missing information from the runtime environment that will be resolved by linking.  On the other hand, the code in the object file still depends on assumptions in the runtime system; for example, a function may read parameters from a particular register or stack location, depending on the calling convention used by the runtime environment.
Another example is the case of using an application programming interface (API) to interact with a runtime system.  The calls to that API look the same as calls to a regular software library, however at some point during the call the execution model changes. The runtime system implements an execution model different from that of the language the library is written in terms of.  A person reading the code of a normal library would be able to understand the library's behavior by just knowing the language the library was written in. However, a person reading the code of the API that invokes a runtime system would not be able to understand the behavior of the API call just by knowing the language the call was written in.  At some point, via some mechanism, the execution model stops being that of the language the call is written in and switches over to being the execution model implemented by the runtime system.  For example, the trap instruction is one method of switching execution models.   This difference is what distinguishes an API-invoked execution model, such as Pthreads, from a usual software library.  Both Pthreads calls and software library calls are invoked via an API, but Pthreads behavior cannot be understood in terms of the language of the call.  Rather, Pthreads calls bring into play an outside execution model, which is implemented by the Pthreads runtime system (this runtime system is often the OS kernel).
As an extreme example, the physical CPU itself can be viewed as an implementation of the runtime system of a specific assembly language.  In this view, the execution model is implemented by the physical CPU and memory systems.  As an analogy, runtime systems for higher-level languages are themselves implemented using some other languages.  This creates a hierarchy of runtime systems, with the CPU itself—or actually its logic at the microcode layer or below—acting as the lowest-level runtime system.

Advanced features
Some compiled or interpreted languages provide an interface that allows application code to interact directly with the runtime system.  An example is the Thread class in the Java language. The class allows code (that is animated by one thread) to do things such as start and stop other threads.  Normally, core aspects of a language's behavior such as task scheduling and resource management are not accessible in this fashion.
Higher-level behaviors implemented by a runtime system may include tasks such as drawing text on the screen or making an Internet connection.  It is often the case that operating systems provide these kinds of behaviors as well, and when available, the runtime system is implemented as an abstraction layer that translates the invocation of the runtime system into an invocation of the operating system. This hides the complexity or variations in the services offered by different operating systems.  This also implies that the OS kernel can itself be viewed as a runtime system, and that the set of OS calls that invoke OS behaviors may be viewed as interactions with a runtime system.
In the limit, the runtime system may provide services such as a P-code machine or virtual machine, that hide even the processor's instruction set.  This is the approach followed by many interpreted languages such as AWK, and some languages like Java, which are meant to be compiled into some machine-independent intermediate representation code (such as bytecode). This arrangement simplifies the task of language implementation and its adaptation to different machines, and improves efficiency of sophisticated language features such as reflection. It also allows the same program to be executed on any machine without an explicit recompiling step, a feature that has become very important since the proliferation of the World Wide Web. To speed up execution, some runtime systems feature just-in-time compilation to machine code.
A modern aspect of runtime systems is parallel execution behaviors, such as the behaviors exhibited by mutex constructs in Pthreads and parallel section constructs in OpenMP. A runtime system with such parallel execution behaviors may be modularized according to the proto-runtime approach.

History
Notable early examples of runtime systems are the interpreters for BASIC and Lisp.  These environments also included a garbage collector.  Forth is an early example of a language designed to be compiled into intermediate representation code; its runtime system was a virtual machine that interpreted that code.  Another popular, if theoretical, example is Donald Knuth's MIX computer.
In C and later languages that supported dynamic memory allocation, the runtime system also included a library that managed the program's memory pool.
In the object-oriented programming languages, the runtime system was often also responsible for dynamic type checking and resolving method references.

See also
Execution model
Programming model
Run time (program lifecycle phase)
Self-booter
Static build

References
Further reading
"NAME ENTX - Microsoft MS-DOS Computer Pascal runtime system control". 1.00. Microsoft Corp. 1981. Archived from the original on 2018-09-23. Retrieved 2018-09-23.

External links
 The dictionary definition of run-time at Wiktionary