In mathematics and computing, the hexadecimal (also base-16 or simply hex) numeral system is a positional numeral system that represents numbers using a radix (base) of sixteen. Unlike the decimal system representing numbers using ten symbols, hexadecimal uses sixteen distinct symbols, most often the symbols "0"–"9" to represent values 0 to 9, and "A"–"F" (or alternatively "a"–"f") to represent values from ten to fifteen.
Software developers and system designers widely use hexadecimal numbers because they provide a human-friendly representation of binary-coded values. Each hexadecimal digit represents four bits (binary digits), also known as a nibble (or nybble). For example, an 8-bit byte can have values ranging from 00000000 to 11111111 (0 to 255 decimal) in binary form, which can be conveniently represented as 00 to FF in hexadecimal.
In mathematics, a subscript is typically used to specify the base.  For example, the decimal value 40,088 would be expressed in hexadecimal as 9C9816.  In programming, several notations denote hexadecimal numbers, usually involving a prefix. The prefix 0x is used in C, which would denote this value as 0x9C98.
Hexadecimal is used in the transfer encoding Base16, in which each byte of the plaintext is broken into two 4-bit values and represented by two hexadecimal digits.

Representation
Written representation
In most current use cases, the letters A–F or a–f represent the values 10–15, while the numerals 0–9 are used to represent their decimal values.
There is no universal convention to use lowercase or uppercase, so each is prevalent or preferred in particular environments by community standards or convention; even mixed case is used. Seven-segment displays use mixed-case AbCdEF to make digits that can be distinguished from each other.
There is some standardization of using spaces (rather than commas or another punctuation mark) to separate hex values in a long list. For instance, in the following hex dump, each 8-bit byte is a 2-digit hex number, with spaces between them, while the 32-bit offset at the start is an 8-digit hex number.

Distinguishing from decimal
In contexts where the base is not clear, hexadecimal numbers can be ambiguous and confused with numbers expressed in other bases. There are several conventions for expressing values unambiguously. A numerical subscript (itself written in decimal) can give the base explicitly: 15910 is decimal 159; 15916 is hexadecimal 159, which equals 34510. Some authors prefer a text subscript, such as 159decimal and 159hex, or 159d and 159h.
Donald Knuth introduced the use of a particular typeface to represent a particular radix in his book The TeXbook. Hexadecimal representations are written there in a typewriter typeface: 5A3
In linear text systems, such as those used in most computer programming environments, a variety of methods have arisen:

Unix (and related) shells, AT&T assembly language and likewise the C programming language (and its syntactic descendants such as C++, C#, Go, D, Java, JavaScript, Python and Windows PowerShell) use the prefix 0x for numeric constants represented in hex: 0x5A3. Character and string constants may express character codes in hexadecimal with the prefix \x followed by two hex digits: '\x1B' represents the Esc control character; "\x1B[0m\x1B[25;1H" is a string containing 11 characters with two embedded Esc characters. To output an integer as hexadecimal with the printf function family, the format conversion code %X or %x is used.
In XML and XHTML, characters can be expressed as hexadecimal numeric character references using the notation &#xcode;, for instance &#x2019; represents the character U+2019 (the right single quotation mark). If there is no x the number is decimal (thus &#8217; is the same character).
In Intel-derived assembly languages and Modula-2, hexadecimal is denoted with a suffixed H or h: FFh or 05A3H. Some implementations require a leading zero when the first hexadecimal digit character is not a decimal digit, so one would write 0FFh instead of FFh. Some other implementations (such as NASM) allow C-style numbers (0x42).
Other assembly languages (6502, Motorola), Pascal, Delphi, some versions of BASIC (Commodore), GameMaker Language, Godot and Forth use $ as a prefix: $5A3.
Some assembly languages (Microchip) use the notation H'ABCD' (for ABCD16). Similarly, Fortran 95 uses Z'ABCD'.
Ada and VHDL enclose hexadecimal numerals in based "numeric quotes": 16#5A3#. For bit vector constants VHDL uses the notation x"5A3".
Verilog represents hexadecimal constants in the form 8'hFF, where 8 is the number of bits in the value and FF is the hexadecimal constant.
The Smalltalk language uses the prefix 16r: 16r5A3
PostScript and the Bourne shell and its derivatives denote hex with prefix 16#: 16#5A3.
Common Lisp uses the prefixes #x and #16r. Setting the variables *read-base* and *print-base* to 16 can also be used to switch the reader and printer of a Common Lisp system to Hexadecimal number representation for reading and printing numbers. Thus Hexadecimal numbers can be represented without the #x or #16r prefix code, when the input or output base has been changed to 16.
MSX BASIC, QuickBASIC, FreeBASIC and Visual Basic prefix hexadecimal numbers with &H: &H5A3
BBC BASIC and Locomotive BASIC use & for hex.
TI-89 and 92 series uses a 0h prefix: 0h5A3
ALGOL 68 uses the prefix 16r to denote hexadecimal numbers: 16r5a3.  Binary, quaternary (base-4) and octal numbers can be specified similarly.
The most common format for hexadecimal on IBM mainframes (zSeries) and midrange computers (IBM i) running the traditional OS's (zOS, zVSE, zVM, TPF, IBM i) is X'5A3', and is used in Assembler, PL/I, COBOL, JCL, scripts, commands and other places. This format was common on other (and now obsolete) IBM systems as well.  Occasionally quotation marks were used instead of apostrophes.

Syntax that is always Hex
Sometimes the numbers are known to be Hex.

In URIs (including URLs), character codes are written as hexadecimal pairs prefixed with %: http://www.example.com/name%20with%20spaces where %20 is the code for the space (blank) character, ASCII code point 20 in hex, 32 in decimal.
In the Unicode standard, a character value is represented with U+ followed by the hex value, e.g. U+20AC is the Euro sign (€).
Color references in HTML, CSS and X Window can be expressed with six hexadecimal digits (two each for the red, green and blue components, in that order) prefixed with #: white, for example, is represented as #FFFFFF. CSS also allows 3-hexdigit abbreviations with one hexdigit per component: #FA3 abbreviates #FFAA33 (a golden orange:  ).
In MIME (e-mail extensions) quoted-printable encoding, character codes are written as hexadecimal pairs prefixed with =: Espa=F1a is "España" (F1hex is the code for ñ in the ISO/IEC 8859-1 character set).)
PostScript binary data (such as image pixels) can be expressed as un-prefixed consecutive hexadecimal pairs: AA213FD51B3801043FBC ...
Any IPv6 address can be written as eight groups of four hexadecimal digits (sometimes called hextets), where each group is separated by a colon (:). This, for example, is a valid IPv6 address: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 or abbreviated by removing leading zeros as 2001:db8:85a3::8a2e:370:7334 (IPv4 addresses are usually written in decimal).
Globally unique identifiers are written as thirty-two hexadecimal digits, often in unequal hyphen-separated groupings, for example 3F2504E0-4F89-41D3-9A0C-0305E82C3301.

Other symbols for 10–15 and mostly different symbol sets
The use of the letters A through F to represent the digits above 9 was not universal in the early history of computers.

During the 1950s, some installations, such as Bendix-14, favored using the digits 0 through 5 with an overline to denote the values 10–15 as 0, 1, 2, 3, 4 and 5.
The SWAC (1950) and Bendix G-15 (1956) computers used the lowercase letters u, v, w, x, y and z for the values 10 to 15.
The ORDVAC and ILLIAC I (1952) computers (and some derived designs, e.g. BRLESC) used the uppercase letters K, S, N, J, F and L for the values 10 to 15.
The Librascope LGP-30 (1956) used the letters F, G, J, K, Q and W for the values 10 to 15.
On the PERM (1956) computer, hexadecimal numbers were written as letters O for zero, A to N and P for 1 to 15. Many machine instructions had mnemonic hex-codes (A=add, M=multiply, L=load, F=fixed-point etc.); programs were written without instruction names.
The Honeywell Datamatic D-1000 (1957) used the lowercase letters b, c, d, e, f, and g whereas the Elbit 100 (1967) used the uppercase letters B, C, D, E, F and G for the values 10 to 15.
The Monrobot XI (1960) used the letters S, T, U, V, W and X for the values 10 to 15.
The NEC parametron computer NEAC 1103 (1960) used the letters D, G, H, J, K (and possibly V) for values 10–15.
The Pacific Data Systems 1020 (1964) used the letters L, C, A, S, M and D for the values 10 to 15.New numeric symbols and names were introduced in the Bibi-binary notation by Boby Lapointe in 1968.Bruce Alan Martin of Brookhaven National Laboratory considered the choice of A–F "ridiculous". In a 1968 letter to the editor of the CACM, he proposed an entirely new set of symbols based on the bit locations.Ronald O. Whitaker of Rowco Engineering Co., in 1972, proposed a triangular font that allows "direct binary reading" in order to "permit both input and output from computers without respect to encoding matrices."
Some seven-segment display decoder chips (i.e., 74LS47) show unexpected output due to logic designed only to produce 0–9 correctly.

Verbal and digital representations
Since there were no traditional numerals to represent the quantities from ten to fifteen, alphabetic letters were re-employed as a substitute. Most European languages lack non-decimal-based words for some of the numerals eleven to fifteen. Some people read hexadecimal numbers digit by digit, like a phone number, or using the NATO phonetic alphabet, the Joint Army/Navy Phonetic Alphabet, or a similar ad-hoc system. In the wake of the adoption of hexadecimal among IBM System/360 programmers, Magnuson (1968) suggested a pronunciation guide that gave short names to the letters of hexadecimal – for instance, "A" was pronounced "ann", B "bet", C "chris", etc. Another naming-system was published online by Rogers (2007) that tries to make the verbal representation distinguishable in any case, even when the actual number does not contain numbers A–F. Examples are listed in the tables below.  Yet another naming system was elaborated by Babb (2015), based on a joke in Silicon Valley.Others have proposed using the verbal Morse Code conventions to express four-bit hexadecimal digits, with "dit" and "dah" representing zero and one, respectively, so that "0000" is voiced as "dit-dit-dit-dit" (....), dah-dit-dit-dah (-..-) voices the digit with a value of nine, and "dah-dah-dah-dah" (----) voices the hexadecimal digit for decimal 15.

Systems of counting on digits have been devised for both binary and hexadecimal. Arthur C. Clarke suggested using each finger as an on/off bit, allowing finger counting from zero to 102310 on ten fingers. Another system for counting up to FF16 (25510) is illustrated on the right.

Signs
The hexadecimal system can express negative numbers the same way as in decimal: −2A to represent −4210 and so on.
Hexadecimal can also be used to express the exact bit patterns used in the processor, so a sequence of hexadecimal digits may represent a signed or even a floating-point value. This way, the negative number −4210 can be written as FFFF FFD6 in a 32-bit CPU register (in two's-complement), as C228 0000 in a 32-bit FPU register or C045 0000 0000 0000 in a 64-bit FPU register (in the IEEE floating-point standard).

Hexadecimal exponential notation
Just as decimal numbers can be represented in exponential notation, so too can hexadecimal numbers.  P notation uses the letter P (or p, for "power"), whereas E (or e) serves a similar purpose in decimal E notation.  The number after the P is decimal and represents the binary exponent. Increasing the exponent by 1 multiplies by 2, not 16: 20p0 = 10p1 = 8p2 = 4p3 = 2p4 = 1p5. Usually, the number is normalized so that the hexadecimal digits start with 1. (zero is usually 0 with no P).
Example: 1.3DEp42 represents 1.3DE16 × 24210.
P notation is required by the IEEE 754-2008 binary floating-point standard, and can be used for floating-point literals in the C99 edition of the C programming language.
Using the %a or %A conversion specifiers, this notation can be produced by implementations of the printf family of functions following the C99 specification and
Single Unix Specification (IEEE Std 1003.1) POSIX standard.

Conversion
Binary conversion
Most computers manipulate binary data, but it is difficult for humans to work with a large number of digits for even a relatively small binary number. Although most humans are familiar with the base 10 system, it is much easier to map binary to hexadecimal than to decimal because each hexadecimal digit maps to a whole number of bits (410).
This example converts 11112 to base ten. Since each position in a binary numeral can contain either a 1 or a 0, its value may be easily determined by its position from the right:

00012 = 110
00102 = 210
01002 = 410
10002 = 810Therefore:

With little practice, mapping 11112 to F16 in one step becomes easy: see table in written representation. The advantage of using hexadecimal rather than decimal increases rapidly with the size of the number. When the number becomes large, conversion to decimal is very tedious. However, when mapping to hexadecimal, it is trivial to regard the binary string as 4-digit groups and map each to a single hexadecimal digit.This example shows the conversion of a binary number to decimal, mapping each digit to the decimal value, and adding the results.

Compare this to the conversion to hexadecimal, where each group of four digits can be considered independently, and converted directly:

The conversion from hexadecimal to binary is equally direct.

Other simple conversions
Although quaternary (base 4) is little used, it can easily be converted to and from hexadecimal or binary. Each hexadecimal digit corresponds to a pair of quaternary digits and each quaternary digit corresponds to a pair of binary digits. In the above example 5 E B 5 216 = 11 32 23 11 024.
The octal (base 8) system can also be converted with relative ease, although not quite as trivially as with bases 2 and 4. Each octal digit corresponds to three binary digits, rather than four. Therefore, we can convert between octal and hexadecimal via an intermediate conversion to binary followed by regrouping the binary digits in groups of either three or four.

Division-remainder in source base
As with all bases there is a simple algorithm for converting a representation of a number to hexadecimal by doing integer division and remainder operations in the source base. In theory, this is possible from any base, but for most humans only decimal and for most computers only binary (which can be converted by far more efficient methods) can be easily handled with this method.
Let d be the number to represent in hexadecimal, and the series hihi−1...h2h1 be the hexadecimal digits representing the number.

i ← 1
hi ← d mod 16
d ← (d − hi) / 16
If d = 0 (return series hi) else increment i and go to step 2"16" may be replaced with any other base that may be desired.
The following is a JavaScript implementation of the above algorithm for converting any number to a hexadecimal in String representation. Its purpose is to illustrate the above algorithm. To work with data seriously, however, it is much more advisable to work with bitwise operators.

Conversion through addition and multiplication
It is also possible to make the conversion by assigning each place in the source base the hexadecimal representation of its place value — before carrying out multiplication and addition to get the final representation.
For example, to convert the number B3AD to decimal, one can split the hexadecimal number into its digits: B (1110), 3 (310), A (1010) and D (1310), and then get the final result by multiplying each decimal representation by 16p (p being the corresponding hex digit position, counting from right to left, beginning with 0). In this case, we have that:
B3AD = (11 × 163) + (3 × 162) + (10 × 161) + (13 × 160)
which is 45997 in base 10.

Tools for conversion
Many computer systems provide a calculator utility capable of performing conversions between the various radices frequently including hexadecimal.
In Microsoft Windows, the Calculator utility can be set to Programmer mode, which allows conversions between radix 16 (hexadecimal), 10 (decimal), 8 (octal) and 2 (binary), the bases most commonly used by programmers. In Programmer Mode, the on-screen numeric keypad includes the hexadecimal digits A through F, which are active when "Hex" is selected. In hex mode, however, the Windows Calculator supports only integers.

Elementary arithmetic
Elementary operations such as addition, subtraction, multiplication and division can be carried out indirectly through conversion to an alternate numeral system, such as the commonly-used decimal system or the binary system where each hex digit corresponds to four binary digits.
Alternatively, one can also perform elementary operations directly within the hex system itself — by relying on its addition/multiplication tables and its corresponding standard algorithms such as long division and the traditional subtraction algorithm.

Real numbers
Rational numbers
As with other numeral systems, the hexadecimal system can be used to represent rational numbers, although repeating expansions are common since sixteen (1016) has only a single prime factor: two.
For any base, 0.1 (or "1/10") is always equivalent to one divided by the representation of that base value in its own number system. Thus, whether dividing one by two for binary or dividing one by sixteen for hexadecimal, both of these fractions are written as 0.1. Because the radix 16 is a perfect square (42), fractions expressed in hexadecimal have an odd period much more often than decimal ones, and there are no cyclic numbers (other than trivial single digits). Recurring digits are exhibited when the denominator in lowest terms has a prime factor not found in the radix; thus, when using hexadecimal notation, all fractions with denominators that are not a power of two result in an infinite string of recurring digits (such as thirds and fifths). This makes hexadecimal (and binary) less convenient than decimal for representing rational numbers since a larger proportion lie outside its range of finite representation.
All rational numbers finitely representable in hexadecimal are also finitely representable in decimal, duodecimal and sexagesimal: that is, any hexadecimal number with a finite number of digits also has a finite number of digits when expressed in those other bases. Conversely, only a fraction of those finitely representable in the latter bases are finitely representable in hexadecimal. For example, decimal 0.1 corresponds to the infinite recurring representation 0.19 in hexadecimal. However, hexadecimal is more efficient than duodecimal and sexagesimal for representing fractions with powers of two in the denominator. For example, 0.062510 (one-sixteenth) is equivalent to 0.116, 0.0912, and 0;3,4560.

Irrational numbers
The table below gives the expansions of some common irrational numbers in decimal and hexadecimal.

Powers
Powers of two have very simple expansions in hexadecimal. The first sixteen powers of two are shown below.

Cultural history
The traditional Chinese units of measurement were base-16. For example, one jīn (斤) in the old system equals sixteen taels. The suanpan (Chinese abacus) can be used to perform hexadecimal calculations such as additions and subtractions.As with the duodecimal system, there have been occasional attempts to promote hexadecimal as the preferred numeral system. These attempts often propose specific pronunciation and symbols for the individual numerals. Some proposals unify standard measures so that they are multiples of 16.
An early such proposal was put forward by John W. Nystrom in Project of a New System of Arithmetic, Weight, Measure and Coins: Proposed to be called the Tonal System, with Sixteen to the Base, published in 1862.
Nystrom among other things suggested hexadecimal time, which subdivides a day by 16, 
so that there are 16 "hours" (or "10 tims", pronounced tontim) in a day.

The word hexadecimal is first recorded in 1952. It is macaronic in the sense that it combines Greek ἕξ (hex)  "six" with Latinate -decimal.
The  all-Latin alternative sexadecimal (compare the word sexagesimal for base 60) is older, and sees at least occasional use from the late 19th century.
It is still in use in the 1950s   in Bendix documentation.
Schwartzman (1994) argues that use of  sexadecimal may have been avoided because of its suggestive abbreviation to sex.
Many western languages since the 1960s have adopted terms equivalent in formation to hexadecimal (e.g. French hexadécimal, Italian esadecimale, Romanian hexazecimal, Serbian хексадецимални, etc.)
but others have introduced terms which substitute native words for "sixteen" (e.g. Greek  δεκαεξαδικός, Icelandic sextándakerfi, Russian шестнадцатеричной etc.)
Terminology and notation did not become settled until the end of the 1960s. 
Donald Knuth in 1969 argued that the etymologically correct term would be  senidenary, or possibly sedenary, a Latinate term intended to convey "grouped by 16" modelled on   binary, ternary and quaternary etc.
According to Knuth's argument, the correct terms for   decimal and octal arithmetic would be denary and octonary, respectively. 
Alfred B. Taylor used senidenary in his mid-1800s work on alternative number bases, although he rejected base 16 because of its "incommodious number of digits".The now-current notation using the letters A to F establishes itself as the de facto standard beginning in 1966, in the wake of the 
publication of the Fortran IV manual for IBM System/360, which (unlike earlier variants of Fortran) recognizes a standard for entering hexadecimal constants.
As noted above, alternative notations were used by NEC  (1960)  and The Pacific Data Systems 1020 (1964). The standard adopted by IBM seems to have become widely adopted by 1968, when Bruce Alan Martin
in his  letter to the editor of the CACM complains that

With the ridiculous choice of letters A, B, C, D, E, F as hexadecimal number symbols adding to already troublesome problems of distinguishing octal (or hex) numbers from decimal numbers (or variable names), the time is overripe for reconsideration of our number symbols. This should have been done before poor choices gelled into a de facto standard!
Martin's argument was that  use of numerals 0 to 9 in nondecimal numbers  "imply to us a base-ten place-value scheme":
"Why not use entirely new symbols (and names) for the seven or fifteen nonzero digits needed in octal or hex. Even use of the letters A through P would be an improvement, but entirely new symbols could reflect the binary nature of the system".
He also argued that "re-using alphabetic letters for numerical digits represents a gigantic backward step from the invention of distinct, non-alphabetic glyphs for numerals sixteen centuries ago" (as Brahmi numerals, and later in a Hindu–Arabic numeral system), 
and that the recent ASCII standards (ASA X3.4-1963 and USAS X3.4-1968) 
"should have preserved six code table positions following the ten decimal digits 
-- rather than needlessly filling these with punctuation characters"
(":;<=>?") that might have been placed elsewhere among the 128 available positions.

Base16 (transfer encoding)
Base16 (as a proper name without a space) can also refer to a binary to text encoding belonging to the same family as Base32, Base58, and Base64.
In this case, data is broken into 4-bit sequences, and each value (between 0 and 15 inclusively) is encoded using one of 16 symbols from the ASCII character set. Although any 16 symbols from the ASCII character set can be used, in practice the ASCII digits '0'–'9' and the letters 'A'–'F' (or the lowercase 'a'–'f') are always chosen in order to align with standard written notation for hexadecimal numbers.
There are several advantages of Base16 encoding:

Most programming languages already have facilities to parse ASCII-encoded hexadecimal
Being exactly half a byte, 4-bits is easier to process than the 5 or 6 bits of Base32 and Base64 respectively
The symbols 0–9 and A–F are universal in hexadecimal notation, so it is easily understood at a glance without needing to rely on a symbol lookup table
Many CPU architectures have dedicated instructions that allow access to a half-byte (otherwise known as a "nibble"), making it more efficient in hardware than Base32 and Base64The main disadvantages of Base16 encoding are:

Space efficiency is only 50%, since each 4-bit value from the original data will be encoded as an 8-bit byte. In contrast, Base32 and Base64 encodings have a space efficiency of 63% and 75% respectively.
Possible added complexity of having to accept both uppercase and lowercase lettersSupport for Base16 encoding is ubiquitous in modern computing. It is the basis for the W3C standard for URL percent encoding, where a character is replaced with a percent sign "%" and its Base16-encoded form. Most modern programming languages directly include support for formatting and parsing Base16-encoded numbers.

See also
Base32, Base64 (content encoding schemes)
Hexadecimal time
IBM hexadecimal floating-point
Hex editor
Hex dump
Bailey–Borwein–Plouffe formula (BBP)
Hexspeak
P notation


== References ==