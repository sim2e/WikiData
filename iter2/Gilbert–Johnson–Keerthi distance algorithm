The Gilbert–Johnson–Keerthi distance algorithm is a method of determining the minimum distance between two convex sets, first published by Elmer G. Gilbert, Daniel W. Johnson, and S. Sathiya Keerthi in 1988.  Unlike many other distance algorithms, it does not require that the geometry data be stored in any specific format, but instead relies solely on a support function to iteratively generate closer simplices to the correct answer using the configuration space obstacle (CSO) of two convex shapes, more commonly known as the Minkowski difference.
"Enhanced GJK" algorithms use edge information to speed up the algorithm by following edges when looking for the next simplex.  This improves performance substantially for polytopes with large numbers of vertices.
GJK makes use of Johnson's distance sub algorithm, which computes in the general case the point of a tetrahedron closest to the origin, but is known to suffer from numerical robustness problems.  In 2017 Montanari, Petrinic, and Barbieri proposed a new sub algorithm based on signed volumes which avoid the multiplication of potentially small quantities and achieved a speedup of 15% to 30%.
GJK algorithms are often used incrementally in simulation systems and video games. In this mode, the final simplex from a previous solution is used as the initial guess in the next iteration, or "frame".  If the positions in the new frame are close to those in the old frame, the algorithm will converge in one or two iterations. This yields collision detection systems which operate in near-constant time.
The algorithm's stability, speed, and small storage footprint make it popular for realtime collision detection, especially in physics engines for video games.

Overview
GJK relies on two functions:

  
    
      
        
          S
          u
          p
          p
          o
          r
          t
        
        (
        
          s
          h
          a
          p
          e
        
        ,
        
          
            
              d
              →
            
          
        
        )
      
    
    {\displaystyle \mathrm {Support} (\mathrm {shape} ,{\vec {d}})}
  , which returns the point on shape which has the highest dot product with 
  
    
      
        
          
            
              d
              →
            
          
        
      
    
    {\displaystyle {\vec {d}}}
  .

  
    
      
        
          N
          e
          a
          r
          e
          s
          t
          S
          i
          m
          p
          l
          e
          x
        
        (
        s
        )
      
    
    {\displaystyle \mathrm {NearestSimplex} (s)}
  , which takes a simplex s and returns the simplex on s closest to the origin, and a direction toward the origin normal to the new simplex. If s itself contains the origin, NearestSimplex accepts s and the two shapes are determined to intersect.The simplices handled by NearestSimplex may each be any simplex sub-space of Rn. For example in 3D, they may be a point, a line segment, a triangle, or a tetrahedron; each defined by 1, 2, 3, or 4 points respectively.

Pseudocode
function GJK_intersection(shape p, shape q, vector initial_axis):
    vector  A = Support(p, initial_axis) − Support(q, −initial_axis)
    simplex s = {A}
    vector  D = −A

    loop:
        A = Support(p, D) − Support(q, −D)
        if dot(A, D) < 0:
            reject
        s = s ∪ {A}
        s, D, contains_origin := NearestSimplex(s)
        if contains_origin:
            accept

Illustration
See also
Minkowski Portal Refinement
Hyperplane separation theorem

External links
"A fast procedure for computing the distance between complex objects in three-dimensional space", Gilbert, Johnson and Keerthi - the initial publication
"Computing the Distance between Objects", Oxford professor Stephen Cameron's implementation of GJK
"A Strange But Elegant Approach to a Surprisingly Hard Problem (GJK Algorithm)"
A 52 minute video lecture on implementing Gilbert-Johnson-Keerthi
"Improving the GJK algorithm for faster and more reliable distance queries between convex objects", Montanari, Petrinic and Barbieri.
"Collision Detection Accelerated: An Optimization Perspective", Montaut, Le Lidec, Petrik, Sivic and Carpentier. This research article notably shows how the original GJK algorithm can be accelerated by exploiting Nesterov-type acceleration strategies, contributing to lowering the overall computational complexity of GJK.