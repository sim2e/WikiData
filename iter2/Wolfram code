Wolfram code is a widely used numbering system for one-dimensional cellular automaton rules, introduced by Stephen Wolfram in a 1983 paper and popularized in his book A New Kind of Science.The code is based on the observation that a table specifying the new state of each cell in the automaton, as a function of the states in its neighborhood, may be interpreted as a k-digit number in the S-ary positional number system, where S is the number of states that each cell in the automaton may have, k = S2n + 1 is the number of neighborhood configurations, and n is the radius of the neighborhood. Thus, the Wolfram code for a particular rule is a number in the range from 0 to SS2n + 1 − 1, converted from S-ary to decimal notation. It may be calculated as follows:

List all the S2n + 1 possible state configurations of the neighbourhood of a given cell.
Interpreting each configuration as a number as described above, sort them in descending numerical order.
For each configuration, list the state which the given cell will have, according to this rule, on the next iteration.
Interpret the resulting list of states again as an S-ary number, and convert this number to decimal.  The resulting decimal number is the Wolfram code.The Wolfram code does not specify the size (nor shape) of the neighbourhood, nor the number of states — these are assumed to be known from context.  When used on their own without such context, the codes are often assumed to refer to the class of elementary cellular automata, two-state one-dimensional cellular automata with a (contiguous) three-cell neighbourhood, which Wolfram extensively investigates in his book.  Notable rules in this class include rule 30, rule 110, and rule 184. Rule 90 is also interesting because it creates Pascal's triangle modulo 2. A code of this type suffixed by an R, such as "Rule 37R", indicates a second-order cellular automaton with the same neighborhood structure.
While in a strict sense every Wolfram code in the valid range defines a different rule, some of these rules are isomorphic and usually considered equivalent.  For example, rule 110 above is isomorphic with the rules 124, 137 and 193,  which can be obtained from the original by left-right reflection and by renumbering the states.  By convention, each such isomorphism class is represented by the rule with the lowest code number in it.  A disadvantage of the Wolfram notation, and the use of decimal notation in particular, is that it makes such isomorphisms harder to see than some alternative notations.  Despite this, it has become the de facto standard way of referring to one-dimensional cellular automata.

Generalized cellular automata
The number of possible rules, R, for a generalized cellular automaton in which each cell may assume one of S states as determined by a neighborhood size of n, in a D-dimensional space is given by:
R=SS(2n+1)D
The most common example has S = 2, n = 1 and D = 1, giving R = 256. The number of possible rules has an extreme dependence on the dimensionality of the system.  For example, increasing the number of dimensions (D) from 1 to 2 increases the number of possible rules from 256 to 2512 (which is ~1.341×10154).


== References ==