Description logics (DL) are a family of formal knowledge representation languages. Many DLs are more expressive than propositional logic but less expressive than first-order logic. In contrast to the latter, the core reasoning problems for DLs are (usually) decidable, and efficient decision procedures have been designed and implemented for these problems. There are general, spatial, temporal, spatiotemporal, and fuzzy description logics, and each description logic features a different balance between expressive power and reasoning complexity by supporting different sets of mathematical constructors.DLs are used in artificial intelligence to describe and reason about the relevant concepts of an application domain (known as terminological knowledge). It is of particular importance in providing a logical formalism for ontologies and the Semantic Web: the Web Ontology Language (OWL) and its profiles are based on DLs. The most notable application of DLs and OWL is in biomedical informatics where DL assists in the codification of biomedical knowledge.

Introduction
A description logic (DL) models concepts, roles and individuals, and their relationships.
The fundamental modeling concept of a DL is the axiom—a logical statement relating roles and/or concepts. This is a key difference from the  frames paradigm where a frame specification declares and completely defines a class.

Nomenclature
Terminology compared to FOL and OWL
The description logic community uses different terminology than the first-order logic (FOL) community for operationally equivalent notions; some examples are given below. The Web Ontology Language (OWL) uses again a different terminology, also given in the table below.

Naming convention
There are many varieties of description logics and there is an informal naming convention, roughly describing the operators allowed. The expressivity is encoded in the label for a logic starting with one of the following basic logics:

Followed by any of the following extensions:

Exceptions
Some canonical DLs that do not exactly fit this convention are:

Examples
As an example, 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   is a centrally important description logic from which comparisons with other varieties can be made. 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   is simply 
  
    
      
        
          
            A
            L
          
        
      
    
    {\displaystyle {\mathcal {AL}}}
   with complement of any concept allowed, not just atomic concepts. 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   is used instead of the equivalent 
  
    
      
        
          
            A
            L
            U
            E
          
        
      
    
    {\displaystyle {\mathcal {ALUE}}}
  .
A further example, the description logic 
  
    
      
        
          
            S
            H
            I
            Q
          
        
      
    
    {\displaystyle {\mathcal {SHIQ}}}
   is the logic 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   plus  extended cardinality restrictions, and transitive and inverse roles. The naming conventions aren't purely systematic so that the logic 
  
    
      
        
          
            A
            L
            C
            O
            I
            N
          
        
      
    
    {\displaystyle {\mathcal {ALCOIN}}}
   might be referred to as 
  
    
      
        
          
            A
            L
            C
            N
            I
            O
          
        
      
    
    {\displaystyle {\mathcal {ALCNIO}}}
   and other abbreviations are also made where possible.
The Protégé ontology editor supports 
  
    
      
        
          
            
              S
              H
              O
              I
              N
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SHOIN}}^{\mathcal {(D)}}}
  . Three major biomedical informatics terminology bases, SNOMED CT, GALEN, and GO, are expressible in 
  
    
      
        
          
            E
            L
          
        
      
    
    {\displaystyle {\mathcal {EL}}}
   (with additional role properties).
OWL 2 provides the expressiveness of  
  
    
      
        
          
            
              S
              R
              O
              I
              Q
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SROIQ}}^{\mathcal {(D)}}}
  , OWL-DL is based on 
  
    
      
        
          
            
              S
              H
              O
              I
              N
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SHOIN}}^{\mathcal {(D)}}}
  , and for OWL-Lite it is 
  
    
      
        
          
            
              S
              H
              I
              F
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SHIF}}^{\mathcal {(D)}}}
  .

History
Description logic was given its current name in the 1980s. Previous to this it was called (chronologically): terminological systems, and concept languages.

Knowledge representation
Frames and semantic networks lack formal (logic-based) semantics. DL was first introduced into knowledge representation (KR) systems to overcome this deficiency.The first DL-based KR system was KL-ONE (by Ronald J. Brachman and Schmolze, 1985). During the '80s other DL-based systems using structural subsumption algorithms were developed including KRYPTON (1983), LOOM (1987), BACK (1988), K-REP (1991) and CLASSIC (1991). This approach featured DL with limited expressiveness but relatively efficient (polynomial time) reasoning.In the early '90s, the introduction of a new tableau based algorithm paradigm allowed efficient reasoning on more expressive DL. DL-based systems using these algorithms — such as KRIS (1991) — show acceptable reasoning performance on typical inference problems even though the worst case complexity is no longer polynomial.From the mid '90s, reasoners were created with good practical performance on very expressive DL with high worst case complexity. Examples from this period include FaCT, RACER (2001), CEL (2005), and KAON 2 (2005).
DL reasoners, such as FaCT, FaCT++, RACER, DLP and Pellet, implement the method of analytic tableaux. KAON2 is implemented by algorithms which reduce a SHIQ(D) knowledge base to a disjunctive datalog program.

Semantic web
The DARPA Agent Markup Language (DAML) and Ontology Inference Layer (OIL) ontology languages for the Semantic Web can be viewed as
syntactic variants of DL. In particular, the formal semantics and reasoning in OIL use the 
  
    
      
        
          
            S
            H
            I
            Q
          
        
      
    
    {\displaystyle {\mathcal {SHIQ}}}
   DL. The DAML+OIL DL was developed as a submission to—and formed the starting point of—the World Wide Web Consortium (W3C) Web Ontology Working Group. In 2004, the Web Ontology Working Group completed its work by issuing the OWL recommendation. The design of OWL is based on the 
  
    
      
        
          
            S
            H
          
        
      
    
    {\displaystyle {\mathcal {SH}}}
   family of DL with OWL DL and OWL Lite based on 
  
    
      
        
          
            
              S
              H
              O
              I
              N
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SHOIN}}^{\mathcal {(D)}}}
   and 
  
    
      
        
          
            
              S
              H
              I
              F
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SHIF}}^{\mathcal {(D)}}}
   respectively.The W3C OWL Working Group began work in 2007 on a refinement of - and extension to - OWL. In 2009, this was completed by the issuance of the OWL2 recommendation. OWL2 is based on the description logic 
  
    
      
        
          
            
              S
              R
              O
              I
              Q
            
          
          
            
              (
              D
              )
            
          
        
      
    
    {\displaystyle {\mathcal {SROIQ}}^{\mathcal {(D)}}}
  . Practical experience demonstrated that OWL DL lacked several key features necessary to model complex domains.

Modeling
In DL, a distinction is drawn between the so-called TBox (terminological box) and the ABox (assertional box). In general, the TBox contains sentences describing concept hierarchies (i.e., relations between concepts) while the ABox contains ground sentences stating where in the hierarchy, individuals belong (i.e., relations between individuals and concepts). For example, the statement:

belongs in the TBox, while the statement:

belongs in the ABox.
Note that the TBox/ABox distinction is not significant, in the same sense that the two "kinds" of sentences are not treated differently in first-order logic (which subsumes most DL). When translated into first-order logic, a subsumption axiom like (1) is simply a conditional restriction to unary predicates (concepts) with only variables appearing in it. Clearly, a sentence of this form is not privileged or special over sentences in which only constants ("grounded" values) appear like (2).
So why was the distinction introduced? The primary reason is that the separation can be useful when describing and formulating decision-procedures for various DL. For example, a reasoner might process the TBox and ABox separately, in part because certain key inference problems are tied to one but not the other one ('classification' is related to the TBox, 'instance checking' to the ABox). Another example is that the complexity of the TBox can greatly affect the performance of a given decision-procedure for a certain DL, independently of the ABox. Thus, it is useful to have a way to talk about that specific part of the knowledge base.
The secondary reason is that the distinction can make sense from the knowledge base modeler's perspective. It is plausible to distinguish between our conception of terms/concepts in the world (class axioms in the TBox) and particular manifestations of those terms/concepts (instance assertions in the ABox). In the above example: when the hierarchy within a company is the same in every branch but the assignment to employees is different in every department (because there are other people working there), it makes sense to reuse the TBox for different branches that do not use the same ABox.
There are two features of description logic that are not shared by most other data description formalisms: DL does not make the unique name assumption (UNA) or the closed-world assumption (CWA). Not having UNA means that two concepts with different names may be allowed by some inference to be shown to be equivalent. Not having CWA, or rather having the open world assumption (OWA) means that lack of knowledge of a fact does not immediately imply knowledge of the negation of a fact.

Formal description
Like first-order logic (FOL), a syntax defines which collections of symbols are legal expressions in a description logic, and semantics determine meaning. Unlike FOL, a DL may have several well known syntactic variants.

Syntax
The syntax of a member of the description logic family is characterized by its recursive definition, in which the constructors that can be used to form concept terms are stated. Some constructors are related to logical constructors in first-order logic (FOL) such as intersection or conjunction of concepts, union or disjunction of concepts, negation or complement of concepts, universal restriction and existential restriction. Other constructors have no corresponding construction in FOL including restrictions on roles for example, inverse, transitivity and functionality.

Notation
Let C and D be concepts, a and b be individuals, and R be a role.
If a is R-related to b, then b is called an R-successor of a.

The description logic ALC
The prototypical DL Attributive Concept Language with Complements (
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
  ) was introduced by Manfred Schmidt-Schauß and Gert Smolka in 1991, and is the basis of many more expressive DLs. The following definitions follow the treatment in Baader et al.Let 
  
    
      
        
          N
          
            C
          
        
      
    
    {\displaystyle N_{C}}
  , 
  
    
      
        
          N
          
            R
          
        
      
    
    {\displaystyle N_{R}}
   and 
  
    
      
        
          N
          
            O
          
        
      
    
    {\displaystyle N_{O}}
    be (respectively) sets of concept names (also known as atomic concepts), role names and individual names (also known as individuals, nominals or objects). Then the ordered triple (
  
    
      
        
          N
          
            C
          
        
      
    
    {\displaystyle N_{C}}
  , 
  
    
      
        
          N
          
            R
          
        
      
    
    {\displaystyle N_{R}}
  , 
  
    
      
        
          N
          
            O
          
        
      
    
    {\displaystyle N_{O}}
  ) is the signature.

Concepts
The set of 
  
    
      
        
          
            A
            L
            C
          
        
      
    
    {\displaystyle {\mathcal {ALC}}}
   concepts is the smallest set such that:

The following are concepts:

  
    
      
        ⊤
      
    
    {\displaystyle \top }
   (top is a concept)

  
    
      
        ⊥
      
    
    {\displaystyle \bot }
   (bottom is a concept)
Every 
  
    
      
        A
        ∈
        
          N
          
            C
          
        
      
    
    {\displaystyle A\in N_{C}}
   (all atomic concepts are concepts)
If 
  
    
      
        C
      
    
    {\displaystyle C}
   and 
  
    
      
        D
      
    
    {\displaystyle D}
   are concepts and 
  
    
      
        R
        ∈
        
          N
          
            R
          
        
      
    
    {\displaystyle R\in N_{R}}
   then the following are concepts:

  
    
      
        C
        ⊓
        D
      
    
    {\displaystyle C\sqcap D}
   (the intersection of two concepts is a concept)

  
    
      
        C
        ⊔
        D
      
    
    {\displaystyle C\sqcup D}
   (the union of two concepts is a concept)

  
    
      
        ¬
        C
      
    
    {\displaystyle \neg C}
   (the complement of a concept is a concept)

  
    
      
        ∀
        R
        .
        C
      
    
    {\displaystyle \forall R.C}
   (the universal restriction of a concept by a role is a concept)

  
    
      
        ∃
        R
        .
        C
      
    
    {\displaystyle \exists R.C}
   (the existential restriction of a concept by a role is a concept)

Terminological axioms
A general concept inclusion (GCI) has the form 
  
    
      
        C
        ⊑
        D
      
    
    {\displaystyle C\sqsubseteq D}
   where 
  
    
      
        C
      
    
    {\displaystyle C}
   and 
  
    
      
        D
      
    
    {\displaystyle D}
   are concepts. Write 
  
    
      
        C
        ≡
        D
      
    
    {\displaystyle C\equiv D}
   when 
  
    
      
        C
        ⊑
        D
      
    
    {\displaystyle C\sqsubseteq D}
   and 
  
    
      
        D
        ⊑
        C
      
    
    {\displaystyle D\sqsubseteq C}
  . A TBox is any finite set of GCIs.

Assertional axioms
A concept assertion is a statement of the form 
  
    
      
        a
        :
        C
      
    
    {\displaystyle a:C}
   where  
  
    
      
        a
        ∈
        
          N
          
            O
          
        
      
    
    {\displaystyle a\in N_{O}}
   and C is a concept.
A role assertion is a statement of the form 
  
    
      
        (
        a
        ,
        b
        )
        :
        R
      
    
    {\displaystyle (a,b):R}
   where 
  
    
      
        a
        ,
        b
        ∈
        
          N
          
            O
          
        
      
    
    {\displaystyle a,b\in N_{O}}
    and R is a role.An ABox is a finite set of assertional axioms.

Knowledge base
A knowledge base (KB) is an ordered pair 
  
    
      
        (
        
          
            T
          
        
        ,
        
          
            A
          
        
        )
      
    
    {\displaystyle ({\mathcal {T}},{\mathcal {A}})}
   for TBox 
  
    
      
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {T}}}
   and ABox 
  
    
      
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {A}}}
  .

Semantics
The semantics of description logics are defined by interpreting concepts as sets of individuals and roles as sets of ordered pairs of individuals. Those individuals are typically assumed from a given domain. The semantics of non-atomic concepts and roles is then defined in terms of atomic concepts and roles. This is done by using a recursive definition similar to the syntax.

The description logic ALC
The following definitions follow the treatment in Baader et al.A terminological interpretation 
  
    
      
        
          
            I
          
        
        =
        (
        
          Δ
          
            
              I
            
          
        
        ,
        
          ⋅
          
            
              I
            
          
        
        )
      
    
    {\displaystyle {\mathcal {I}}=(\Delta ^{\mathcal {I}},\cdot ^{\mathcal {I}})}
   over a signature 
  
    
      
        (
        
          N
          
            C
          
        
        ,
        
          N
          
            R
          
        
        ,
        
          N
          
            O
          
        
        )
      
    
    {\displaystyle (N_{C},N_{R},N_{O})}
   consists of

a non-empty set 
  
    
      
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}}
   called the domain
a interpretation function 
  
    
      
        
          ⋅
          
            
              I
            
          
        
      
    
    {\displaystyle \cdot ^{\mathcal {I}}}
   that maps:
every individual 
  
    
      
        a
      
    
    {\displaystyle a}
   to an element 
  
    
      
        
          a
          
            
              I
            
          
        
        ∈
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle a^{\mathcal {I}}\in \Delta ^{\mathcal {I}}}
  
every concept to a subset of 
  
    
      
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}}
  
every role name to a subset of 
  
    
      
        
          Δ
          
            
              I
            
          
        
        ×
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \Delta ^{\mathcal {I}}\times \Delta ^{\mathcal {I}}}
  such that

  
    
      
        
          ⊤
          
            
              I
            
          
        
        =
        
          Δ
          
            
              I
            
          
        
      
    
    {\displaystyle \top ^{\mathcal {I}}=\Delta ^{\mathcal {I}}}
  

  
    
      
        
          ⊥
          
            
              I
            
          
        
        =
        ∅
      
    
    {\displaystyle \bot ^{\mathcal {I}}=\emptyset }
  

  
    
      
        (
        C
        ⊔
        D
        
          )
          
            
              I
            
          
        
        =
        
          C
          
            
              I
            
          
        
        ∪
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle (C\sqcup D)^{\mathcal {I}}=C^{\mathcal {I}}\cup D^{\mathcal {I}}}
   (union means disjunction)

  
    
      
        (
        C
        ⊓
        D
        
          )
          
            
              I
            
          
        
        =
        
          C
          
            
              I
            
          
        
        ∩
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle (C\sqcap D)^{\mathcal {I}}=C^{\mathcal {I}}\cap D^{\mathcal {I}}}
   (intersection means conjunction)

  
    
      
        (
        ¬
        C
        
          )
          
            
              I
            
          
        
        =
        
          Δ
          
            
              I
            
          
        
        ∖
        
          C
          
            
              I
            
          
        
      
    
    {\displaystyle (\neg C)^{\mathcal {I}}=\Delta ^{\mathcal {I}}\setminus C^{\mathcal {I}}}
   (complement means negation)

  
    
      
        (
        ∀
        R
        .
        C
        
          )
          
            
              I
            
          
        
        =
        {
        x
        ∈
        
          Δ
          
            
              I
            
          
        
        
          |
        
        
          for
        
        
        
          every
        
        
        y
        ,
        (
        x
        ,
        y
        )
        ∈
        
          R
          
            
              I
            
          
        
        
        
          implies
        
        
        y
        ∈
        
          C
          
            
              I
            
          
        
        }
      
    
    {\displaystyle (\forall R.C)^{\mathcal {I}}=\{x\in \Delta ^{\mathcal {I}}|{\text{for}}\;{\text{every}}\;y,(x,y)\in R^{\mathcal {I}}\;{\text{implies}}\;y\in C^{\mathcal {I}}\}}
  

  
    
      
        (
        ∃
        R
        .
        C
        
          )
          
            
              I
            
          
        
        =
        {
        x
        ∈
        
          Δ
          
            
              I
            
          
        
        
          |
        
        
          there
        
        
        
          exists
        
        
        y
        ,
        (
        x
        ,
        y
        )
        ∈
        
          R
          
            
              I
            
          
        
        
        
          and
        
        
        y
        ∈
        
          C
          
            
              I
            
          
        
        }
      
    
    {\displaystyle (\exists R.C)^{\mathcal {I}}=\{x\in \Delta ^{\mathcal {I}}|{\text{there}}\;{\text{exists}}\;y,(x,y)\in R^{\mathcal {I}}\;{\text{and}}\;y\in C^{\mathcal {I}}\}}
  Define 
  
    
      
        
          
            I
          
        
        ⊨
      
    
    {\displaystyle {\mathcal {I}}\models }
   (read in I holds) as follows

TBox
I
          
        
        ⊨
        C
        ⊑
        D
      
    
    {\displaystyle {\mathcal {I}}\models C\sqsubseteq D}
   if and only if 
  
    
      
        
          C
          
            
              I
            
          
        
        ⊆
        
          D
          
            
              I
            
          
        
      
    
    {\displaystyle C^{\mathcal {I}}\subseteq D^{\mathcal {I}}}
  

  
    
      
        
          
            I
          
        
        ⊨
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {I}}\models {\mathcal {T}}}
   if and only if 
  
    
      
        
          
            I
          
        
        ⊨
        Φ
      
    
    {\displaystyle {\mathcal {I}}\models \Phi }
   for every 
  
    
      
        Φ
        ∈
        
          
            T
          
        
      
    
    {\displaystyle \Phi \in {\mathcal {T}}}

ABox
I
          
        
        ⊨
        a
        :
        C
      
    
    {\displaystyle {\mathcal {I}}\models a:C}
   if and only if 
  
    
      
        
          a
          
            
              I
            
          
        
        ∈
        
          C
          
            
              I
            
          
        
      
    
    {\displaystyle a^{\mathcal {I}}\in C^{\mathcal {I}}}
  

  
    
      
        
          
            I
          
        
        ⊨
        (
        a
        ,
        b
        )
        :
        R
      
    
    {\displaystyle {\mathcal {I}}\models (a,b):R}
   if and only if 
  
    
      
        (
        
          a
          
            
              I
            
          
        
        ,
        
          b
          
            
              I
            
          
        
        )
        ∈
        
          R
          
            
              I
            
          
        
      
    
    {\displaystyle (a^{\mathcal {I}},b^{\mathcal {I}})\in R^{\mathcal {I}}}
  

  
    
      
        
          
            I
          
        
        ⊨
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {I}}\models {\mathcal {A}}}
   if and only if 
  
    
      
        
          
            I
          
        
        ⊨
        ϕ
      
    
    {\displaystyle {\mathcal {I}}\models \phi }
   for every 
  
    
      
        ϕ
        ∈
        
          
            A
          
        
      
    
    {\displaystyle \phi \in {\mathcal {A}}}

Knowledge base
Let 
  
    
      
        
          
            K
          
        
        =
        (
        
          
            T
          
        
        ,
        
          
            A
          
        
        )
      
    
    {\displaystyle {\mathcal {K}}=({\mathcal {T}},{\mathcal {A}})}
   be a knowledge base.

  
    
      
        
          
            I
          
        
        ⊨
        
          
            K
          
        
      
    
    {\displaystyle {\mathcal {I}}\models {\mathcal {K}}}
   if and only if 
  
    
      
        
          
            I
          
        
        ⊨
        
          
            T
          
        
      
    
    {\displaystyle {\mathcal {I}}\models {\mathcal {T}}}
   and 
  
    
      
        
          
            I
          
        
        ⊨
        
          
            A
          
        
      
    
    {\displaystyle {\mathcal {I}}\models {\mathcal {A}}}

Inference
Decision problems
In addition to the ability to describe concepts formally, one also would like to employ the description of a set of concepts to ask questions about the concepts and instances described. The most common decision problems are basic database-query-like questions like instance checking (is a particular instance (member of an ABox) a member of a given concept) and relation checking (does a relation/role hold between two instances, in other words does a have property b), and the more global-database-questions like subsumption (is a concept a subset of another concept), and concept consistency (is there no contradiction among the definitions or chain of definitions). The more operators one includes in a logic and the more complicated the TBox (having cycles, allowing non-atomic concepts to include each other), usually the higher the computational complexity is for each of these problems (see Description Logic Complexity Navigator for examples).

Relationship with other logics
First-order logic
Many DLs are decidable fragments of first-order logic (FOL) and are usually fragments of two-variable logic or guarded logic. In addition, some DLs have features that are not covered in FOL; this includes concrete domains (such as integer or strings, which can be used as ranges for roles such as hasAge or hasName) or an operator on roles for the transitive closure of that role.

Fuzzy description logic
Fuzzy description logics combines fuzzy logic with DLs. Since many concepts that are needed for intelligent systems lack well defined boundaries, or precisely defined criteria of membership, fuzzy logic is needed to deal with notions of vagueness and imprecision. This offers a motivation for a generalization of description logic towards dealing with imprecise and vague concepts.

Modal logic
Description logic is related to—but developed independently of—modal logic (ML). Many—but not all—DLs are syntactic variants of ML.In general, an object corresponds to a possible world, a concept corresponds to a modal proposition, and a role-bounded quantifier to a modal operator with that role as its accessibility relation.
Operations on roles (such as composition, inversion, etc.) correspond to the modal operations used in dynamic logic.

Examples
Temporal description logic
Temporal description logic represents—and allows reasoning about—time dependent concepts and many different approaches to this problem exist. For example, a description logic might be combined with a modal temporal logic such as linear temporal logic.

See also
Formal concept analysis
Lattice (order)
Formal semantics (natural language)
Semantic parameterization
Semantic reasoner

References
Further reading
F. Baader, D. Calvanese, D. L. McGuinness, D. Nardi, P. F. Patel-Schneider: The Description Logic Handbook: Theory, Implementation, Applications. Cambridge University Press, Cambridge, UK, 2003. ISBN 0-521-78176-0
Ian Horrocks, Ulrike Sattler: Ontology Reasoning in the SHOQ(D) Description Logic, in  Proceedings of the Seventeenth International Joint Conference on Artificial Intelligence, 2001.
D. Fensel, F. van Harmelen, I. Horrocks, D. McGuinness, and P. F. Patel-Schneider: OIL: An Ontology Infrastructure for the Semantic Web. IEEE Intelligent Systems, 16(2):38-45, 2001.
Ian Horrocks and Peter F. Patel-Schneider: The Generation of DAML+OIL. In Proceedings of the 2001 Description Logic Workshop (DL 2001), volume 49 of CEUR <http://ceur-ws.org/>, pages 30–35, 2001.
Ian Horrocks, Peter F. Patel-Schneider, and Frank van Harmelen: From SHIQ and RDF to OWL: The Making of a Web Ontology Language. Journal of Web Semantics, 1(1):7-26, 2003.
Bernardo Cuenca Grau, Ian Horrocks, Boris Motik, Bijan Parsia, Peter Patel-Schneider, and Ulrike Sattler: OWL 2: The next step for OWL. Journal of Web Semantics, 6(4):309-322, November 2008.
Franz Baader, Ian Horrocks, and Ulrike Sattler: Chapter 3 Description Logics. In Frank van Harmelen, Vladimir Lifschitz, and Bruce Porter, editors, Handbook of Knowledge Representation. Elsevier, 2007.
Alessandro Artale and Enrico Franconi: Temporal Description Logics. In Handbook of Temporal Reasoning in Artificial Intelligence, 2005.
Web Ontology (WebONT) Working Group Charter. W3C, 2003
World Wide Web Consortium Issues RDF and OWL Recommendations. Press Release. W3C, 2004.
OWL Working Group Charter. W3C, 2007.
OWL 2 Connects the Web of Knowledge with the Web of Data. Press Release. W3C, 2009.
Markus Krötzsch, František Simančík, Ian Horrocks: A Description Logic Primer. CoRR arXiv:1201.4089. 2012. A very first introduction for readers without a formal logic background.
Sebastian Rudolph: Foundations of Description Logics. In Reasoning Web: Semantic Technologies for the Web of Data, 7th International Summer School, volume 6848 of Lecture Notes in Computer Science, pages 76–136. Springer, 2011. (springerlink)Introductory text with a focus on modelling and formal semantics. There are also slides.
Jens Lehmann: DL-Learner: Learning concepts in description logics, Journal of Machine Learning Research, 2009.
Franz Baader: Description Logics. In Reasoning Web: Semantic Technologies for Information Systems, 5th International Summer School, volume 5689 of Lecture Notes in Computer Science, pages 1–39. Springer, 2009. (springerlink) Introductory text with a focus on reasoning and language design, and an extended historical overview.
Enrico Franconi: Introduction to Description Logics. Course materials. Faculty of Computer Science, Free University of Bolzano, Italy, 2002. Lecture slides and many literature pointers, somewhat dated.
Ian Horrocks: Ontologies and the Semantic Web. Communications of the ACM, 51(12):58-67, December 2008. A general overview of knowledge representation in Semantic Web technologies.

External links
Description Logic Complexity Navigator, maintained by Evgeny Zolin at the Department of Computer Science
List of Reasoners, OWL research at the University of Manchester

Reasoners
There are some semantic reasoners that deal with OWL and DL. These are some of the most popular:

CEL is an open source LISP-based reasoner (Apache 2.0 License).
Cerebra Engine was a commercial C++-based reasoner, acquired in 2006 by webMethods.
FaCT++  is a free open-source C++-based reasoner.
KAON2 is a free (for non-commercial use) Java-based reasoner, offering fast reasoning support for OWL ontologies.
MSPASS is a free open-source C reasoner for numerous DL models.
Pellet is a dual-licensed (AGPL and proprietary) commercial, Java-based reasoner.
RacerPro of Racer Systems was a commercial (free trials and research licenses are available) lisp-based reasoner, today both an open source version of RACER exists from the original developers at Lübeck University using the BSD 3 license, and also a commercialized version, still named RacerPro by Franz Inc.
Sim-DL is a free open-source Java-based reasoner for the language ALCHQ. It also provides a similarity measurement functionality between concepts. To access this functionality a Protégé plugin can be used.
HermiT is an open-source reasoner based on the "hypertableau" calculus. It is developed by the University of Oxford.
Owlready2 is a package for ontology-oriented programming in Python. It can load OWL 2.0 ontologies as Python objects, modify them, save them, and perform reasoning via HermiT (included). Owlready2 allows a transparent access to OWL ontologies (contrary to usual Java-based API).

Editors
Protégé is a free, open-source ontology editor and a knowledge base framework, which can use DL reasoners offering DIG Interface as a back end for consistency checks.
SWOOP on GitHub, an OWL browser/editor that takes the standard web browser as the basic UI paradigm.

Interfaces
DIG Interface on SourceForge, a standardized XML interface to DLs systems developed by the DL Implementation Group (DIG).
OWL API on SourceForge, a Java interface and implementation for the Web Ontology Language, used to represent Semantic Web ontologies.