In computer programming, event-driven programming is a programming paradigm in which the flow of the program is determined by events such as user actions from mice, keyboards, touchpads and touchscreens. Non-user initiated events can involve sensor inputs, or be programmatically generated (message passing) from other programs or threads. Event-driven programming is the dominant paradigm used in graphical user interfaces and other applications (e.g., JavaScript web applications) that are centered on performing certain actions in response to user input. This is also true of programming for device drivers (e.g., P in USB device driver stacks).
In an event-driven application, there is generally a main loop that listens for events and then triggers a callback function when one of those events is detected. In embedded systems, the same may be achieved using hardware interrupts instead of a constantly running main loop. Event-driven programs can be written in any programming language, although the task is easier in languages that provide high-level abstractions, such as await and closures.

Event handlers
A trivial event handler
Because the code for checking of events and the main loop are common amongst applications, many programming frameworks take care of their implementation and expect the user to provide only the code for the event handlers. In this simple example, there may be a call to an event handler called OnKeyEnter() that includes an argument with a string of characters, corresponding to what the user typed before hitting the ENTER key. To add two numbers, storage outside the event handler must be used.  The implementation might look like below.

While keeping track of history is normally trivial in a sequential program because event handlers execute in response to external events, correctly structuring the handlers to work when called in any order can require special attention and planning in an event-driven program.

Creating event handlers
The first step in developing an event-driven program is to write a series of subroutines, or methods, called event-handler routines. These routines handle the events to which the main program will respond. For example, a single left-button mouse-click on a command button in a GUI program may trigger a routine that will open another window, save data to a database or exit the application. Many modern-day programming environments provide the programmer with event templates, allowing the programmer to focus on writing the event code.
The second step is to bind event handlers to events so that the correct function is called when the event takes place. Graphical editors combine the first two steps: double-click on a button, and the editor creates an (empty) event handler associated with the user clicking the button and opens a text window so you can edit the event handler.
The third step in developing an event-driven program is to write the main loop. This is a function that checks for the occurrence of events, and then calls the matching event handler to process it. Most event-driven programming environments already provide this main loop, so it need not be specifically provided by the application programmer. RPG, an early programming language from IBM, whose 1960s design concept was similar to event-driven programming discussed above, provided a built-in main I/O loop (known as the "program cycle") where the calculations responded in accordance to 'indicators' (flags) that were set earlier in the cycle.

Exception handlers in PL/I
In PL/I, even though a program itself may not be predominantly event-driven, certain abnormal events such as a hardware error, overflow or "program checks" may occur that possibly prevent further processing. Exception handlers may be provided by "ON statements" in (unseen) callers to provide cleaning routines to clean up afterwards before termination, or to perform recovery operations and return to the interrupted procedure.

Common uses
Most existing GUI development tools and architectures rely on event-driven programming. The Java AWT framework processes all UI changes on a single thread, called the Event dispatching thread. Similarly, all UI updates in the Java framework JavaFX occur on the JavaFX Application Thread.In addition, systems such as Node.js are also event-driven.

Criticism
The design of those programs which rely on event-action model has been criticised, and it has been suggested that the event-action model leads programmers to create error-prone, difficult to extend and excessively complex application code. Table-driven state machines have been advocated as a viable alternative. On the other hand, table-driven state machines themselves suffer from significant weaknesses including the state explosion phenomenon. A solution for this is to use Petri nets.

Stackless threading
An event-driven approach is used in hardware description languages. A thread context only needs a CPU stack while actively processing an event; once done, the CPU can move on to process other event-driven threads, which allows an extremely large number of threads to be handled. This is essentially a finite-state machine approach.

See also
Autonomous peripheral operation
Comparison of programming paradigms
Dataflow programming (a similar concept)
DOM events
Event-driven architecture
Event stream processing (a similar concept)
Hardware description language
Interrupt
Inversion of control
Message-oriented middleware
Programming paradigm
Publish–subscribe pattern
Reactor pattern
Signal programming (a similar concept)
Staged event-driven architecture (SEDA)
Time-triggered system (an alternative architecture for computer systems)
Virtual synchrony, a distributed execution model for event-driven programming

References
External links
Concurrency patterns presentation given at scaleconf
Event-Driven Programming: Introduction, Tutorial, History, tutorial by Stephen Ferg
Event-Driven Programming, tutorial by Alan Gauld
Event Collaboration, article by Martin Fowler
Rethinking Swing Threading, article by Jonathan Simon
The event-driven programming style Archived 2005-02-20 at the Wayback Machine, article by Chris McDonald
Event Driven Programming using Template Specialization, article by Christopher Diggins
Schiffer, S.; Frohlich, J.H. (1994). "Concepts and architecture of Vista-a multiparadigm programming environment". Proceedings of 1994 IEEE Symposium on Visual Languages. pp. 40–47. doi:10.1109/VL.1994.363642. ISBN 0-8186-6660-9. S2CID 15927869.
Event-Driven Programming and Agents, chapter
LabWindows/CVI Resources
Distributed Publish/Subscribe Event System, an open-source example which is in production on MSN.com and Microsoft.com
Javascript Event loop