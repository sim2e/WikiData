A system of polynomial equations (sometimes simply a polynomial system) is a set of simultaneous equations f1 = 0, ..., fh = 0 where the fi are polynomials in several variables, say x1, ..., xn, over some field k.
A solution of a polynomial system is a set of values for the xis which belong to some algebraically closed field extension K of k, and make all equations true. When k is the field of rational numbers, K is generally assumed to be the field of complex numbers, because each solution belongs to a field extension of k, which is isomorphic to a subfield of the complex numbers.
This article is about the methods for solving, that is, finding all solutions or describing them. As these methods are designed for being implemented in a computer, emphasis is given on fields k in which computation (including equality testing) is easy and efficient, that is the field of rational numbers and finite fields.
Searching for solutions that belong to a specific set is a problem which is generally much more difficult, and is outside the scope of this article, except for the case of the solutions in a given finite field. For the case of solutions of which all components are integers or rational numbers, see Diophantine equation.

Definition
A simple example of a system of polynomial equations is

  
    
      
        
          
            
              
                
                  x
                  
                    2
                  
                
                +
                
                  y
                  
                    2
                  
                
                −
                5
              
              
                
                =
                0
              
            
            
              
                x
                y
                −
                2
              
              
                
                =
                0.
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}x^{2}+y^{2}-5&=0\\xy-2&=0.\end{aligned}}}
  Its solutions are the four pairs (x, y) = (1, 2), (2, 1), (-1, -2), (-2, -1). These solutions can easily be checked by substitution, but more work is needed for proving that there are no other solutions.
The subject of this article is the study of generalizations of such an examples, and the description of the methods that are used for computing the solutions.
A system of polynomial equations,  or polynomial system is a collection of equations

  
    
      
        
          
            
              
                
                  f
                  
                    1
                  
                
                
                  (
                  
                    
                      x
                      
                        1
                      
                    
                    ,
                    …
                    ,
                    
                      x
                      
                        m
                      
                    
                  
                  )
                
              
              
                
                =
                0
              
            
            
              
              
                
                
                
                ⋮
              
            
            
              
                
                  f
                  
                    n
                  
                
                
                  (
                  
                    
                      x
                      
                        1
                      
                    
                    ,
                    …
                    ,
                    
                      x
                      
                        m
                      
                    
                  
                  )
                
              
              
                
                =
                0
                ,
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}f_{1}\left(x_{1},\ldots ,x_{m}\right)&=0\\&\;\;\vdots \\f_{n}\left(x_{1},\ldots ,x_{m}\right)&=0,\end{aligned}}}
  where each fh is a polynomial in the indeterminates x1, ..., xm, with integer coefficients, or coefficients in some fixed field, often the field of rational numbers or a finite field. Other fields of coefficients, such as the real numbers, are less often used, as their elements cannot be represented in a computer (only approximations of real numbers can be used in computations, and these approximations are always rational numbers).
A solution of a polynomial system is a tuple of values of (x1, ..., xm) that satisfies all equations of the polynomial system. The solutions are sought in the complex numbers, or more generally in an algebraically closed field containing the coefficients. In particular, in characteristic zero, all complex solutions are sought. Searching for the real or rational solutions are much more difficult problems that are not considered in this article.
The set of solutions is not always finite; for example, the solutions of the system

  
    
      
        
          
            
              
                x
                (
                x
                −
                1
                )
              
              
                
                =
                0
              
            
            
              
                x
                (
                y
                −
                1
                )
              
              
                
                =
                0
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}x(x-1)&=0\\x(y-1)&=0\end{aligned}}}
  are a point (x,y) = (1,1) and a line x = 0. Even when the solution set is finite, there is, in general, no closed-form expression of the solutions (in the case of a single equation, this is Abel–Ruffini theorem).
The Barth surface, shown in the figure is the geometric representation of the solutions of a polynomial system reduced to a single equation of degree 6 in 3 variables. Some of its numerous singular points are visible on the image. They are the solutions of a system of 4 equations of degree 5 in 3 variables. Such an overdetermined system has no solution in general (that is if the coefficients are not specific). If it has a finite number of solutions, this number is at most 53 = 125, by Bézout's theorem. However, it has been shown that, for the case of the singular points of a surface of degree 6, the maximum number of solutions is 65, and is reached by the Barth surface.

Basic properties and definitions
A system is overdetermined if the number of equations is higher than the number of variables. A system is inconsistent if it has no complex solution (or, if the coefficients are not complex numbers, no solution in an algebraically closed field containing the coefficients). By Hilbert's Nullstellensatz this means that 1 is a linear combination (with polynomials as coefficients) of the first members of the equations. Most but not all overdetermined systems, when constructed with random coefficients, are inconsistent. For example, the system x3 – 1 = 0, x2 – 1 = 0 is overdetermined (having two equations but only one unknown), but it is not inconsistent since it has the solution x = 1.
A system is underdetermined if the number of equations is lower than the number of the variables. An underdetermined system is either inconsistent or has infinitely many complex solutions (or solutions in an algebraically closed field that contains the coefficients of the equations). This is a non-trivial result of commutative algebra that involves, in particular, Hilbert's Nullstellensatz and Krull's principal ideal theorem.
A system is zero-dimensional if it has a finite number of complex solutions (or solutions in an algebraically closed field). This terminology comes from the fact that the algebraic variety of the solutions has dimension zero. A system with infinitely many solutions is said to be positive-dimensional.
A zero-dimensional system with as many equations as variables is sometimes said to be well-behaved.Bézout's theorem asserts that a well-behaved system whose equations have degrees d1, ..., dn has at most d1⋅⋅⋅dn solutions. This bound is sharp. If all the degrees are equal to d, this bound becomes dn and is exponential in the number of variables. (The fundamental theorem of algebra is the special case n = 1.)
This exponential behavior makes solving polynomial systems difficult and explains why there are few solvers that are able to automatically solve systems with Bézout's bound higher than, say, 25 (three equations of degree 3 or five equations of degree 2 are beyond this bound).

What is solving?
The first thing to do for solving a polynomial system is to decide whether it is inconsistent, zero-dimensional or positive dimensional. This may be done by the computation of a Gröbner basis of the left-hand sides of the equations. The system is inconsistent if this Gröbner basis is reduced to 1. The system is zero-dimensional if, for every variable there is a leading monomial of some element of the Gröbner basis which is a pure power of this variable. For this test, the best monomial order (that is the one which leads generally to the fastest computation) is usually the graded reverse lexicographic one (grevlex).
If the system is positive-dimensional, it has infinitely many solutions. It is thus not possible to enumerate them. It follows that, in this case, solving may only mean "finding a description of the solutions from which the relevant properties of the solutions are easy to extract". There is no commonly accepted such description. In fact there are many different "relevant properties", which involve almost every subfield of algebraic geometry.
A natural example of such a question concerning positive-dimensional systems is the following: decide if a polynomial system over the rational numbers has a finite number of real solutions and compute them. A generalization of this question is find at least one solution in each connected component of the set of real solutions of a polynomial system.  The classical algorithm for solving these question is cylindrical algebraic decomposition, which has a doubly exponential computational complexity and therefore cannot be used in practice, except for very small examples.
For zero-dimensional systems, solving consists of computing all the solutions. There are two different ways of outputting the solutions. The most common way is possible only for real or complex solutions, and consists of outputting numeric approximations of the solutions. Such a solution is called numeric. A solution is certified if it is provided with a bound on the error of the approximations, and if this bound separates the different solutions.
The other way of representing the solutions is said to be algebraic. It uses the fact that, for a zero-dimensional system, the solutions belong to the algebraic closure of the field k of the coefficients of the system. There are several ways to represent the solution in an algebraic closure, which are discussed below. All of them allow one to compute a numerical approximation of the solutions by solving one or several univariate equations. For this computation, it is preferable to use a representation that involves solving only one univariate polynomial per solution, because computing the roots of a polynomial which has approximate coefficients is a highly unstable problem.

Extensions
Trigonometric equations
A trigonometric equation is an equation g = 0 where g is a trigonometric polynomial. Such an equation may be converted into a polynomial system by expanding the sines and cosines in it (using sum and difference formulas), replacing sin(x) and cos(x) by two new variables s and c and adding the new equation s2 + c2 – 1 = 0.
For example, because of the identity

  
    
      
        cos
        ⁡
        (
        3
        x
        )
        =
        4
        
          cos
          
            3
          
        
        ⁡
        (
        x
        )
        −
        3
        cos
        ⁡
        (
        x
        )
        ,
      
    
    {\displaystyle \cos(3x)=4\cos ^{3}(x)-3\cos(x),}
  solving the equation

  
    
      
        
          sin
          
            3
          
        
        ⁡
        (
        x
        )
        +
        cos
        ⁡
        (
        3
        x
        )
        =
        0
      
    
    {\displaystyle \sin ^{3}(x)+\cos(3x)=0}
  is equivalent to solving the polynomial system

  
    
      
        
          
            {
            
              
                
                  
                    s
                    
                      3
                    
                  
                  +
                  4
                  
                    c
                    
                      3
                    
                  
                  −
                  3
                  c
                
                
                  =
                  0
                
              
              
                
                  
                    s
                    
                      2
                    
                  
                  +
                  
                    c
                    
                      2
                    
                  
                  −
                  1
                
                
                  =
                  0.
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}s^{3}+4c^{3}-3c&=0\\s^{2}+c^{2}-1&=0.\end{cases}}}
  For each solution (c0, s0) of this system, there is a unique solution x of the equation such that 0 ≤ x < 2π.
In the case of this simple example, it may be unclear whether the system is, or not, easier to solve than the equation. On more complicated examples, one lacks systematic methods for solving directly the equation, while software are available for automatically solving the corresponding system.

Solutions in a finite field
When solving a system over a finite field k with q elements, one is primarily interested in the solutions in k. As the elements of k are exactly the solutions of the equation xq – x = 0, it suffices, for restricting the solutions to k, to add the equation xiq – xi = 0 for each variable xi.

Coefficients in a number field or in a finite field with non-prime order
The elements of an algebraic number field are usually represented as polynomials in a generator of the field which satisfies some univariate polynomial equation. To work with a polynomial system whose coefficients belong to a number field, it suffices to consider this generator as a new variable and to add the equation of the generator to the equations of the system. Thus solving a polynomial system over a number field is reduced to solving another system over the rational numbers.
For example, if a system contains 
  
    
      
        
          
            2
          
        
      
    
    {\displaystyle {\sqrt {2}}}
  , a system over the rational numbers is obtained by adding the equation r22 – 2 = 0 and replacing 
  
    
      
        
          
            2
          
        
      
    
    {\displaystyle {\sqrt {2}}}
   by r2 in the other equations.
In the case of a finite field, the same transformation allows always supposing that the field k has a prime order.

Algebraic representation of the solutions
Regular chains
The usual way of representing the solutions is through zero-dimensional regular chains. Such a chain consists of a sequence of polynomials f1(x1), f2(x1, x2), ..., fn(x1, ..., xn) such that, for every i such that 1 ≤ i ≤ n

fi is a polynomial in x1, ..., xi only, which has a degree di > 0 in xi;
the coefficient of xidi in fi is a polynomial in x1, ..., xi −1  which does not have any common zero with f1, ..., fi − 1.To such a regular chain is associated a triangular system of equations

  
    
      
        
          
            {
            
              
                
                  
                    f
                    
                      1
                    
                  
                  (
                  
                    x
                    
                      1
                    
                  
                  )
                  =
                  0
                
              
              
                
                  
                    f
                    
                      2
                    
                  
                  (
                  
                    x
                    
                      1
                    
                  
                  ,
                  
                    x
                    
                      2
                    
                  
                  )
                  =
                  0
                
              
              
                
                  
                  ⋮
                
              
              
                
                  
                    f
                    
                      n
                    
                  
                  (
                  
                    x
                    
                      1
                    
                  
                  ,
                  
                    x
                    
                      2
                    
                  
                  ,
                  …
                  ,
                  
                    x
                    
                      n
                    
                  
                  )
                  =
                  0.
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}f_{1}(x_{1})=0\\f_{2}(x_{1},x_{2})=0\\\quad \vdots \\f_{n}(x_{1},x_{2},\ldots ,x_{n})=0.\end{cases}}}
  The solutions of this system are obtained by solving the first univariate equation, substituting the solutions in the other equations, then solving the second equation which is now univariate, and so on. The definition of regular chains implies that the univariate equation obtained from fi has degree di and thus that the system has d1 ... dn solutions, provided that there is no multiple root in this resolution process (fundamental theorem of algebra).
Every zero-dimensional system of polynomial equations is equivalent (i.e. has the same solutions) to a finite number of regular chains. Several regular chains may be needed, as it is the case for the following system which has three solutions.

  
    
      
        
          
            {
            
              
                
                  
                    x
                    
                      2
                    
                  
                  −
                  1
                  =
                  0
                
              
              
                
                  (
                  x
                  −
                  1
                  )
                  (
                  y
                  −
                  1
                  )
                  =
                  0
                
              
              
                
                  
                    y
                    
                      2
                    
                  
                  −
                  1
                  =
                  0.
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}x^{2}-1=0\\(x-1)(y-1)=0\\y^{2}-1=0.\end{cases}}}
  There are several algorithms for computing a triangular decomposition of an arbitrary polynomial system (not necessarily zero-dimensional) into regular chains (or regular semi-algebraic systems).
There is also an algorithm which is specific to the zero-dimensional case and is competitive, in this case, with the direct algorithms. It consists in computing first the Gröbner basis for the graded reverse lexicographic order (grevlex), then deducing the lexicographical Gröbner basis by FGLM algorithm and finally applying the Lextriangular algorithm.This representation of the solutions are fully convenient for coefficients in a finite field. However, for rational coefficients, two aspects have to be taken care of:

The output may involve huge integers which may make the computation and the use of the result problematic.
To deduce the numeric values of the solutions from the output, one has to solve univariate polynomials with approximate coefficients, which is a highly unstable problem.The first issue has been solved by Dahan and Schost: Among the sets of regular chains that represent a given set of solutions, there is a set for which the coefficients are explicitly bounded in terms of the size of the input system, with a nearly optimal bound. This set, called equiprojectable decomposition, depends only on the choice of the coordinates. This allows the use of modular methods for computing efficiently the equiprojectable decomposition.The second issue is generally solved by outputting regular chains of a special form, sometimes called shape lemma, for which all di but the first one are equal to 1. For getting such regular chains, one may have to add a further variable, called separating variable, which is given the index 0. The rational univariate representation, described below,  allows computing such a special regular chain, satisfying Dahan–Schost bound, by starting from either a regular chain or a Gröbner basis.

Rational univariate representation
The rational univariate representation or RUR is a representation of the solutions of a zero-dimensional polynomial system over the rational numbers which has been introduced by  F. Rouillier.A RUR of a zero-dimensional system consists in a linear combination x0 of the variables, called separating variable, and a system of equations

  
    
      
        
          
            {
            
              
                
                  h
                  (
                  
                    x
                    
                      0
                    
                  
                  )
                  =
                  0
                
              
              
                
                  
                    x
                    
                      1
                    
                  
                  =
                  
                    g
                    
                      1
                    
                  
                  (
                  
                    x
                    
                      0
                    
                  
                  )
                  
                    /
                  
                  
                    g
                    
                      0
                    
                  
                  (
                  
                    x
                    
                      0
                    
                  
                  )
                
              
              
                
                  
                  ⋮
                
              
              
                
                  
                    x
                    
                      n
                    
                  
                  =
                  
                    g
                    
                      n
                    
                  
                  (
                  
                    x
                    
                      0
                    
                  
                  )
                  
                    /
                  
                  
                    g
                    
                      0
                    
                  
                  (
                  
                    x
                    
                      0
                    
                  
                  )
                  ,
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}h(x_{0})=0\\x_{1}=g_{1}(x_{0})/g_{0}(x_{0})\\\quad \vdots \\x_{n}=g_{n}(x_{0})/g_{0}(x_{0}),\end{cases}}}
  where h is a univariate polynomial in x0 of degree D and g0, ..., gn are univariate polynomials in x0 of degree less than D.
Given a zero-dimensional polynomial system over the rational numbers, the RUR has the following properties.

All but a finite number linear combinations of the variables are separating variables.
When the separating variable is chosen, the RUR exists and is unique. In particular h and the gi are defined independently of any algorithm to compute them.
The solutions of the system are in one-to-one correspondence with the roots of h and the multiplicity of each root of h equals the multiplicity of the corresponding solution.
The solutions of the system are obtained by substituting the roots of h in the other equations.
If h does not have any multiple root then g0 is the derivative of h.For example, for the system in the previous section, every linear combination of the variable, except the multiples of x, y and x + y, is a separating variable. If one chooses t = x – y/2 as a separating variable, then the RUR is

  
    
      
        
          
            {
            
              
                
                  
                    t
                    
                      3
                    
                  
                  −
                  t
                  =
                  0
                
              
              
                
                  x
                  =
                  
                    
                      
                        
                          t
                          
                            2
                          
                        
                        +
                        2
                        t
                        −
                        1
                      
                      
                        3
                        
                          t
                          
                            2
                          
                        
                        −
                        1
                      
                    
                  
                
              
              
                
                  y
                  =
                  
                    
                      
                        
                          t
                          
                            2
                          
                        
                        −
                        2
                        t
                        −
                        1
                      
                      
                        3
                        
                          t
                          
                            2
                          
                        
                        −
                        1
                      
                    
                  
                  .
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}t^{3}-t=0\\x={\frac {t^{2}+2t-1}{3t^{2}-1}}\\y={\frac {t^{2}-2t-1}{3t^{2}-1}}.\\\end{cases}}}
  The RUR is uniquely defined for a given separating variable, independently of any algorithm, and it preserves the multiplicities of the roots. This is a notable difference with triangular decompositions (even the equiprojectable decomposition), which, in general, do not preserve multiplicities. The RUR shares with equiprojectable decomposition the property of producing an output with coefficients of relatively small size.
For zero-dimensional systems, the RUR allows retrieval of the numeric values of the solutions by solving a single univariate polynomial and substituting them in rational functions. This allows production of certified approximations of the solutions to any given precision.
Moreover, the univariate polynomial h(x0) of the RUR may be factorized, and this gives a RUR for every irreducible factor. This provides the prime decomposition of the given ideal (that is the primary decomposition of the radical of the ideal). In practice, this provides an output with much smaller coefficients, especially in the case of systems with high multiplicities.
Contrarily to triangular decompositions and equiprojectable decompositions, the RUR is not defined in positive dimension.

Solving numerically
General solving algorithms
The general numerical algorithms which are designed for any system of nonlinear equations work also for polynomial systems. However the specific methods will generally be preferred, as the general methods generally do not allow one to find all solutions. In particular, when a general method does not find any solution, this is usually not an indication that there is no solution.
Nevertheless, two methods deserve to be mentioned here.

Newton's method may be used if the number of equations is equal to the number of variables. It does not allow one to find all the solutions nor to prove that there is no solution. But it is very fast when starting from a point which is close to a solution. Therefore, it is a basic tool for the homotopy continuation method described below.
Optimization is rarely used for solving polynomial systems, but it succeeded, circa 1970, in showing that a system of 81 quadratic equations in 56 variables is not inconsistent. With the other known methods, this remains beyond the possibilities of modern technology, as of 2022. This method consists simply in minimizing the sum of the squares of the equations. If zero is found as a local minimum, then it is attained at a solution. This method works for overdetermined systems, but outputs an empty information if all local minimums which are found are positive.

Homotopy continuation method
This is a semi-numeric method which supposes that the number of equations is equal to the number of variables. This method is relatively old but it has been dramatically improved in the last decades.This method divides into three steps. First an upper bound on the number of solutions is computed. This bound has to be as sharp as possible. Therefore, it is computed by, at least, four different methods and the best value, say 
  
    
      
        N
      
    
    {\displaystyle N}
  , is kept.
In the second step, a system 
  
    
      
        
          g
          
            1
          
        
        =
        0
        ,
        
        …
        ,
        
        
          g
          
            n
          
        
        =
        0
      
    
    {\displaystyle g_{1}=0,\,\ldots ,\,g_{n}=0}
   of polynomial equations is generated which has exactly 
  
    
      
        N
      
    
    {\displaystyle N}
   solutions that are easy to compute. This new system has the same number 
  
    
      
        n
      
    
    {\displaystyle n}
   of variables and the same number 
  
    
      
        n
      
    
    {\displaystyle n}
   of equations and the same general structure as the system to solve, 
  
    
      
        
          f
          
            1
          
        
        =
        0
        ,
        
        …
        ,
        
        
          f
          
            n
          
        
        =
        0
      
    
    {\displaystyle f_{1}=0,\,\ldots ,\,f_{n}=0}
  .
Then a homotopy between the two systems is considered. It consists, for example, of the straight line between the two systems, but other paths may be considered, in particular to avoid some singularities, in the system

  
    
      
        (
        1
        −
        t
        )
        
          g
          
            1
          
        
        +
        t
        
          f
          
            1
          
        
        =
        0
        ,
        
        …
        ,
        
        (
        1
        −
        t
        )
        
          g
          
            n
          
        
        +
        t
        
          f
          
            n
          
        
        =
        0
      
    
    {\displaystyle (1-t)g_{1}+tf_{1}=0,\,\ldots ,\,(1-t)g_{n}+tf_{n}=0}
  .The homotopy continuation consists in deforming the parameter 
  
    
      
        t
      
    
    {\displaystyle t}
   from 0 to 1 and following the 
  
    
      
        N
      
    
    {\displaystyle N}
   solutions during this deformation. This gives the desired solutions for 
  
    
      
        t
        =
        1
      
    
    {\displaystyle t=1}
  . Following means that, if 
  
    
      
        
          t
          
            1
          
        
        <
        
          t
          
            2
          
        
      
    
    {\displaystyle t_{1}<t_{2}}
  , the solutions for 
  
    
      
        t
        =
        
          t
          
            2
          
        
      
    
    {\displaystyle t=t_{2}}
   are deduced from the solutions for 
  
    
      
        t
        =
        
          t
          
            1
          
        
      
    
    {\displaystyle t=t_{1}}
   by Newton's method. The difficulty here is to well choose the value of 
  
    
      
        
          t
          
            2
          
        
        −
        
          t
          
            1
          
        
        :
      
    
    {\displaystyle t_{2}-t_{1}:}
   Too large, Newton's convergence may be slow and may even jump from a solution path to another one. Too small, and the number of steps slows down the method.

Numerically solving from the rational univariate representation
To deduce the numeric values of the solutions from a RUR seems easy: it suffices to compute the roots of the univariate polynomial and to substitute them in the other equations. This is not so easy because the evaluation of a polynomial at the roots of another polynomial is highly unstable.
The roots of the univariate polynomial have thus to be computed at a high precision which may not be defined once for all. There are two algorithms which fulfill this requirement.

Aberth method, implemented in MPSolve computes all the complex roots to any precision.
Uspensky's algorithm of Collins and Akritas, improved by Rouillier and Zimmermann  and based on Descartes' rule of signs. This algorithms computes the real roots, isolated in intervals of arbitrary small width. It is implemented in Maple (functions fsolve and RootFinding[Isolate]).

Software packages
There are at least four software packages which can solve zero-dimensional systems automatically (by automatically, one means that no human intervention is needed between input and output, and thus that no knowledge of the method by the user is needed). There are also several other software packages which may be useful for solving zero-dimensional systems. Some of them are listed after the automatic solvers.
The Maple function RootFinding[Isolate] takes as input any polynomial system over the rational numbers (if some coefficients are floating point numbers, they are converted to rational numbers) and outputs the real solutions represented either (optionally) as intervals of rational numbers or as floating point approximations of arbitrary precision. If the system is not zero dimensional, this is signaled as an error.
Internally, this solver, designed by F. Rouillier computes first a Gröbner basis and then a Rational Univariate Representation from which the required approximation of the solutions are deduced. It works routinely for systems having up to a few hundred complex solutions.
The rational univariate representation may be computed with Maple function Groebner[RationalUnivariateRepresentation].
To extract all the complex solutions from a rational univariate representation, one may use MPSolve, which computes the complex roots of univariate polynomials to any precision. It is recommended to run MPSolve several times, doubling the precision each time, until solutions remain stable, as the substitution of the roots in the equations of the input variables can be highly unstable.
The second solver is PHCpack, written under the direction of J. Verschelde. PHCpack implements the homotopy continuation method. This solver computes the isolated complex solutions of polynomial systems having as many equations as variables.
The third solver is Bertini, written by D. J. Bates, J. D. Hauenstein, A. J. Sommese, and C. W. Wampler. Bertini uses numerical homotopy continuation with adaptive precision.  In addition to computing zero-dimensional solution sets, both PHCpack and Bertini are capable of working with positive dimensional solution sets.
The fourth solver is the Maple library RegularChains, written by Marc Moreno-Maza and collaborators. It contains various functions for solving polynomial systems by means of regular chains.

See also
Elimination theory
Systems of polynomial inequalities
Triangular decomposition
Wu's method of characteristic set


== References ==