In computability theory and computational complexity theory, RE (recursively enumerable) is the class of decision problems for which a 'yes' answer can be verified by a Turing machine in a finite amount of time. Informally, it means that if the answer to a problem instance is 'yes', then there is some procedure that takes finite time to determine this, and this procedure never falsely reports 'yes' when the true answer is 'no'. However, when the true answer is 'no', the procedure is not required to halt; it may go into an "infinite loop" for some 'no' cases. Such a procedure is sometimes called a semi-algorithm, to distinguish it from an algorithm, defined as a complete solution to a decision problem.Similarly, co-RE is the set of all languages that are complements of a language in RE.  In a sense, co-RE contains languages of which membership can be disproved in a finite amount of time, but proving membership might take forever.

Equivalent definition
Equivalently, RE is the class of decision problems for which a Turing machine can list all the 'yes' instances, one by one (this is what 'enumerable' means).
Each member of RE is a recursively enumerable set and therefore a Diophantine set.
To show this is equivalent, note that if there is a machine 
  
    
      
        E
      
    
    {\displaystyle E}
   that enumerates all accepted inputs, another machine that takes in a string can run 
  
    
      
        E
      
    
    {\displaystyle E}
   and accept if the string is enumerated. Conversely, if a machine 
  
    
      
        M
      
    
    {\displaystyle M}
   accepts when an input is in a language, another machine can enumerate all strings in the language by interleaving simulations of 
  
    
      
        M
      
    
    {\displaystyle M}
   on every input and outputting strings that are accepted (there is an order of execution that will eventually get to every execution step because there are countably many ordered pairs of inputs and steps).

Relations to other classes
The set of recursive languages (R) is a subset of both RE and co-RE. In fact, it is the intersection of those two classes, because we can decide any problem for which there exists a recogniser and also a co-recogniser by simply interleaving them until one obtains a result. Therefore:

  
    
      
        
          
            R
          
        
        =
        
          
            RE
          
        
        ∩
        
          
            co-RE
          
        
      
    
    {\displaystyle {\mbox{R}}={\mbox{RE}}\cap {\mbox{co-RE}}}
  .Conversely, the set of languages that are neither RE nor co-RE is known as NRNC. These are the set of languages for which neither membership nor non-membership can be proven in a finite amount of time, and contain all other languages that are not in either RE or co-RE. That is:

  
    
      
        
          
            NRNC
          
        
        =
        
          
            ALL
          
        
        −
        (
        
          
            RE
          
        
        ∪
        
          
            co-RE
          
        
        )
      
    
    {\displaystyle {\mbox{NRNC}}={\mbox{ALL}}-({\mbox{RE}}\cup {\mbox{co-RE}})}
  .Not only are these problems undecidable, but neither they nor their complement are recursively enumerable.
In January of 2020, a preprint announced a proof that RE  was equivalent to the class MIP* (the class where a classical verifier interacts with multiple all-powerful quantum provers who share entanglement); a revised, but not yet fully reviewed, proof was published in Communications of the ACM in November 2021. The proof implies that the Connes embedding problem and Tsirelson's problem are false.

RE-complete
RE-complete is the set of decision problems that are complete for RE. In a sense, these are the "hardest" recursively enumerable problems. Generally, no constraint is placed on the reductions used except that they must be many-one reductions.
Examples of RE-complete problems:

Halting problem: Whether a program given a finite input finishes running or will run forever.
By Rice's Theorem, deciding membership in any nontrivial subset of the set of recursive functions is RE-hard. It will be complete whenever the set is recursively enumerable.
John Myhill (1955) proved that all creative sets are RE-complete.
The uniform word problem for groups or semigroups. (Indeed, the word problem for some individual groups is RE-complete.)
Deciding membership in a general unrestricted formal grammar. (Again, certain individual grammars have RE-complete membership problems.)
The validity problem for first-order logic.
Post correspondence problem: Given a list of pairs of strings, determine if there is a selection from these pairs (allowing repeats) such that the concatenation of the first items (of the pairs) is equal to the concatenation of the second items.
Determining if a Diophantine equation has any integer solutions.

co-RE-complete
co-RE-complete is the set of decision problems that are complete for co-RE. In a sense, these are the complements of the hardest recursively enumerable problems.
Examples of co-RE-complete problems: 

The domino problem for Wang tiles.
The satisfiability problem for first-order logic.

See also
Knuth–Bendix completion algorithm
List of undecidable problems
Polymorphic recursion
Risch algorithm
Semidecidability


== References ==