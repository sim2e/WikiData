In computer science and automata theory, a deterministic Büchi automaton is a theoretical machine which either accepts or rejects infinite inputs. Such a machine has a set of states and a transition function, which determines which state the machine should move to from its current state when it reads the next input character. Some states are accepting states and one state is the start state. The machine accepts an input if and only if it will pass through an accepting state infinitely many times as it reads the input.
A non-deterministic Büchi automaton, later referred to just as a Büchi automaton, has a transition function which may have multiple outputs, leading to many possible paths for the same input; it accepts an infinite input if and only if some possible path is accepting. Deterministic and non-deterministic Büchi automata generalize deterministic finite automata and nondeterministic finite automata to infinite inputs. Each are types of ω-automata. Büchi automata recognize the ω-regular languages, the infinite word version of regular languages. They are named after the Swiss mathematician Julius Richard Büchi, who invented them in 1962.Büchi automata are often used in model checking as an automata-theoretic version of a formula in linear temporal logic.

Formal definition
Formally, a deterministic Büchi automaton is a tuple A = (Q,Σ,δ,q0,F) that consists of the following components:

Q is a finite set. The elements of Q are called the states of A.
Σ is a finite set called the alphabet of A.
δ: Q × Σ → Q is a function, called the transition function of A.
q0 is an element of Q, called the initial state of A.
F⊆Q is the acceptance condition. A accepts exactly those runs in which at least one of the infinitely often occurring states is in F.In a (non-deterministic) Büchi automaton, the transition function δ is replaced with a transition relation Δ that returns a set of states, and the single initial state q0 is replaced by a set I of initial states. Generally, the term Büchi automaton without qualifier refers to non-deterministic Büchi automata.
For more comprehensive formalism see also ω-automaton.

Closure properties
The set of Büchi automata is closed under the following operations.
Let 
  
    
      
        
          A
          =
          (
          
            Q
            
              A
            
          
          ,
          Σ
          ,
          
            Δ
            
              A
            
          
          ,
          
            I
            
              A
            
          
          ,
          
            
              F
            
            
              A
            
          
          )
        
      
    
    {\displaystyle \scriptstyle A=(Q_{A},\Sigma ,\Delta _{A},I_{A},{F}_{A})}
   and 
  
    
      
        
          B
          =
          (
          
            Q
            
              B
            
          
          ,
          Σ
          ,
          
            Δ
            
              B
            
          
          ,
          
            I
            
              B
            
          
          ,
          
            
              F
            
            
              B
            
          
          )
        
      
    
    {\displaystyle \scriptstyle B=(Q_{B},\Sigma ,\Delta _{B},I_{B},{F}_{B})}
   be Büchi automata and 
  
    
      
        
          C
          =
          (
          
            Q
            
              C
            
          
          ,
          Σ
          ,
          
            Δ
            
              C
            
          
          ,
          
            I
            
              C
            
          
          ,
          
            
              F
            
            
              C
            
          
          )
        
      
    
    {\displaystyle \scriptstyle C=(Q_{C},\Sigma ,\Delta _{C},I_{C},{F}_{C})}
    be a finite automaton.

Union: There is a Büchi automaton that recognizes the language 
  
    
      
        
          L
          (
          A
          )
          ∪
          L
          (
          B
          )
          .
        
      
    
    {\displaystyle \scriptstyle L(A)\cup L(B).}
  Proof: If we assume, w.l.o.g., 
  
    
      
        
          
            Q
            
              A
            
          
          ∩
          
            Q
            
              B
            
          
        
      
    
    {\displaystyle \scriptstyle Q_{A}\cap Q_{B}}
   is empty then 
  
    
      
        
          L
          (
          A
          )
          ∪
          L
          (
          B
          )
        
      
    
    {\displaystyle \scriptstyle L(A)\cup L(B)}
   is recognized by the Büchi automaton 
  
    
      
        
          (
          
            Q
            
              A
            
          
          ∪
          
            Q
            
              B
            
          
          ,
          Σ
          ,
          
            Δ
            
              A
            
          
          ∪
          
            Δ
            
              B
            
          
          ,
          
            I
            
              A
            
          
          ∪
          
            I
            
              B
            
          
          ,
          
            
              F
            
            
              A
            
          
          ∪
          
            
              F
            
            
              B
            
          
          )
          .
        
      
    
    {\displaystyle \scriptstyle (Q_{A}\cup Q_{B},\Sigma ,\Delta _{A}\cup \Delta _{B},I_{A}\cup I_{B},{F}_{A}\cup {F}_{B}).}
  Intersection: There is a Büchi automaton that recognizes the language 
  
    
      
        
          L
          (
          A
          )
          ∩
          L
          (
          B
          )
          .
        
      
    
    {\displaystyle \scriptstyle L(A)\cap L(B).}
  Proof: The Büchi automaton 
  
    
      
        
          
            A
            ′
          
          =
          (
          
            Q
            ′
          
          ,
          Σ
          ,
          
            Δ
            ′
          
          ,
          
            I
            ′
          
          ,
          
            F
            ′
          
          )
        
      
    
    {\displaystyle \scriptstyle A'=(Q',\Sigma ,\Delta ',I',F')}
   recognizes 
  
    
      
        
          L
          (
          A
          )
          ∩
          L
          (
          B
          )
          ,
        
      
    
    {\displaystyle \scriptstyle L(A)\cap L(B),}
   where

  
    
      
        
          
            Q
            ′
          
          =
          
            Q
            
              A
            
          
          ×
          
            Q
            
              B
            
          
          ×
          {
          1
          ,
          2
          }
        
      
    
    {\displaystyle \scriptstyle Q'=Q_{A}\times Q_{B}\times \{1,2\}}
  

  
    
      
        
          
            Δ
            ′
          
          =
          
            Δ
            
              1
            
          
          ∪
          
            Δ
            
              2
            
          
        
      
    
    {\displaystyle \scriptstyle \Delta '=\Delta _{1}\cup \Delta _{2}}
  

  
    
      
        
          
            Δ
            
              1
            
          
          =
          {
          (
          (
          
            q
            
              A
            
          
          ,
          
            q
            
              B
            
          
          ,
          1
          )
          ,
          a
          ,
          (
          
            q
            
              A
            
            ′
          
          ,
          
            q
            
              B
            
            ′
          
          ,
          i
          )
          )
          
            |
          
          (
          
            q
            
              A
            
          
          ,
          a
          ,
          
            q
            
              A
            
            ′
          
          )
          ∈
          
            Δ
            
              A
            
          
          
             and 
          
          (
          
            q
            
              B
            
          
          ,
          a
          ,
          
            q
            
              B
            
            ′
          
          )
          ∈
          
            Δ
            
              B
            
          
          
             and if 
          
          
            q
            
              A
            
          
          ∈
          
            F
            
              A
            
          
          
             then 
          
          i
          =
          2
          
             else 
          
          i
          =
          1
          }
        
      
    
    {\displaystyle \scriptstyle \Delta _{1}=\{((q_{A},q_{B},1),a,(q'_{A},q'_{B},i))|(q_{A},a,q'_{A})\in \Delta _{A}{\text{ and }}(q_{B},a,q'_{B})\in \Delta _{B}{\text{ and if }}q_{A}\in F_{A}{\text{ then }}i=2{\text{ else }}i=1\}}
  

  
    
      
        
          
            Δ
            
              2
            
          
          =
          {
          (
          (
          
            q
            
              A
            
          
          ,
          
            q
            
              B
            
          
          ,
          2
          )
          ,
          a
          ,
          (
          
            q
            
              A
            
            ′
          
          ,
          
            q
            
              B
            
            ′
          
          ,
          i
          )
          )
          
            |
          
          (
          
            q
            
              A
            
          
          ,
          a
          ,
          
            q
            
              A
            
            ′
          
          )
          ∈
          
            Δ
            
              A
            
          
          
             and 
          
          (
          
            q
            
              B
            
          
          ,
          a
          ,
          
            q
            
              B
            
            ′
          
          )
          ∈
          
            Δ
            
              B
            
          
          
             and if 
          
          
            q
            
              B
            
          
          ∈
          
            F
            
              B
            
          
          
             then 
          
          i
          =
          1
          
             else 
          
          i
          =
          2
          }
        
      
    
    {\displaystyle \scriptstyle \Delta _{2}=\{((q_{A},q_{B},2),a,(q'_{A},q'_{B},i))|(q_{A},a,q'_{A})\in \Delta _{A}{\text{ and }}(q_{B},a,q'_{B})\in \Delta _{B}{\text{ and if }}q_{B}\in F_{B}{\text{ then }}i=1{\text{ else }}i=2\}}
  

  
    
      
        
          
            I
            ′
          
          =
          
            I
            
              A
            
          
          ×
          
            I
            
              B
            
          
          ×
          {
          1
          }
        
      
    
    {\displaystyle \scriptstyle I'=I_{A}\times I_{B}\times \{1\}}
  

  
    
      
        
          
            F
            ′
          
          =
          {
          (
          
            q
            
              A
            
          
          ,
          
            q
            
              B
            
          
          ,
          2
          )
          
            |
          
          
            q
            
              B
            
          
          ∈
          
            F
            
              B
            
          
          }
        
      
    
    {\displaystyle \scriptstyle F'=\{(q_{A},q_{B},2)|q_{B}\in F_{B}\}}
  
By construction, 
  
    
      
        
          
            r
            ′
          
          =
          (
          
            q
            
              A
            
            
              0
            
          
          ,
          
            q
            
              B
            
            
              0
            
          
          ,
          
            i
            
              0
            
          
          )
          ,
          (
          
            q
            
              A
            
            
              1
            
          
          ,
          
            q
            
              B
            
            
              1
            
          
          ,
          
            i
            
              1
            
          
          )
          ,
          …
        
      
    
    {\displaystyle \scriptstyle r'=(q_{A}^{0},q_{B}^{0},i^{0}),(q_{A}^{1},q_{B}^{1},i^{1}),\dots }
   is a run of automaton A' on input word w if 
  
    
      
        
          
            r
            
              A
            
          
          =
          
            q
            
              A
            
            
              0
            
          
          ,
          
            q
            
              A
            
            
              1
            
          
          ,
          …
        
      
    
    {\displaystyle \scriptstyle r_{A}=q_{A}^{0},q_{A}^{1},\dots }
   is run of A on w and 
  
    
      
        
          
            r
            
              B
            
          
          =
          
            q
            
              B
            
            
              0
            
          
          ,
          
            q
            
              B
            
            
              1
            
          
          ,
          …
        
      
    
    {\displaystyle \scriptstyle r_{B}=q_{B}^{0},q_{B}^{1},\dots }
   is run of B on w. 
  
    
      
        
          
            r
            
              A
            
          
        
      
    
    {\displaystyle \scriptstyle r_{A}}
   is accepting and 
  
    
      
        
          
            r
            
              B
            
          
        
      
    
    {\displaystyle \scriptstyle r_{B}}
   is accepting if r' is concatenation of an infinite series of finite segments of 1-states (states with third component 1) and 2-states (states with third component 2) alternatively. There is such a series of segments of r' if r' is accepted by A'.Concatenation: There is a Büchi automaton that recognizes the language 
  
    
      
        
          L
          (
          C
          )
          ⋅
          L
          (
          A
          )
          .
        
      
    
    {\displaystyle \scriptstyle L(C)\cdot L(A).}
  Proof: If we assume, w.l.o.g., 
  
    
      
        
          
            Q
            
              C
            
          
          ∩
          
            Q
            
              A
            
          
        
      
    
    {\displaystyle \scriptstyle Q_{C}\cap Q_{A}}
   is empty then the Büchi automaton 
  
    
      
        
          
            A
            ′
          
          =
          (
          
            Q
            
              C
            
          
          ∪
          
            Q
            
              A
            
          
          ,
          Σ
          ,
          
            Δ
            ′
          
          ,
          
            I
            ′
          
          ,
          
            F
            
              A
            
          
          )
        
      
    
    {\displaystyle \scriptstyle A'=(Q_{C}\cup Q_{A},\Sigma ,\Delta ',I',F_{A})}
   recognizes 
  
    
      
        
          L
          (
          C
          )
          ⋅
          L
          (
          A
          )
        
      
    
    {\displaystyle \scriptstyle L(C)\cdot L(A)}
  , where

  
    
      
        
          
            Δ
            ′
          
          =
          
            Δ
            
              A
            
          
          ∪
          
            Δ
            
              C
            
          
          ∪
          {
          (
          q
          ,
          a
          ,
          
            q
            ′
          
          )
          
            |
          
          
            q
            ′
          
          ∈
          
            I
            
              A
            
          
          
             and 
          
          ∃
          f
          ∈
          
            F
            
              C
            
          
          .
          (
          q
          ,
          a
          ,
          f
          )
          ∈
          
            Δ
            
              C
            
          
          }
        
      
    
    {\displaystyle \scriptstyle \Delta '=\Delta _{A}\cup \Delta _{C}\cup \{(q,a,q')|q'\in I_{A}{\text{ and }}\exists f\in F_{C}.(q,a,f)\in \Delta _{C}\}}
  

  
    
      
        
          
             if 
          
          
            I
            
              C
            
          
          ∩
          
            F
            
              C
            
          
          
             is empty then 
          
          
            I
            ′
          
          =
          
            I
            
              C
            
          
          
             otherwise 
          
          
            I
            ′
          
          =
          
            I
            
              C
            
          
          ∪
          
            I
            
              A
            
          
        
      
    
    {\displaystyle \scriptstyle {\text{ if }}I_{C}\cap F_{C}{\text{ is empty then }}I'=I_{C}{\text{ otherwise }}I'=I_{C}\cup I_{A}}
  ω-closure: If 
  
    
      
        
          L
          (
          C
          )
        
      
    
    {\displaystyle \scriptstyle L(C)}
   does not contain the empty word then there is a Büchi automaton that recognizes the language 
  
    
      
        
          L
          (
          C
          
            )
            
              ω
            
          
          .
        
      
    
    {\displaystyle \scriptstyle L(C)^{\omega }.}
  Proof: The Büchi automaton that recognizes 
  
    
      
        
          L
          (
          C
          
            )
            
              ω
            
          
        
      
    
    {\displaystyle \scriptstyle L(C)^{\omega }}
   is constructed in two stages. First, we construct a finite automaton A' such that A' also recognizes 
  
    
      
        
          L
          (
          C
          )
        
      
    
    {\displaystyle \scriptstyle L(C)}
   but there are no incoming transitions to initial states of A'. So, 
  
    
      
        
          
            A
            ′
          
          =
          (
          
            Q
            
              C
            
          
          ∪
          {
          
            q
            
              new
            
          
          }
          ,
          Σ
          ,
          
            Δ
            ′
          
          ,
          {
          
            q
            
              new
            
          
          }
          ,
          
            F
            
              C
            
          
          )
          ,
        
      
    
    {\displaystyle \scriptstyle A'=(Q_{C}\cup \{q_{\text{new}}\},\Sigma ,\Delta ',\{q_{\text{new}}\},F_{C}),}
   where 
  
    
      
        
          
            Δ
            ′
          
          =
          
            Δ
            
              C
            
          
          ∪
          {
          (
          
            q
            
              new
            
          
          ,
          a
          ,
          
            q
            ′
          
          )
          
            |
          
          ∃
          q
          ∈
          
            I
            
              C
            
          
          .
          (
          q
          ,
          a
          ,
          
            q
            ′
          
          )
          ∈
          
            Δ
            
              C
            
          
          }
          .
        
      
    
    {\displaystyle \scriptstyle \Delta '=\Delta _{C}\cup \{(q_{\text{new}},a,q')|\exists q\in I_{C}.(q,a,q')\in \Delta _{C}\}.}
   Note that 
  
    
      
        
          L
          (
          C
          )
          =
          L
          (
          
            A
            ′
          
          )
        
      
    
    {\displaystyle \scriptstyle L(C)=L(A')}
   because 
  
    
      
        
          L
          (
          C
          )
        
      
    
    {\displaystyle \scriptstyle L(C)}
   does not contain the empty string. Second, we will construct the Büchi automaton A" that recognize 
  
    
      
        
          L
          (
          C
          
            )
            
              ω
            
          
        
      
    
    {\displaystyle \scriptstyle L(C)^{\omega }}
   by adding a loop back to the initial state of A'. So, 
  
    
      
        
          
            A
            ″
          
          =
          (
          
            Q
            
              C
            
          
          ∪
          {
          
            q
            
              new
            
          
          }
          ,
          Σ
          ,
          
            Δ
            ″
          
          ,
          {
          
            q
            
              new
            
          
          }
          ,
          {
          
            q
            
              new
            
          
          }
          )
        
      
    
    {\displaystyle \scriptstyle A''=(Q_{C}\cup \{q_{\text{new}}\},\Sigma ,\Delta '',\{q_{\text{new}}\},\{q_{\text{new}}\})}
  , where 
  
    
      
        
          
            Δ
            ″
          
          =
          
            Δ
            ′
          
          ∪
          {
          (
          q
          ,
          a
          ,
          
            q
            
              new
            
          
          )
          
            |
          
          ∃
          
            q
            ′
          
          ∈
          
            F
            
              C
            
          
          .
          (
          q
          ,
          a
          ,
          
            q
            ′
          
          )
          ∈
          
            Δ
            ′
          
          }
          .
        
      
    
    {\displaystyle \scriptstyle \Delta ''=\Delta '\cup \{(q,a,q_{\text{new}})|\exists q'\in F_{C}.(q,a,q')\in \Delta '\}.}
  Complementation:There is a Büchi automaton that recognizes the language 
  
    
      
        
          
            Σ
            
              ω
            
          
          
            /
          
          L
          (
          A
          )
          .
        
      
    
    {\displaystyle \scriptstyle \Sigma ^{\omega }/L(A).}
  Proof: The proof is presented here.

Recognizable languages
Büchi automata recognize the ω-regular languages. Using the definition of ω-regular language and the above closure properties of Büchi automata, it can be easily shown that a Büchi automaton  can be constructed such that it recognizes any given ω-regular language. For converse, see construction of a ω-regular language for a Büchi automaton.

Deterministic versus non-deterministic Büchi automata
The class of deterministic Büchi automata does not suffice to encompass all omega-regular languages. In particular, there is no deterministic Büchi automaton that recognizes the language 
  
    
      
        (
        0
        ∪
        1
        
          )
          
            ∗
          
        
        
          0
          
            ω
          
        
      
    
    {\displaystyle (0\cup 1)^{*}0^{\omega }}
  , which contains exactly words in which 1 occurs only finitely many times.  We can demonstrate it by contradiction that no such deterministic Büchi automaton exists. Let us suppose A is a deterministic Büchi automaton that recognizes 
  
    
      
        (
        0
        ∪
        1
        
          )
          
            ∗
          
        
        
          0
          
            ω
          
        
      
    
    {\displaystyle (0\cup 1)^{*}0^{\omega }}
   with final state set F. A accepts 
  
    
      
        
          0
          
            ω
          
        
      
    
    {\displaystyle 0^{\omega }}
  . So, A will visit some state in F after reading some finite prefix of 
  
    
      
        
          0
          
            ω
          
        
      
    
    {\displaystyle 0^{\omega }}
  , say after the 
  
    
      
        
          i
          
            0
          
        
      
    
    {\displaystyle i_{0}}
  th letter. A also accepts the ω-word 
  
    
      
        
          0
          
            
              i
              
                0
              
            
          
        
        
          10
          
            ω
          
        
        .
      
    
    {\displaystyle 0^{i_{0}}10^{\omega }.}
   Therefore, for some 
  
    
      
        
          i
          
            1
          
        
      
    
    {\displaystyle i_{1}}
  , after the prefix 
  
    
      
        
          0
          
            
              i
              
                0
              
            
          
        
        
          10
          
            
              i
              
                1
              
            
          
        
      
    
    {\displaystyle 0^{i_{0}}10^{i_{1}}}
   the automaton will visit some state in F. Continuing with this construction the ω-word 
  
    
      
        
          0
          
            
              i
              
                0
              
            
          
        
        
          10
          
            
              i
              
                1
              
            
          
        
        
          10
          
            
              i
              
                2
              
            
          
        
        …
      
    
    {\displaystyle 0^{i_{0}}10^{i_{1}}10^{i_{2}}\dots }
   is generated which causes A to visit some state in F infinitely often and the word is not in 
  
    
      
        (
        0
        ∪
        1
        
          )
          
            ∗
          
        
        
          0
          
            ω
          
        
        .
      
    
    {\displaystyle (0\cup 1)^{*}0^{\omega }.}
   Contradiction.
The class of languages recognizable by deterministic Büchi automata is characterized by the following lemma.

Lemma: An ω-language is recognizable by a deterministic Büchi automaton if it is the limit language of some regular language.
Proof: Any deterministic Büchi automaton A can be viewed as a deterministic finite automaton A' and vice versa, since both types of automaton are defined as 5-tuple of the same components, only the interpretation of acceptance condition is different. We will show that 
  
    
      
        L
        (
        A
        )
      
    
    {\displaystyle L(A)}
   is the limit language of 
  
    
      
        L
        (
        
          A
          ′
        
        )
      
    
    {\displaystyle L(A')}
  . An ω-word is accepted by A if it will force A to visit final states infinitely often. Thus, infinitely many finite prefixes of this ω-word will be accepted by A'. Hence, 
  
    
      
        L
        (
        A
        )
      
    
    {\displaystyle L(A)}
   is a limit language of 
  
    
      
        L
        (
        
          A
          ′
        
        )
      
    
    {\displaystyle L(A')}
  .

Algorithms
Model checking of finite state systems can often be translated into various operations on Büchi automata.
In addition to the closure operations presented above,
the following are some useful operations for the applications of Büchi automata.

DeterminizationSince deterministic Büchi automata are strictly less expressive than non-deterministic automata, there can not be an algorithm for determinization of Büchi automata.
But, McNaughton's Theorem and Safra's construction provide algorithms that can translate a Büchi automaton into a deterministic Muller automaton or deterministic Rabin automaton.
Emptiness checkingThe language recognized by a Büchi automaton is non-empty if and only if there is a final state that is both reachable from the initial state, and lies on a cycle.
An effective algorithm that can check emptiness of a Büchi automaton:

Consider the automaton as a directed graph and decompose it into strongly connected components (SCCs).
Run a search (e.g., the depth-first search) to find which SCCs are reachable from the initial state.
Check whether there is a non-trivial SCC that is reachable and contains a final state.Each of the steps of this algorithm can be done in time linear in the automaton size, hence the algorithm is clearly optimal.

MinimizationMinimizing deterministic Büchi automata (i.e., given a deterministic Büchi automaton, finding a deterministic Büchi automaton recognizing the same language with a minimal number of states) is an NP-complete problem. This is in contrast to DFA minimization, which can be done in polynomial time.

Variants
Co-Büchi automaton
Weak Büchi automaton
Semi-deterministic Büchi automaton
Generalized Büchi automaton

Transforming from other models of description to non-deterministic Büchi automata
From generalized Büchi automata (GBA)
Multiple sets of states in acceptance condition can be translated into one set of states by an automata construction, which is known as "counting construction". Let's say A = (Q,Σ,∆,q0,{F1,...,Fn}) is a GBA, where F1,...,Fn are sets of accepting states then the equivalent Büchi automaton is A' = (Q', Σ, ∆',q'0,F'), where
Q' = Q × {1,...,n}
q'0 =  ( q0,1 )
∆' = { ( (q,i), a, (q',j) ) | (q,a,q') ∈ ∆ and  if q ∈ Fi then j=((i+1) mod n) else j=i }
F'=F1× {1}

From Linear temporal logic formula
A translation from a Linear temporal logic formula to a generalized Büchi automaton is given here. And, a translation from a generalized Büchi automaton to a Büchi automaton is presented above.

From Muller automata
A given Muller automaton can be transformed into an equivalent Büchi automaton with the following automata construction. Let's suppose A = (Q,Σ,∆,Q0,{F0,...,Fn}) is a Muller automaton, where F0,...,Fn are sets of accepting states. An equivalent Büchi automaton is A' = (Q', Σ, ∆',Q0,F'), where
Q' = Q ∪  ∪ni=0 {i} × Fi × 2Fi
∆'= ∆ ∪ ∆1 ∪ ∆2, where
∆1 ={ ( q, a, (i,q',∅) ) | (q, a, q') ∈ ∆ and q' ∈ Fi }
∆2={ ( (i,q,R), a, (i,q',R') ) | (q,a,q')∈∆ and q,q' ∈ Fi and if R=Fi then R'= ∅ otherwise R'=R∪{q} }
F'=∪ni=0 {i} × Fi × {Fi}
A'  keeps original set of states from A and adds extra states on them. The Büchi automaton A'  simulates the Muller automaton A as follows: At the beginning of the input word, the execution of A' follows the execution of A, since initial states are same and ∆' contains ∆. At some non-deterministically chosen position in the input word, A'  decides of jump into newly added states via a transition in ∆1. Then, the transitions in ∆2 try to visit all the states of Fi and keep growing R. Once R becomes equal to Fi then it is reset to the empty set and ∆2 try to visit all the states of Fi states again and again. So, if the states R=Fi are visited infinitely often then A'   accepts corresponding input and so does A. This construction closely follows the first part of the proof of McNaughton's Theorem.

From Kripke structures
Let the given Kripke structure be defined by M = ⟨Q, I, R, L, AP⟩ where Q is the set of states, I is the set of initial states, R is a relation between two states also interpreted as an edge, L is the label for the state and AP are the set of atomic propositions that form L.The Büchi automaton will have the following characteristics:

  
    
      
        
          Q
          
            final
          
        
        =
        Q
        ∪
        {
        
          init
        
        }
      
    
    {\displaystyle Q_{\text{final}}=Q\cup \{{\text{init}}\}}
  

  
    
      
        Σ
        =
        
          2
          
            A
            P
          
        
      
    
    {\displaystyle \Sigma =2^{AP}}
  

  
    
      
        I
        =
        {
        
          init
        
        }
      
    
    {\displaystyle I=\{{\text{init}}\}}
  

  
    
      
        F
        =
        Q
        ∪
        {
        
          init
        
        }
      
    
    {\displaystyle F=Q\cup \{{\text{init}}\}}
  

  
    
      
        δ
        =
        q
        
          
            a
            →
          
        
        p
      
    
    {\displaystyle \delta =q{\overrightarrow {a}}p}
   if (q, p) belongs to R and L(p) = aand init 
  
    
      
        
          
            a
            →
          
        
      
    
    {\displaystyle {\overrightarrow {a}}}
   q if q belongs to I and L(q) = a.Note however that there is a difference in the interpretation between Kripke structures and Büchi automata. While the former explicitly names every state variable's polarity for every state, the latter just declares the current set of variables holding or not holding true. It says absolutely nothing about the other variables that could be present in the model.

References
Bakhadyr Khoussainov; Anil Nerode (6 December 2012). Automata Theory and its Applications. Springer Science & Business Media. ISBN 978-1-4612-0171-7.
Thomas, Wolfgang (1990). "Automata on infinite objects". In Van Leeuwen (ed.). Handbook of Theoretical Computer Science. Elsevier. pp. 133–164.

External links

"Finite-state Automata on Infinite Inputs" (PDF).
Vardi, Moshe Y. "An automata-theoretic approach to linear temporal logic". CiteSeerX 10.1.1.125.8126.