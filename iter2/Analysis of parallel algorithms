In computer science, the analysis of parallel algorithms is the process of finding the computational complexity of algorithms executed in parallel – the amount of time, storage, or other resources needed to execute them. In many respects, analysis of parallel algorithms is similar to the analysis of sequential algorithms, but is generally more involved because one must reason about the behavior of multiple cooperating threads of execution. One of the primary goals of parallel analysis is to understand how a parallel algorithm's use of resources (speed, space, etc.) changes as the number of processors is changed.

Background
A so-called work-time (WT) (sometimes called work-depth, or work-span) framework was originally introduced by Shiloach and Vishkin 
for conceptualizing and describing parallel algorithms. 
In the WT framework, a parallel algorithm is first described in terms of parallel rounds. For each round, the operations to be performed are characterized, but several issues can be suppressed. For example, the number of operations at each round need not be clear, processors need not be mentioned and any information that may help with the assignment of processors to jobs need not be accounted for. Second, the suppressed information is provided. The inclusion of the suppressed information is guided by the proof of a scheduling theorem due to Brent, which is explained later in this article. The WT framework is useful since while it can greatly simplify the initial description of a parallel algorithm, inserting the details suppressed by that initial description is often not very difficult. For example, the WT framework was adopted as the basic presentation framework in the parallel algorithms books (for the Parallel random-access machine PRAM model) 

and,  
as well as in the class notes 
. The overview below explains how the WT framework can be used for analyzing more general parallel algorithms, even when their description is not available within the WT framework.

Definitions
Suppose computations are executed on a machine that has p processors. Let Tp denote the time that expires between the start of the computation and its end. Analysis of the computation's running time focuses on the following notions:

The work of a computation executed by p processors is the total number of primitive operations that the processors perform. Ignoring communication overhead from synchronizing the processors, this is equal to the time used to run the computation on a single processor, denoted T1.
The depth or span is the length of the longest series of operations that have to be performed sequentially due to data dependencies (the critical path). The depth may also be called the critical path length of the computation. Minimizing the depth/span is important in designing parallel algorithms, because the depth/span determines the shortest possible execution time. Alternatively, the span can be defined as the time T∞ spent computing using an idealized machine with an infinite number of processors.
The cost of the computation is the quantity pTp. This expresses the total time spent, by all processors, in both computing and waiting.Several useful results follow from the definitions of work, span and cost:

Work law. The cost is always at least the work: pTp ≥ T1. This follows from the fact that p processors can perform at most p operations in parallel.
Span law. A finite number p of processors cannot outperform an infinite number, so that Tp ≥ T∞.Using these definitions and laws, the following measures of performance can be given:

Speedup is the gain in speed made by parallel execution compared to sequential execution: Sp = T1 / Tp. When the speedup is Ω(p) for p processors (using big O notation), the speedup is linear, which is optimal in simple models of computation because the work law implies that T1 / Tp ≤ p (super-linear speedup can occur in practice due to memory hierarchy effects). The situation T1 / Tp = p is called perfect linear speedup. An algorithm that exhibits linear speedup is said to be scalable.
Efficiency is the speedup per processor, Sp / p.
Parallelism is the ratio T1 / T∞. It represents the maximum possible speedup on any number of processors. By the span law, the parallelism bounds the speedup: if p > T1 / T∞, then: 
The slackness is T1 / (pT∞). A slackness less than one implies (by the span law) that perfect linear speedup is impossible on p processors.

Execution on a limited number of processors
Analysis of parallel algorithms is usually carried out under the assumption that an unbounded number of processors is available. This is unrealistic, but not a problem, since any computation that can run in parallel on N processors can be executed on p < N processors by letting each processor execute multiple units of work. A result called Brent's law states that one can perform such a "simulation" in time Tp, bounded by

  
    
      
        
          T
          
            p
          
        
        ≤
        
          T
          
            N
          
        
        +
        
          
            
              
                T
                
                  1
                
              
              −
              
                T
                
                  N
                
              
            
            p
          
        
        ,
      
    
    {\displaystyle T_{p}\leq T_{N}+{\frac {T_{1}-T_{N}}{p}},}
  or, less precisely,

  
    
      
        
          T
          
            p
          
        
        =
        O
        
          (
          
            
              T
              
                N
              
            
            +
            
              
                
                  T
                  
                    1
                  
                
                p
              
            
          
          )
        
        .
      
    
    {\displaystyle T_{p}=O\left(T_{N}+{\frac {T_{1}}{p}}\right).}
  An alternative statement of the law bounds Tp above and below by

  
    
      
        
          
            
              T
              
                1
              
            
            p
          
        
        ≤
        
          T
          
            p
          
        
        ≤
        
          
            
              T
              
                1
              
            
            p
          
        
        +
        
          T
          
            ∞
          
        
      
    
    {\displaystyle {\frac {T_{1}}{p}}\leq T_{p}\leq {\frac {T_{1}}{p}}+T_{\infty }}
  .showing that the span (depth) T∞ and the work T1 together provide reasonable bounds on the computation time.


== References ==