The High-Level Shader Language or High-Level Shading Language (HLSL) is a proprietary shading language developed by Microsoft for the Direct3D 9 API to augment the shader assembly language, and went on to become the required shading language for the unified shader model of Direct3D 10 and higher.
HLSL is analogous to the GLSL shading language used with the OpenGL standard. It is very similar to the Nvidia Cg shading language, as it was developed alongside it. Early versions of the two languages were considered identical, only marketed differently. HLSL shaders can enable profound speed and detail increases as well as many special effects in both 2D and 3D computer graphics.HLSL programs come in six forms: pixel shaders (fragment in GLSL), vertex shaders, geometry shaders, compute shaders, tessellation shaders (Hull and Domain shaders), and ray tracing shaders (Ray Generation Shaders, Intersection Shaders, Any Hit/Closest Hit/Miss Shaders). A vertex shader is executed for each vertex that is submitted by the application, and is primarily responsible for transforming the vertex from object space to view space, generating texture coordinates, and calculating lighting coefficients such as the vertex's normal, tangent, and bitangent vectors. When a group of vertices (normally 3, to form a triangle) come through the vertex shader, their output position is interpolated to form pixels within its area; this process is known as rasterization.
Optionally, an application using a Direct3D 10/11/12 interface and Direct3D 10/11/12 hardware may also specify a geometry shader. This shader takes as its input some vertices of a primitive (triangle/line/point) and uses this data to generate/degenerate (or tessellate) additional primitives or to change the type of primitives, which are each then sent to the rasterizer.
D3D11.3 and D3D12 introduced Shader Model 5.1 and later 6.0.

Shader model comparison
GPUs listed are the hardware that first supported the given specifications. Manufacturers generally support all lower shader models through drivers. Note that games may claim to require a certain DirectX version, but don't necessarily require a GPU conforming to the full specification of that version, as developers can use a higher DirectX API version to target lower-Direct3D-spec hardware; for instance DirectX 9 exposes features of DirectX7-level hardware that DirectX7 did not, targeting their fixed-function T&L pipeline.

Pixel shader comparison
PS 1.0 — Unreleased 3dfx Rampage, DirectX 8
PS 1.1 — GeForce 3, DirectX 8
PS 1.2 — 3Dlabs Wildcat VP, DirectX 8.1
PS 1.3 — GeForce 4 Ti, DirectX 8.1
PS 1.4 — Radeon 8500-9250, Matrox Parhelia, DirectX 8.1
Shader Model 2.0 — Radeon 9500-9800/X300-X600, DirectX 9
Shader Model 2.0a — GeForce FX/PCX-optimized model, DirectX 9.0a
Shader Model 2.0b — Radeon X700-X850 shader model, DirectX 9.0b
Shader Model 3.0 — Radeon X1000 and GeForce 6, DirectX 9.0c
Shader Model 4.0 — Radeon HD 2000 and GeForce 8, DirectX 10
Shader Model 4.1 — Radeon HD 3000 and GeForce 200, DirectX 10.1
Shader Model 5.0 — Radeon HD 5000 and GeForce 400, DirectX 11
Shader Model 5.1 — GCN 1+, Fermi+, DirectX 12 (11_0+) with WDDM 2.0
Shader Model 6.0 — GCN 1+, Kepler+, DirectX 12 (11_0+) with WDDM 2.1
Shader Model 6.1 — GCN 1+, Kepler+, DirectX 12 (11_0+) with WDDM 2.3
Shader Model 6.2 — GCN 1+, Kepler+, DirectX 12 (11_0+) with WDDM 2.4
Shader Model 6.3 — GCN 1+, Kepler+, DirectX 12 (11_0+) with WDDM 2.5
Shader Model 6.4 — GCN 1+, Kepler+, Skylake+, DirectX 12 (11_0+) with WDDM 2.6
Shader Model 6.5 — GCN 1+, Kepler+, Skylake+, DirectX 12 (11_0+) with WDDM 2.7
Shader Model 6.6 — GCN 4+, Maxwell+, DirectX 12 (11_0+) with WDDM 3.0
Shader Model 6.7 — GCN 4+, Maxwell+, DirectX 12 (12_0+) with WDDM 3.1
"32 + 64" for Executed Instructions means "32 texture instructions and 64 arithmetic instructions."

Vertex shader comparison
See also
Direct3D
DirectX
DirectX Raytracing

Footnotes
External links
Programming guide for HLSL at Microsoft Docs
Introduction to the DirectX 9 High Level Shading Language, (ATI) AMD developer central
Riemer's HLSL Introduction & Tutorial (includes sample code)
HLSL Introduction
DirectX Intermediate Language (DXIL) specification