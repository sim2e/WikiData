Autocode is the name of a family of "simplified coding systems", later called programming languages, devised in the 1950s and 1960s for a series of  digital computers at the Universities of Manchester, Cambridge and London. Autocode was a generic term; the autocodes for different machines were not necessarily closely related as are, for example, the different versions of the single language Fortran.
Today the term is used to refer to the family of early languages descended from the Manchester Mark 1 autocoder systems, which were generally similar. In the 1960s, the term autocoders was used more generically as to refer to any high-level programming language using a compiler. 
Examples of languages referred to as autocodes are COBOL and Fortran.

Glennie's Autocode
The first autocode and its compiler were developed by Alick Glennie in 1952 for the Mark 1 computer at the University of Manchester and is considered by some to be the first compiled programming language. His main goal was increased comprehensibility in the programming of Mark 1 machines, which were known for their particularly abstruse machine code. Although the resulting language was much clearer than the machine code, it was still very machine dependent.Below is an example of Glennie's Autocode function which calculates the formula: 
  
    
      
        f
        (
        t
        )
        =
        
          
            
              |
            
            t
            
              |
            
          
        
        +
        5
        
          t
          
            3
          
        
      
    
    {\displaystyle f(t)={\sqrt {|t|}}+5t^{3}}
  . The example omits necessary scaling instruction needed to place integers into variables and assumes that results of multiplication fit into lower accumulator.

c@VA t@IC x@½C y@RC z@NC
INTEGERS +5 →c           # Put 5 into c
      →t                 # Load argument from lower accumulator
                         # to variable t
   +t     TESTA Z        # Put |t| into lower accumulator
   -t
          ENTRY Z
SUBROUTINE 6 →z          # Run square root subroutine on
                         # lower accumulator value
                         # and put the result into z
  +tt →y →x              # Calculate t^3 and put it into x 
  +tx →y →x
+z+cx   CLOSE WRITE 1    # Put z + (c * x) into
                         # lower accumulator
                         # and return

User's manual of Glennie's Autocode Compiler mentioned that "the loss of efficiency is no more than 10%".Impact of Glennie's Autocode on other Manchester users' programming habits was negligible. It wasn't even mentioned in Brooker's 1958 paper called "The Autocode Programs developed for the Manchester University Computers".

Mark 1 Autocode
The second autocode for the Mark 1 was planned in 1954 and developed by R. A. Brooker in 1955 and was called the "Mark 1 Autocode". The language was nearly machine-independent and had floating-point arithmetic, unlike the first one. On the other hand it allowed only one operation per line, offered few mnemonic names and had no way to define user subroutines.An example code which loads array of size 11 of floating-point numbers from the input would look like this

      n1 = 1         
1    vn1 = I         reads input into v[n[1]]
      n1 = n1 + 1
   j1,11 ≥ n1        jumps to 1 if n[1] ≤ 11

Brooker's Autocode removed two main difficulties of Mark 1's programmer: scaling and management of two-level storage. Unlike its predecessor it was heavily used.

Later Autocodes
Brooker also developed an autocode for the Ferranti Mercury in the 1950s in conjunction with the University of Manchester.
Mercury Autocode had a limited repertoire of variables a-z and a'-z' and, in some ways resembled early versions of the later Dartmouth BASIC language.  It pre-dated ALGOL, having no concept of stacks and hence no recursion or dynamically-allocated arrays.  In order to overcome the relatively small store size available on Mercury, large programs were written as distinct "chapters", each of which constituted an overlay.  Some skill was required to minimise time-consuming transfers of control between chapters.  This concept of overlays from drum under user control became common until virtual memory became available in later machines.  Slightly different dialects of Mercury Autocode were implemented for the Ferranti Atlas (distinct from the later Atlas Autocode) and the ICT 1300 and 1900 range.
The version for the EDSAC 2 was devised by David Hartley of  University of Cambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances, and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A version was developed for the successor Titan (the prototype Atlas 2 computer) as a temporary stop-gap while a more substantially advanced language known as CPL was being developed. CPL was never completed but did give rise to BCPL (developed by M. Richards), which in turn led to B and ultimately C. A contemporary but separate thread of development, Atlas Autocode was developed for the University of Manchester Atlas 1 machine.

References
Sources
Campbell-Kelly, Martin (1980). "Programming the Mark 1: Early Programming Activity at the University of Manchester". Annals of the History of Computing. IEEE. 2 (2): 130–167. doi:10.1109/MAHC.1980.10018. S2CID 10845153.
Garcia Camarero, Ernesto (1961). AUTOCODE un sistema simplificado de codificacion para la computadora MERCURY (in Spanish). Universidad de Buenos Aires. p. 70.
London, Keith (1968). Introduction to Computers. p. 261.
Knuth, Donald E.; Pardo, Luis Trabb (1976). "Early development of programming languages". Stanford University, Computer Science Department.

Further reading
The Autocodes: a User's Perspective
Brooker, R. A. (1958-01-01). "The Autocode Programs developed for the Manchester University Computers". The Computer Journal. 1 (1): 15–21. doi:10.1093/comjnl/1.1.15. ISSN 0010-4620.
Brooker, R. A. (1958-03-01). "Further Autocode Facilities for the Manchester (Mercury) Computer". The Computer Journal. 1 (3): 124–127. doi:10.1093/comjnl/1.3.124. ISSN 0010-4620.
Clarke, B. (1959-04-01). "The Pegasus Autocode". The Computer Journal. 1 (4): 192–195. doi:10.1093/comjnl/1.4.192. ISSN 0010-4620.
Barron, David William; et al. (1967). Titan Autocode programming manual. Cambridge, University Mathematical Laboratory.
Barron, David William (1968) [1967]. "1.5. Recursion in Functional Programming". In Gill, Stanley (ed.). Recursive techniques in programming. Macdonald Computer Monographs (1 ed.). London: Macdonald & Co. (Publishers) Ltd. p. 8. SBN 356-02201-3. (viii+64 pages)