LuaJIT is a tracing just-in-time compiler for the Lua programming language. Mike Pall, a primary maintainer of the project had resigned in 2015, resorting only to occasional patching to the future 2.1 version.

History
The LuaJIT project was started in 2005 by developer Mike Pall, released under the MIT open source license.The second major release of the compiler, 2.0.0, featured major performance increases.The latest release, 2.0.5 is released in 2017. However, Mike Pall, the creator and maintainer recommends using the tip of the v2.1 branch, and does not believe in releases.

Notable users
CERN, for their Methodical Accelerator Design 'next-generation' software for describing and simulating particle accelerators
OpenResty, a fork of nginx with Lua scripting
Kong, a web API gateway
Cloudflare, who use LuaJIT in their web application firewall service

Performance
LuaJIT is often the fastest Lua runtime. LuaJIT has also been named the fastest implementation of a dynamic programming language.LuaJIT includes a Foreign Function Interface compatible with C data structures. Its use is encouraged for numerical computation.

Tracing
LuaJIT is a tracing just-in-time compiler. LuaJIT chooses loops and function calls as trace anchors to begin recording possible hot paths. Function calls will require twice as many invocations to begin recording as a loop. Once LuaJIT begins recording, all control flow, including jumps and calls, are inlined to form a linear trace. All executed bytecode instructions are stored and incrementally converted into LuaJIT's Static single-assignment Intermediate representation. LuaJIT's trace compiler is often capable of inlining and removing dispatches from object orientation, operators, and type modifications.

Internal representation
LuaJIT uses two types of internal representation. A stack-based bytecode is used for the interpreter, and a static-single assignment form is used for the just-in-time compiler. The interpreter bytecode is frequently patched by the JIT compiler, often to begin executing a compiled trace or to mark a segment of bytecode for causing too many trace aborts.

Extensions
LuaJIT adds several extensions to its base implementation, Lua 5.1, most of which do not break compatibility.
"BitOp" for binary operations on unsigned 32-bit integers (these operations are also compiled by the just-in-time compiler)
"CoCo", which allows the VM to be fully resumable across all contexts
A foreign function interface
Portable bytecode (regardless of architecture, word size, or endianness, not version)

DynASM
DynASM is a lightweight preprocessor for C which was created for LuaJIT 1.0.0 to make developing the just-in-time compiler easier. DynASM replaces assembly code in C files with runtime writes to a 'code buffer', such that a developer may generate and then evoke code at runtime from a C program.
DynASM was phased out in LuaJIT 2.0.0 after a complete rewrite of the assembler, but remains in use by the LuaJIT contributors as a better assembly syntax for the LuaJIT interpreter.
DynASM includes a bare-bones C header file which is used at compile time for logic the preprocessor generates. The actual preprocessor is written in Lua.

Example


== References ==