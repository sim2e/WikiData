It is a common software engineering practice to develop software by using different components. Using software components segments the complexity of larger elements into smaller pieces of code and increases flexibility by enabling easier reuse of components to address new requirements. The practice has widely expanded since the late 1990s with the popularization of open-source software (OSS) to help speed up the software development process and reduce time to market.However, using open-source software introduces many risks for the software applications being developed. These risks can be organized into 5 categories:
OSS Version Control: risks of changes introduced by new versions
Security: risks of vulnerabilities in components - Common Vulnerabilities & Exposures (or CVEs)
License: risks of Intellectual property (IP) legal requirements
Development: risks of compatibility between existing codebase and open-source software
Support: risk of poor documentation and Obsolete software componentsShortly after the foundation of the Open Source Initiative in February 1998, the risks associated with OSS were raised and organizations tried to manage this using spreadsheets and documents to track all the open source components used by their developers.For organizations using open-source components extensively, there was a need to help automate the analysis and management of open source risk. This resulted in a new category of software products called Software Composition Analysis (SCA) which helps organizations manage open source risk.
SCA strives to detect all the 3rd party components in use within a software application to help reduce risks associated with security vulnerabilities, IP licensing requirements, and obsolescence of components being used.

Overview
Software composition analysis (SCA) is a practice in the fields of Information technology and software engineering for analyzing custom-built software applications to detect embedded open-source software and detect if they are up-to-date, contain security flaws, or have licensing requirements.SCA products typically work as follows:
An engine scans the software source code, and the associated artifacts used to compile a software application.
The engine identifies the OSS components and their versions and usually store this information in a database creating a catalog of OSS in use in the scanned application.
This catalog is then compared to databases referencing known security vulnerabilities for each component, the licensing requirements for using the component, and the historical versions of the component. For security vulnerability detection, this comparison is typically made against known security vulnerabilities (CVEs) that are tracked in the National Vulnerability Database (NVD). Some products use an additional proprietary database of vulnerabilities. For IP / Legal Compliance, SCA products will extract and evaluate the type of licensing used for the OSS component. Versions of components are extracted from popular open source repositories such as GitHub, Maven, PyPi, NuGet, and many others.
The results are then made available to end users using different digital formats. The content and format depend on the SCA product and may include guidance to evaluate and interpret the risk, and recommendations especially when it concerns the legal requirements of open source components such as strong or weak copyleft licensing. The output may also contain a Software Bill of Materials (SBOM) detailing all the open source components and associated attributes used in a software application

Usage
As SCA impacts different functions in organizations, different teams may use the data depending on the organization's corporation size and structure. The IT department will often use SCA for implementing and operationalizing the technology with common stakeholders including the chief information officer (CIO), the Chief Technology Officer (CTO), and the Chief Enterprise Architects (EA). Security and license data are often used by roles such as Chief Information Security Officers (CISO) for security risks, and Chief IP / Compliance officer for Intellectual Property risk management.Depending on the SCA product capabilities, it can be implemented directly within a developer's Integrated Development Environment (IDE) who uses and integrates OSS components, or it can be implemented as a dedicated step in the software quality control process.SCA products, and particularly their capacity to generate an SBOM is required in some countries such as the United States to enforce the security of software delivered to one of their agencies by a vendor.Another common use case for SCA is for Technology Due diligence. Prior to a Merger & Acquisition (M&A) transaction, Advisory firms review the risks associated with the software of the target firm.

SCA Strengths
The automatic nature of SCA products is their primary strength. Developers don't have to manually do an extra work when using and integrating OSS components. The automation also applies to indirect references to other OSS components within code and artifacts

SCA Weaknesses
Conversely, some key weaknesses of current SCA products may include:

Complex and labor-intensive deployment that can take months to get fully operational 
Each product uses its own proprietary database of OSS components that can vary dramatically in terms of size and coverage 
Limiting vulnerability data to reporting only on vulnerabilities officially reported in the NVD (which can be months after the vulnerability was originally discovered)
Lack of automated guidance on actions to take based on SCA reports and data
Lack of guidance on the legal requirements of OSS licenses that are detected

See also
Security testing
Open-source software
Common Vulnerabilities and Exposures
Open-source license
Software intelligence


== References ==