State–action–reward–state–action (SARSA) is an algorithm for learning a Markov decision process policy, used in the reinforcement learning area of machine learning. It was proposed by Rummery and Niranjan in a technical note with the name "Modified Connectionist Q-Learning" (MCQ-L). The alternative name SARSA, proposed by Rich Sutton, was only mentioned as a footnote.
This name reflects the fact that the main function for updating the Q-value depends on the current state of the agent "S1", the action the agent chooses "A1", the reward "R" the agent gets for choosing this action, the state "S2" that the agent enters after taking that action, and finally the next action "A2" the agent chooses in its new state. The acronym for the quintuple (st, at, rt, st+1, at+1) is SARSA. Some authors use a slightly different convention and write the quintuple (st, at, rt+1, st+1, at+1), depending on which time step the reward is formally assigned. The rest of the article uses the former convention.

Algorithm
Q
          
            n
            e
            w
          
        
        (
        
          s
          
            t
          
        
        ,
        
          a
          
            t
          
        
        )
        ←
        Q
        (
        
          s
          
            t
          
        
        ,
        
          a
          
            t
          
        
        )
        +
        α
        
        [
        
          r
          
            t
          
        
        +
        γ
        
        Q
        (
        
          s
          
            t
            +
            1
          
        
        ,
        
          a
          
            t
            +
            1
          
        
        )
        −
        Q
        (
        
          s
          
            t
          
        
        ,
        
          a
          
            t
          
        
        )
        ]
      
    
    {\displaystyle Q^{new}(s_{t},a_{t})\leftarrow Q(s_{t},a_{t})+\alpha \,[r_{t}+\gamma \,Q(s_{t+1},a_{t+1})-Q(s_{t},a_{t})]}
  A SARSA agent interacts with the environment and updates the policy based on actions taken, hence this is known as an on-policy learning algorithm. The Q value for a state-action is updated by an error, adjusted by the learning rate alpha. Q values represent the possible reward received in the next time step for taking action a in state s, plus the discounted future reward received from the next state-action observation.
Watkin's Q-learning updates an estimate of the optimal state-action value function 
  
    
      
        
          Q
          
            ∗
          
        
      
    
    {\displaystyle Q^{*}}
   based on the maximum reward of available actions. While SARSA learns the Q values associated with taking the policy it follows itself, Watkin's Q-learning learns the Q values associated with taking the optimal policy while following an exploration/exploitation policy.
Some optimizations of Watkin's Q-learning may be applied to SARSA.

Hyperparameters
Learning rate (alpha)
The learning rate determines to what extent newly acquired information overrides old information. A factor of 0 will make the agent not learn anything, while a factor of 1 would make the agent consider only the most recent information.

Discount factor (gamma)
The discount factor determines the importance of future rewards. A discount factor factor  of 0 makes the agent "opportunistic", or "myopic", e.g. , by only considering current rewards, while a factor approaching 1 will make it strive for a long-term high reward. If the discount factor meets or exceeds 1, the 
  
    
      
        Q
      
    
    {\displaystyle Q}
   values may diverge.

Initial conditions (Q(s0, a0))
Since SARSA is an iterative algorithm, it implicitly assumes an initial condition before the first update occurs. A high (infinite) initial value, also known as "optimistic initial conditions", can encourage exploration: no matter what action takes place, the update rule causes it to have higher values than the other alternative, thus increasing their choice probability. In 2013 it was suggested that the first reward 
  
    
      
        r
      
    
    {\displaystyle r}
   could be used to reset the initial conditions. According to this idea, the first time an action is taken the reward is used to set the value of 
  
    
      
        Q
      
    
    {\displaystyle Q}
  . This allows immediate learning in case of fixed deterministic rewards. This resetting-of-initial-conditions (RIC) approach seems to be consistent with human behavior in repeated binary choice experiments.

See also
Prefrontal cortex basal ganglia working memory
Sammon mapping
Constructing skill trees
Q-learning
Temporal difference learning
Reinforcement learning


== References ==